1.1 Ciência 
Ciência da 
da computação 
computação Muitos 
Muitos leitores 
leitores deste 
deste livro 
livro podem 
podem estar 
estar inscritos 
inscritos em 
em seu 
seu primeiro 
primeiro curso 
curso de 
de ciência 
ciência da 
da computação 
computação . 
. Bem-vindo 
Bem-vindo à 
à ciência 
ciência da 
da computação 
computação ! 
! Outros 
Outros leitores 
leitores podem 
podem estar 
estar querendo 
querendo aprender 
aprender mais 
mais sobre 
sobre assuntos 
assuntos de 
de desenvolvimento 
desenvolvimento de 
de software 
software orientado 
orientado por 
por objeto 
objeto . 
. Bem- 
Bem- vindo 
vindo a 
a este 
este excitante 
excitante paradigma 
paradigma ! 
! ( 
( A 
A palavra 
palavra paradigma 
paradigma significa 
significa “ 
“ um 
um conjunto 
conjunto estruturas 
estruturas , 
, onde 
onde todas 
todas contém 
contém um 
um elemento 
elemento em 
em particular. 
particular. ” 
” Random 
Random House 
House dictionary 
dictionary ) 
) Tipicamente 
Tipicamente um 
um primeiro 
primeiro curso 
curso de 
de ciência 
ciência da 
da computação 
computação apresenta 
apresenta uma 
uma linguagem 
linguagem de 
de programação 
programação e 
e enfatiza 
enfatiza a 
a programação 
programação . 
. Alguns 
Alguns estudantes 
estudantes terminam 
terminam tal 
tal curso 
curso com 
com a 
a impressão 
impressão de 
de que 
que ciência 
ciência da 
da computação 
computação é 
é o 
o estudo 
estudo de 
de programação 
programação . 
. Isso 
Isso não 
não é 
é verdadeiro 
verdadeiro . 
. Softwareé 
Softwareé o 
o produto 
produto final 
final de 
de um 
um processo 
processo de 
de engenharia 
engenharia que 
que envolve 
envolve requisitos 
requisitos , 
, especificações 
especificações , 
, análise 
análise e 
e projeto 
projeto . 
. Software 
Software é 
é uma 
uma entidade 
entidade visível 
visível e 
e tangível 
tangível . 
. É 
É um 
um conjunto 
conjunto de 
de instruções 
instruções que 
que permite 
permite um 
um computador 
computador digital 
digital realizar 
realizar uma 
uma variedade 
variedade de 
de tarefas 
tarefas . 
. Softwareé 
Softwareé um 
um produto 
produto freqüentemente 
freqüentemente embrulhado 
embrulhado em 
em embalagem 
embalagem bonitinha.Softwareé 
bonitinha.Softwareé um 
um negocio 
negocio multimilionário 
multimilionário . 
. Uma 
Uma linguagem 
linguagem de 
de programação 
programação proporciona 
proporciona uma 
uma notação 
notação onde 
onde se 
se pode 
pode expressar 
expressar algoritmos 
algoritmos e 
e estruturas 
estruturas de 
de informações 
informações . 
. O 
O computador 
computador pode 
pode usar 
usar tal 
tal notação 
notação para 
para realizar 
realizar tarefas 
tarefas úteis 
úteis . 
. Mas 
Mas para 
para muitos 
muitos cientistas 
cientistas da 
da computação 
computação , 
, programas 
programas representam 
representam o 
o menos 
menos produtivo 
produtivo , 
, mais 
mais rotineiro 
rotineiro e 
e talvez 
talvez a 
a mais 
mais monótona 
monótona parte 
parte do 
do processo 
processo de 
de desenvolvimento 
desenvolvimento de 
de software 
software . 
. De 
De fato 
fato , 
, alguns 
alguns cientistas 
cientistas da 
da computação 
computação nem 
nem mesmo 
mesmo programam 
programam . 
. # 
# pg002 
pg002 # 
# nt070 
nt070 # 
# cm00 
cm00 # 
# Para 
Para outros 
outros cientistas 
cientistas da 
da computação 
computação , 
, a 
a criação 
criação de 
de programas 
programas é 
é tudo 
tudo que 
que a 
a ciência 
ciência da 
da computação 
computação representa 
representa . 
. A 
A teoria 
teoria das 
das linguagens 
linguagens de 
de programação 
programação salienta 
salienta a 
a importância 
importância da 
da programação 
programação . 
. Mas 
Mas a 
a ciência 
ciência da 
da computação 
computação é 
é muito 
muito mais 
mais que 
que programação 
programação . 
. Ciência 
Ciência da 
da computação 
computação lida 
lida com 
com arte 
arte , 
, trabalho 
trabalho criativo 
criativo e 
e cálculos 
cálculos usados 
usados em 
em um 
um computador 
computador digital 
digital . 
. Ciência 
Ciência da 
da computação 
computação é 
é tão 
tão teórica 
teórica quanto 
quanto prática 
prática , 
, tão 
tão teórica 
teórica quanto 
quanto aplicada 
aplicada . 
. Teoria 
Teoria de 
de autômatos 
autômatos , 
, linguagens 
linguagens naturais 
naturais e 
e artificiais 
artificiais , 
, aprendizado 
aprendizado e 
e indução 
indução , 
, informação 
informação , 
, estruturas 
estruturas de 
de dados 
dados , 
, estudo 
estudo de 
de complexidade 
complexidade e 
e algoritmos 
algoritmos desempenham 
desempenham um 
um papel 
papel central 
central e 
e também 
também servem 
servem como 
como um 
um reforço 
reforço teórico 
teórico para 
para toda 
toda a 
a ciência 
ciência da 
da computação 
computação . 
. As 
As maiores 
maiores áreas 
áreas de 
de aplicação 
aplicação de 
de ciência 
ciência da 
da computação 
computação incluem 
incluem sistemas 
sistemas operacionais 
operacionais , 
, designde 
designde compiladores 
compiladores , 
, estruturas 
estruturas de 
de dados 
dados e 
e algoritmos 
algoritmos , 
, gráficos 
gráficos , 
, análise 
análise numérica 
numérica , 
, bases 
bases de 
de dados 
dados , 
, linguagens 
linguagens de 
de programação 
programação , 
, inteligência 
inteligência artificial 
artificial , 
, aprendizado 
aprendizado de 
de máquina 
máquina e 
e engenharia 
engenharia desoftware 
desoftware . 
. Como 
Como um 
um estudante 
estudante de 
de ciência 
ciência da 
da computação 
computação , 
, você 
você estará 
estará apto 
apto a 
a ter 
ter cursos 
cursos em 
em muitas 
muitas ou 
ou em 
em todas 
todas estas 
estas áreas 
áreas . 
. A 
A maioria 
maioria das 
das ciências 
ciências requerem 
requerem que 
que seus 
seus praticantes 
praticantes para 
para expressem 
expressem suas 
suas idéias 
idéias em 
em uma 
uma ou 
ou mais 
mais linguagens 
linguagens técnicas 
técnicas . 
. Químicos 
Químicos aprendem 
aprendem a 
a linguagem 
linguagem de 
de símbolos 
símbolos químicos 
químicos , 
, operações 
operações e 
e conexões 
conexões que 
que permitem 
permitem escrever 
escrever as 
as equações 
equações químicas 
químicas . 
. Físicos 
Físicos usam 
usam a 
a linguagem 
linguagem de 
de cálculos 
cálculos , 
, equação 
equação diferencial 
diferencial e 
e outras 
outras matemáticas 
matemáticas avançadas 
avançadas para 
para expressar 
expressar seus 
seus modelos 
modelos e 
e idéias 
idéias . 
. Engenheiros 
Engenheiros elétricos 
elétricos aprendem 
aprendem a 
a linguagem 
linguagem de 
de diagramas 
diagramas de 
de circuitos 
circuitos . 
. Cientistas 
Cientistas da 
da computação 
computação também 
também usam 
usam uma 
uma variedade 
variedade de 
de notações 
notações e 
e linguagens 
linguagens para 
para expressar 
expressar seus 
seus conceitos 
conceitos e 
e produzir 
produzir resultados 
resultados . 
. Um 
Um estudante 
estudante de 
de física 
física precisa 
precisa aprender 
aprender matemática 
matemática básica 
básica para 
para ter 
ter uma 
uma notação 
notação que 
que possa 
possa ser 
ser usada 
usada para 
para discussão 
discussão e 
e raciocínio 
raciocínio sobre 
sobre física 
física . 
. Um 
Um estudante 
estudante de 
de ciência 
ciência da 
da computação 
computação precisa 
precisa aprender 
aprender uma 
uma linguagem 
linguagem de 
de programação 
programação de 
de alto 
alto nível 
nível e 
e técnicas 
técnicas de 
de resolução 
resolução de 
de problemas 
problemas para 
para ser 
ser capaz 
capaz de 
de raciocinar 
raciocinar em 
em cima 
cima da 
da computação 
computação . 
. Para 
Para um 
um cientista 
cientista da 
da computação 
computação , 
, a 
a programação 
programação não 
não é 
é nada 
nada além 
além do 
do que 
que o 
o cálculo 
cálculo , 
, para 
para um 
um físico 
físico Cientistas 
Cientistas da 
da computação 
computação , 
, como 
como seus 
seus colegas 
colegas de 
de ciências 
ciências naturais 
naturais e 
e engenharia 
engenharia , 
, estão 
estão preocupados 
preocupados com 
com a 
a construção 
construção de 
de modelos 
modelos , 
, abstrações 
abstrações , 
, análises 
análises , 
, design 
design , 
, e 
e implementação 
implementação . 
. Um 
Um programa 
programa ou 
ou sistema 
sistema desoftwarefreqüentemente 
desoftwarefreqüentemente representa 
representa o 
o passo 
passo final 
final de 
de um 
um processo 
processo de 
de resolução 
resolução de 
de problemas 
problemas . 
. Este 
Este livro 
livro introduzirá 
introduzirá técnicas 
técnicas de 
de dedução 
dedução e 
e resolução 
resolução de 
de problemas 
problemas usando 
usando objetos 
objetos . 
. O 
O princípio 
princípio fundamental 
fundamental da 
da programação 
programação orientada 
orientada por 
por objeto 
objeto será 
será explorado 
explorado e 
e introduzido 
introduzido . 
. Durante 
Durante esta 
esta exploração 
exploração muitos 
muitos princípios 
princípios importantes 
importantes de 
de computação 
computação serão 
serão revelados 
revelados . 
. # 
# pg003 
pg003 # 
# nt065 
nt065 # 
# cm00 
cm00 # 
# 1.2 
1.2 Programas 
Programas de 
de computador 
computador Um 
Um programa 
programa consiste 
consiste em 
em uma 
uma seqüência 
seqüência de 
de instruções 
instruções escritas 
escritas numa 
numa linguagem 
linguagem precisa 
precisa chamada 
chamada linguagem 
linguagem de 
de programação 
programação . 
. Estas 
Estas instruções 
instruções são 
são traduzidas 
traduzidas em 
em um 
um compilador 
compilador , 
, para 
para uma 
uma linguagem 
linguagem de 
de baixo 
baixo nível 
nível , 
, a 
a linguagem 
linguagem de 
de máquina 
máquina , 
, para 
para que 
que o 
o computador 
computador possa 
possa entender 
entender . 
. As 
As aplicações 
aplicações de 
de um 
um software 
software são 
são definidas 
definidas geralmente 
geralmente em 
em duas 
duas categorias 
categorias : 
: programas 
programas de 
de sistemas 
sistemas e 
e programas 
programas de 
de aplicações 
aplicações . 
. Programas 
Programas de 
de sistemas 
sistemas visam 
visam controlar 
controlar um 
um componente 
componente do 
do computador 
computador , 
, como 
como um 
um dispositivo 
dispositivo de 
de armazenamento 
armazenamento , 
, dispositivo 
dispositivo de 
de saída 
saída , 
, ou 
ou o 
o próprio 
próprio computador 
computador ( 
( ex 
ex . 
. : 
: sistema 
sistema operacional 
operacional ) 
) . 
. Programas 
Programas de 
de aplicações 
aplicações resolvem 
resolvem um 
um problema 
problema externo 
externo ao 
ao computador 
computador como 
como um 
um sistema 
sistema bancário 
bancário , 
, sistema 
sistema de 
de controle 
controle de 
de tráfego 
tráfego aéreo 
aéreo , 
, sistema 
sistema de 
de processamento 
processamento de 
de textos 
textos , 
, planilha 
planilha eletrônica 
eletrônica ou 
ou outra 
outra área 
área de 
de aplicação 
aplicação . 
. Programas 
Programas de 
de computador 
computador representam 
representam o 
o produto 
produto final 
final do 
do processo 
processo de 
de desenvolvimento 
desenvolvimento desoftware 
desoftware . 
. Eles 
Eles são 
são entidades 
entidades tangíveis 
tangíveis que 
que podem 
podem ser 
ser liberados 
liberados para 
para o 
o cliente 
cliente , 
, vendidos 
vendidos , 
, embalados 
embalados . 
. Programas 
Programas comerciais 
comerciais usualmente 
usualmente vêm 
vêm acompanhados 
acompanhados de 
de um 
um guia 
guia do 
do usuário 
usuário e 
e outros 
outros documentos 
documentos de 
de apoio 
apoio escritos 
escritos . 
. 1.3 
1.3 Linguagens 
Linguagens de 
de programação 
programação Três 
Três categorias 
categorias principais 
principais de 
de linguagem 
linguagem de 
de programação 
programação têm 
têm sido 
sido desenvolvidas 
desenvolvidas : 
: linguagem 
linguagem de 
de máquina 
máquina , 
, linguagens 
linguagens assembly 
assembly e 
e linguagens 
linguagens de 
de alto 
alto nível 
nível . 
. Os 
Os primeiros 
primeiros computadores 
computadores somente 
somente podiam 
podiam ser 
ser programados 
programados usando 
usando linguagem 
linguagem de 
de máquina 
máquina . 
. Tal 
Tal linguagem 
linguagem usa 
usa seqüências 
seqüências de 
de zeros 
zeros e 
e uns 
uns ( 
( bits 
bits ) 
) que 
que representam 
representam instruções 
instruções precisas 
precisas para 
para computação 
computação e 
e acessos 
acessos de 
de dados 
dados . 
. Linguagens 
Linguagens assembly 
assembly usam 
usam caracteres 
caracteres alfabéticos 
alfabéticos para 
para representar 
representar as 
as configurações 
configurações de 
de bits 
bits da 
da linguagem 
linguagem de 
de máquina 
máquina . 
. As 
As letras 
letras usadas 
usadas descrevem 
descrevem as 
as operações 
operações a 
a serem 
serem realizadas 
realizadas . 
. Linguagens 
Linguagens assembly 
assembly representam 
representam um 
um nível 
nível mais 
mais alto 
alto de 
de abstração 
abstração do 
do que 
que as 
as linguagens 
linguagens de 
de máquina 
máquina . 
. Algumas 
Algumas linguagens 
linguagens assembly 
assembly modernas 
modernas suportam 
suportam estruturas 
estruturas de 
de controle 
controle que 
que antes 
antes eram 
eram previstas 
previstas somente 
somente em 
em linguagens 
linguagens de 
de alto 
alto nível 
nível . 
. Linguagens 
Linguagens de 
de alto 
alto nível 
nível assemelham-se 
assemelham-se com 
com linguagem 
linguagem natural 
natural . 
. Dados 
Dados e 
e operações 
operações são 
são representados 
representados por 
por declarações 
declarações descritivas 
descritivas . 
. Um 
Um exemplo 
exemplo : 
: suponha 
suponha que 
que desejamos 
desejamos adicionar 
adicionar dois 
dois números 
números e 
e depositar 
depositar a 
a soma 
soma em 
em um 
um terceiro 
terceiro número 
número . 
. Na 
Na maioria 
maioria das 
das linguagens 
linguagens de 
de alto 
alto nível 
nível , 
, estas 
estas operações 
operações são 
são assim 
assim simbolizadas 
simbolizadas : 
: c 
c : 
: = 
= a 
a + 
+ b 
b # 
# pg004 
pg004 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# Os 
Os operandos 
operandos a 
a e 
e b 
b representam 
representam os 
os dois 
dois números 
números a 
a serem 
serem adicionados 
adicionados e 
e a 
a variável 
variável c 
c representa 
representa o 
o total 
total . 
. O 
O operador 
operador “ 
“ : 
: = 
= ” 
” é 
é o 
o operador 
operador de 
de atribuição 
atribuição . 
. Ele 
Ele significa 
significa que 
que a 
a soma 
soma dos 
dos valores 
valores em 
em a 
a e 
e b 
b que 
que será 
será atribuído 
atribuído a 
a c1 
c1 . 
. Numa 
Numa típica 
típica linguagem 
linguagem assembly 
assembly , 
, as 
as instruções 
instruções poderiam 
poderiam ser 
ser lidas 
lidas : 
: LOAD 
LOAD A 
A ADD 
ADD B 
B STORE 
STORE C 
C Numa 
Numa linguagem 
linguagem de 
de máquina 
máquina as 
as instruções 
instruções poderiam 
poderiam ser 
ser lidas 
lidas : 
: 00011000 
00011000 00000101 
00000101 00100001 
00100001 00000011 
00000011 00101101 
00101101 11100001 
11100001 Como 
Como você 
você pode 
pode ver 
ver , 
, somente 
somente computadores 
computadores iriam 
iriam querer 
querer ler 
ler a 
a linguagem 
linguagem de 
de máquina 
máquina . 
. 1.4 
1.4 Estruturação 
Estruturação e 
e programação 
programação orientada 
orientada por 
por objetos 
objetos A 
A palavra 
palavra paradigma 
paradigma tem 
tem se 
se tornado 
tornado popular 
popular no 
no últimos 
últimos anos 
anos . 
. As 
As pessoas 
pessoas ouvem 
ouvem falar 
falar a 
a respeito 
respeito do 
do paradigma 
paradigma orientado 
orientado por 
por objeto 
objeto . 
. No 
No mundo 
mundo do 
do desenvolvimento 
desenvolvimento de 
de software 
software , 
, as 
as décadas 
décadas de 
de 70 
70 e 
e 80 
80 foram 
foram dominadas 
dominadas pela 
pela abordagem 
abordagem de 
de solução 
solução de 
de problemas 
problemas ( 
( paradigma 
paradigma ) 
) chamada 
chamada programação 
programação estruturada 
estruturada . 
. As 
As linguagens 
linguagens dominantes 
dominantes da 
da época 
época incluíam 
incluíam FORTRAN 
FORTRAN , 
, COBOL 
COBOL , 
, ALGOL 
ALGOL , 
, PASCAL 
PASCAL , 
, ADA 
ADA e 
e C. 
C. Consideráveis 
Consideráveis investimentos 
investimentos foram 
foram feitos 
feitos no 
no desenvolvimento 
desenvolvimento ferramentas 
ferramentas de 
de softwarepara 
softwarepara apoiar 
apoiar a 
a programação 
programação e 
e o 
o processo 
processo de 
de desenvolvimento 
desenvolvimento de 
de software 
software durante 
durante esse 
esse período 
período . 
. Os 
Os métodos 
métodos e 
e técnicas 
técnicas para 
para projeto 
projeto e 
e analise 
analise estruturados 
estruturados apresentados 
apresentados por 
por Larry 
Larry Constantine 
Constantine , 
, Tom 
Tom DeMarco 
DeMarco e 
e Edward 
Edward Yourdon 
Yourdon tem 
tem influenciado 
influenciado de 
de forma 
forma significativa 
significativa a 
a maneira 
maneira em 
em que 
que amplos 
amplos e 
e complexos 
complexos sistemas 
sistemas desoftwaresão 
desoftwaresão construídos 
construídos . 
. Poderosas 
Poderosas e 
e dispendiosas 
dispendiosas ferramentas 
ferramentas desoftwarepara 
desoftwarepara auxiliar 
auxiliar a 
a engenharia 
engenharia desoftware 
desoftware 1 
1 NT 
NT : 
: Em 
Em português 
português lê-se 
lê-se : 
: “ 
“ c 
c recebe 
recebe a 
a mais 
mais b 
b ” 
” apoiada 
apoiada por 
por computador 
computador ( 
( CASE2 
CASE2 ) 
) têm 
têm sido 
sido desenvolvidas 
desenvolvidas para 
para apoiar 
apoiar este 
este paradigma 
paradigma da 
da programação 
programação estruturada 
estruturada . 
. A 
A abordagem 
abordagem estruturada 
estruturada para 
para resolução 
resolução de 
de problemas 
problemas decompõe 
decompõe um 
um problema 
problema em 
em funções 
funções . 
. Essa 
Essa abordagem 
abordagem é 
é chamada 
chamada decomposição 
decomposição funcional 
funcional – 
– uma 
uma complexa 
complexa operação 
operação é 
é dividida 
dividida em 
em operações 
operações menores 
menores . 
. Cada 
Cada uma 
uma dessas 
dessas operações 
operações menores 
menores ainda 
ainda é 
é dividida 
dividida em 
em menores 
menores e 
e menos 
menos complexas 
complexas operações 
operações até 
até que 
que cada 
cada operação 
operação seja 
seja tratável 
tratável em 
em tamanho 
tamanho e 
e complexidade 
complexidade . 
. Um 
Um sistema 
sistema desoftwareé 
desoftwareé visto 
visto como 
como um 
um processo 
processo de 
de transformação 
transformação – 
– processamento 
processamento de 
de dados 
dados de 
de entrada 
entrada ( 
( input 
input ) 
) através 
através de 
de uma 
uma série 
série de 
de transformações 
transformações funcionais 
funcionais para 
para produzir 
produzir dados 
dados de 
de saída 
saída ( 
( output 
output ) 
) . 
. Os 
Os dados 
dados servem 
servem como 
como uma 
uma entrada 
entrada para 
para uma 
uma determinada 
determinada função 
função ou 
ou para 
para um 
um processo 
processo inteiro 
inteiro , 
, são 
são “ 
“ processados 
processados ” 
” e 
e produzem 
produzem uma 
uma saída 
saída útil 
útil . 
. # 
# pg005 
pg005 # 
# nt070 
nt070 # 
# cm00 
cm00 # 
# Por 
Por várias 
várias gerações 
gerações de 
de programadores 
programadores , 
, esta 
esta tem 
tem sido 
sido a 
a abordagem 
abordagem mais 
mais natural 
natural para 
para solução 
solução de 
de problemas 
problemas . 
. E 
E tem 
tem se 
se tornado 
tornado um 
um meio 
meio de 
de vida 
vida . 
. Em 
Em meados 
meados de 
de 1970 
1970 uma 
uma importante 
importante , 
, mas 
mas silenciosa 
silenciosa pesquisa 
pesquisa sobre 
sobre um 
um paradigma 
paradigma diferente 
diferente de 
de desenvolvimento 
desenvolvimento desoftwarefoi 
desoftwarefoi feita 
feita pela 
pela Xerox 
Xerox Corporation 
Corporation no 
no Palo 
Palo Alto 
Alto Research 
Research Center 
Center ( 
( PARC 
PARC ) 
) . 
. Em 
Em 1980 
1980 este 
este esforço 
esforço culminou 
culminou no 
no lançamento 
lançamento comercial 
comercial da 
da linguagem 
linguagem de 
de programação 
programação orientada 
orientada por 
por objetos 
objetos Smalltalk-80 
Smalltalk-80 . 
. Inspirado 
Inspirado nas 
nas idéias 
idéias de 
de Alan 
Alan Kay 
Kay e 
e seus 
seus sócios 
sócios , 
, esta 
esta linguagem 
linguagem visava 
visava proporcionar 
proporcionar ao 
ao programador 
programador , 
, um 
um ambiente 
ambiente de 
de desenvolvimento 
desenvolvimento desoftwarealtamente 
desoftwarealtamente individual 
individual e 
e robusto 
robusto , 
, que 
que de 
de muitas 
muitas maneiras 
maneiras se 
se parece 
parece com 
com o 
o ambiente 
ambiente moderno 
moderno de 
de estações 
estações de 
de trabalho 
trabalho . 
. Um 
Um mecanismo 
mecanismo de 
de interface 
interface gráfica 
gráfica extremamente 
extremamente “ 
“ amigável 
amigável ” 
” foi 
foi um 
um subproduto 
subproduto deste 
deste trabalho 
trabalho e 
e mais 
mais tarde 
tarde levou 
levou ao 
ao desenvolvimento 
desenvolvimento do 
do tipo 
tipo de 
de ambiente 
ambiente gráfico 
gráfico tipicamente 
tipicamente encontrado 
encontrado na 
na maioria 
maioria das 
das estações 
estações de 
de trabalho 
trabalho , 
, assim 
assim como 
como também 
também em 
em computadores 
computadores pessoais 
pessoais . 
. Em 
Em 1980 
1980 um 
um mouse 
mouse como 
como aparelho 
aparelho de 
de interface 
interface , 
, uma 
uma série 
série de 
de janelas 
janelas , 
, menus 
menus , 
, botões 
botões , 
, caixas 
caixas de 
de diálogo 
diálogo , 
, etc. 
etc. , 
, os 
os quais 
quais tem 
tem se 
se tornado 
tornado agora 
agora bastante 
bastante usuais 
usuais , 
, eram 
eram praticamente 
praticamente desconhecidos 
desconhecidos , 
, com 
com exceção 
exceção de 
de alguns 
alguns poucos 
poucos laboratórios 
laboratórios de 
de pesquisa 
pesquisa . 
. Mas 
Mas mais 
mais significativamente 
significativamente , 
, o 
o Smalltalk 
Smalltalk exemplificou 
exemplificou uma 
uma abordagem 
abordagem totalmente 
totalmente nova 
nova do 
do desenvolvimento 
desenvolvimento de 
de software 
software e 
e solução 
solução de 
de problemas 
problemas - 
- a 
a abordagem 
abordagem da 
da orientação 
orientação por 
por objetos 
objetos . 
. Nesta 
Nesta abordagem 
abordagem , 
, a 
a decomposição 
decomposição de 
de dados 
dados , 
, ao 
ao invés 
invés da 
da decomposição 
decomposição de 
de funções 
funções , 
, tornam-se 
tornam-se a 
a idéia 
idéia central 
central . 
. As 
As funções 
funções se 
se tornam 
tornam ligadas 
ligadas a 
a um 
um modelo 
modelo de 
de dados 
dados e 
e servem 
servem a 
a este 
este modelo 
modelo de 
de dados 
dados . 
. A 
A solução 
solução de 
de problemas 
problemas passa 
passa a 
a ser 
ser a 
a descrição 
descrição e 
e modelagem 
modelagem de 
de como 
como objetos 
objetos interagem 
interagem entre 
entre si 
si . 
. Em 
Em meados 
meados de 
de 1980 
1980 , 
, emergiram 
emergiram várias 
várias novas 
novas linguagens 
linguagens orientadas 
orientadas por 
por objetos 
objetos de 
de importância 
importância considerável 
considerável . 
. Entre 
Entre elas 
elas podemos 
podemos citar 
citar Objective-C 
Objective-C , 
, Eiffel 
Eiffel , 
, CLOS 
CLOS , 
, e 
e C++ 
C++ . 
. Todas 
Todas estas 
estas linguagens 
linguagens estão 
estão ainda 
ainda sendo 
sendo utilizadas 
utilizadas hoje 
hoje embora 
embora seja 
seja claro 
claro que 
que C++ 
C++ tenha 
tenha se 
se tornado 
tornado a 
a linguagem 
linguagem orientada 
orientada por 
por objetos 
objetos mais 
mais amplamente 
amplamente utilizada 
utilizada . 
. Das 
Das linguagens 
linguagens mencionadas 
mencionadas , 
, somente 
somente Smalltalk 
Smalltalk e 
e Eiffel 
Eiffel são 
são linguagens 
linguagens orientadas 
orientadas por 
por objeto 
objeto “ 
“ puras 
puras ” 
” . 
. Por 
Por puro 
puro se 
se entende 
entende que 
que estas 
estas duas 
duas linguagens 
linguagens não 
não são 
são baseadas 
baseadas em 
em algum 
algum substrato 
substrato que 
que não 
não orientado 
orientado por 
por objetos 
objetos , 
, como 
como são 
são C++ 
C++ ou 
ou Objective-C. 
Objective-C. Nestas 
Nestas construções 
construções de 
de linguagens 
linguagens baseadas 
baseadas em 
em C 
C , 
, podem 
podem coexistir 
coexistir tanto 
tanto a 
a programação 
programação estruturada 
estruturada quanto 
quanto a 
a programação 
programação orientada 
orientada por 
por objetos 
objetos . 
. Isto 
Isto freqüentemente 
freqüentemente leva 
leva a 
a um 
um modo 
modo misto 
misto de 
de solução 
solução de 
de problemas 
problemas . 
. Somente 
Somente Smalltalk 
Smalltalk e 
e Eiffel 
Eiffel oferecem 
oferecem ao 
ao programador 
programador a 
a possibilidade 
possibilidade para 
para fazer 
fazer 2 
2 NT 
NT : 
: Do 
Do inglês 
inglês Computer 
Computer Aided 
Aided Software 
Software Engineering 
Engineering programação 
programação exclusivamente 
exclusivamente orientada 
orientada por 
por objetos 
objetos . 
. O 
O autor 
autor deste 
deste livro 
livro considera 
considera isto 
isto uma 
uma grande 
grande vantagem 
vantagem do 
do uso 
uso destas 
destas duas 
duas linguagens 
linguagens . 
. O 
O próximo 
próximo capítulo 
capítulo explica 
explica o 
o orientação 
orientação por 
por objetos 
objetos em 
em maiores 
maiores detalhes 
detalhes . 
. Outros 
Outros paradigmas 
paradigmas de 
de programação 
programação tem 
tem sido 
sido criados 
criados além 
além do 
do estruturado 
estruturado e 
e do 
do orientado 
orientado por 
por objetos 
objetos . 
. Programação 
Programação funcional 
funcional , 
, exemplificada 
exemplificada pela 
pela linguagem 
linguagem de 
de programação 
programação LISP 
LISP e 
e programação 
programação lógica 
lógica exemplificada 
exemplificada pela 
pela linguagem 
linguagem de 
de programação 
programação PROLOG 
PROLOG são 
são dois 
dois exemplos 
exemplos . 
. # 
# pg006 
pg006 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# Programação 
Programação funcional 
funcional tem 
tem sido 
sido largamente 
largamente usada 
usada em 
em aplicativos 
aplicativos de 
de inteligência 
inteligência artificial 
artificial e 
e PROLOG 
PROLOG em 
em aplicativos 
aplicativos para 
para aprendizagem 
aprendizagem de 
de máquinas 
máquinas . 
. 1.5 
1.5 Ferramentas 
Ferramentas comuns 
comuns de 
de software 
software Incluídas 
Incluídas entre 
entre as 
as ferramentas 
ferramentas comuns 
comuns desoftware 
desoftware normalmente 
normalmente disponíveis 
disponíveis para 
para programadores 
programadores estão 
estão editores 
editores de 
de programa 
programa , 
, processadores 
processadores de 
de texto 
texto , 
, compiladores 
compiladores , 
, linkers 
linkers , 
, debuggers 
debuggers , 
, profilers 
profilers e 
e browsers 
browsers . 
. Cada 
Cada um 
um destes 
destes será 
será descrito 
descrito resumidamente 
resumidamente . 
. Um 
Um editor 
editor de 
de programa 
programa é 
é um 
um sistema 
sistema editor 
editor de 
de textos 
textos , 
, simplificado 
simplificado , 
, que 
que permite 
permite ao 
ao programador 
programador entrar 
entrar com 
com o 
o texto 
texto de 
de um 
um programa 
programa . 
. Alguns 
Alguns editores 
editores de 
de programa 
programa , 
, denominados 
denominados os 
os editores 
editores sensíveis 
sensíveis ao 
ao contexto 
contexto , 
, proporcionam 
proporcionam uma 
uma estrutura 
estrutura de 
de sintaxe 
sintaxe que 
que permite 
permite ao 
ao programador 
programador usar 
usar uma 
uma palavra 
palavra chave 
chave em 
em uma 
uma determinada 
determinada linguagem 
linguagem de 
de programação 
programação e 
e o 
o editor 
editor então 
então gera 
gera o 
o resto 
resto de 
de uma 
uma expressão 
expressão automaticamente 
automaticamente . 
. A 
A maioria 
maioria dos 
dos editores 
editores de 
de programas 
programas possuem 
possuem operações 
operações semelhantes 
semelhantes comosearch 
comosearch ( 
( localiza 
localiza a 
a palavra 
palavra no 
no texto 
texto ) 
) , 
, search/replace 
search/replace ( 
( procura 
procura e 
e altera 
altera uma 
uma palavra 
palavra ou 
ou expressão 
expressão ) 
) , 
, autoindent 
autoindent ( 
( faz 
faz a 
a identação 
identação do 
do texto 
texto de 
de um 
um programa 
programa com 
com um 
um número 
número específico 
específico de 
de espaços 
espaços ou 
ou de 
de tabulações 
tabulações baseado 
baseado no 
no contexto 
contexto do 
do programa 
programa ) 
) , 
, egoto 
egoto ( 
( move 
move o 
o marcador 
marcador ou 
ou cursor 
cursor para 
para uma 
uma linha 
linha especifica 
especifica no 
no texto 
texto ) 
) . 
. Um 
Um processador 
processador de 
de texto 
texto é 
é um 
um programa 
programa que 
que ajuda 
ajuda na 
na geração 
geração de 
de documentos 
documentos . 
. Ele 
Ele freqüentemente 
freqüentemente permite 
permite a 
a integração 
integração de 
de componentes 
componentes gráficos 
gráficos com 
com componentes 
componentes de 
de texto 
texto . 
. Os 
Os processadores 
processadores de 
de texto 
texto modernos 
modernos são 
são bem 
bem poderosos 
poderosos e 
e complexos 
complexos . 
. Um 
Um compilador 
compilador é 
é um 
um programa 
programa especifico 
especifico das 
das linguagens 
linguagens de 
de programação 
programação , 
, que 
que traduz 
traduz o 
o texto 
texto do 
do programa 
programa escrito 
escrito em 
em linguagem 
linguagem de 
de alto 
alto nível 
nível em 
em linguagem 
linguagem de 
de maquina 
maquina . 
. Este 
Este é 
é um 
um processo 
processo essencial 
essencial que 
que precisa 
precisa ser 
ser cumprido 
cumprido para 
para o 
o programa 
programa poder 
poder funcionar 
funcionar . 
. Um 
Um linker 
linker é 
é um 
um programa 
programa que 
que integra 
integra várias 
várias partes 
partes de 
de um 
um programa 
programa que 
que foram 
foram compiladas 
compiladas para 
para um 
um código 
código executável 
executável compondo 
compondo o 
o aplicativo 
aplicativo . 
. Normalmente 
Normalmente , 
, compilar 
compilar e 
e linkar 
linkar são 
são operações 
operações executadas 
executadas de 
de maneira 
maneira integrada 
integrada , 
, com 
com a 
a finalidade 
finalidade de 
de traduzir 
traduzir o 
o texto 
texto de 
de um 
um programa 
programa para 
para um 
um código 
código executável 
executável . 
. Um 
Um debuggeré 
debuggeré programa 
programa que 
que permite 
permite um 
um aplicativo 
aplicativo ser 
ser executado 
executado sob 
sob o 
o controle 
controle do 
do programador 
programador . 
. A 
A execução 
execução do 
do programa 
programa pode 
pode ser 
ser interrompida 
interrompida em 
em lugares 
lugares pré- 
pré- determinados 
determinados do 
do texto 
texto de 
de um 
um programa 
programa ou 
ou pode 
pode ser 
ser executada 
executada passo 
passo a 
a passo 
passo . 
. O 
O programador 
programador pode 
pode então 
então , 
, inspecionar 
inspecionar valores 
valores de 
de várias 
várias entidades 
entidades no 
no aplicativo 
aplicativo para 
para determinar 
determinar se 
se programa 
programa está 
está executando 
executando suas 
suas funções 
funções corretamente 
corretamente . 
. Geralmente 
Geralmente os 
os debuggerssão 
debuggerssão usados 
usados quando 
quando um 
um problema 
problema é 
é detectado 
detectado no 
no programa 
programa . 
. # 
# pg007 
pg007 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# Um 
Um profiler 
profiler é 
é um 
um programa 
programa executado 
executado em 
em conjunto 
conjunto com 
com um 
um programa 
programa em 
em desenvolvimento 
desenvolvimento . 
. Ele 
Ele calcula 
calcula e 
e informa 
informa o 
o tempo 
tempo que 
que o 
o programa 
programa gasta 
gasta em 
em diversas 
diversas partes 
partes e 
e seções 
seções , 
, permitindo 
permitindo ao 
ao programador 
programador determinar 
determinar o 
o local 
local que 
que necessita 
necessita de 
de mais 
mais eficiência 
eficiência para 
para modificá-la 
modificá-la na 
na versão 
versão final 
final . 
. Essencialmente 
Essencialmente , 
, umprofiler 
umprofiler é 
é um 
um instrumento 
instrumento de 
de análise 
análise de 
de desempenho 
desempenho da 
da execução 
execução de 
de um 
um programa 
programa . 
. Um 
Um browser 
browser é 
é um 
um programa 
programa que 
que permite 
permite uma 
uma inspeção 
inspeção visual 
visual de 
de um 
um programa 
programa amplo 
amplo e 
e complexo 
complexo . 
. Desta 
Desta maneira 
maneira , 
, é 
é um 
um instrumento 
instrumento essencial 
essencial para 
para grande 
grande projetos 
projetos de 
de software 
software , 
, onde 
onde um 
um programador 
programador precisa 
precisa ser 
ser capaz 
capaz de 
de inspecionar 
inspecionar outra 
outra parte 
parte de 
de um 
um software 
software , 
, possivelmente 
possivelmente desenvolvida 
desenvolvida por 
por outros 
outros programadores 
programadores ; 
; ou 
ou inspecionar 
inspecionar o 
o código 
código de 
de bibliotecas 
bibliotecas reutilizáveis 
reutilizáveis desoftware 
desoftware . 
. 1.6 
1.6 Programação 
Programação Um 
Um programa 
programa de 
de computador 
computador é 
é um 
um conjunto 
conjunto de 
de instruções 
instruções escritas 
escritas de 
de acordo 
acordo com 
com as 
as regras 
regras de 
de sintaxe 
sintaxe de 
de alguma 
alguma linguagem 
linguagem de 
de programação 
programação . 
. As 
As instruções 
instruções são 
são traduzidas 
traduzidas por 
por outro 
outro programa 
programa de 
de computador 
computador chamado 
chamado compilador 
compilador . 
. O 
O compilador 
compilador gera 
gera instruções 
instruções numa 
numa linguagem 
linguagem de 
de baixo 
baixo nível 
nível , 
, entendidas 
entendidas pela 
pela máquina 
máquina , 
, que 
que permitem 
permitem ao 
ao seu 
seu computador 
computador executar 
executar as 
as instruções 
instruções fornecidas 
fornecidas no 
no seu 
seu programa 
programa . 
. Instruções 
Instruções assim 
assim são 
são difíceis 
difíceis de 
de se 
se ler 
ler , 
, entender 
entender e 
e possivelmente 
possivelmente ainda 
ainda mais 
mais difíceis 
difíceis de 
de se 
se escrever 
escrever diretamente 
diretamente . 
. Felizmente 
Felizmente , 
, para 
para a 
a maioria 
maioria dos 
dos programadores 
programadores , 
, isso 
isso raramente 
raramente será 
será exigido 
exigido , 
, se 
se é 
é que 
que será 
será . 
. Um 
Um programa 
programa bem 
bem escrito 
escrito deve 
deve : 
: • 
• Ser 
Ser claro 
claro e 
e de 
de fácil 
fácil entendimento 
entendimento para 
para outro 
outro programador 
programador . 
. • 
• Resolver 
Resolver o 
o problema 
problema especificado 
especificado corretamente 
corretamente . 
. • 
• Ser 
Ser fácil 
fácil de 
de se 
se modificar 
modificar caso 
caso as 
as especificações 
especificações do 
do problema 
problema sejam 
sejam modificadas 
modificadas . 
. 1.6.1 
1.6.1 Linguagens 
Linguagens de 
de programação 
programação Foram 
Foram criadas 
criadas centenas 
centenas de 
de linguagens 
linguagens de 
de programação 
programação para 
para ajudar 
ajudar na 
na solução 
solução de 
de vários 
vários tipos 
tipos de 
de problemas 
problemas . 
. Essas 
Essas linguagens 
linguagens têm 
têm sido 
sido agrupadas 
agrupadas em 
em várias 
várias categorias 
categorias baseadas 
baseadas nas 
nas suas 
suas características 
características e 
e na 
na abordagem 
abordagem que 
que usam 
usam para 
para resolução 
resolução de 
de problemas 
problemas . 
. Essas 
Essas categorias 
categorias são 
são : 
: • 
• LinguagensAssembly- 
LinguagensAssembly- Essas 
Essas linguagens 
linguagens são 
são criadas 
criadas para 
para cada 
cada processador 
processador específico 
específico com 
com um 
um conjunto 
conjunto próprio 
próprio de 
de instruções 
instruções de 
de baixo 
baixo nível 
nível . 
. Programas 
Programas nessa 
nessa linguagem 
linguagem são 
são difíceis 
difíceis de 
de serem 
serem escritos 
escritos porque 
porque a 
a possibilidade 
possibilidade de 
de se 
se formular 
formular abstrações 
abstrações nestas 
nestas linguagens 
linguagens é 
é muito 
muito limitada 
limitada . 
. Elas 
Elas são 
são bastante 
bastante propensas 
propensas a 
a erros 
erros e 
e não 
não são 
são facilmente 
facilmente adaptáveis 
adaptáveis , 
, caso 
caso as 
as especificações 
especificações do 
do problema 
problema sofram 
sofram mudanças 
mudanças . 
. Entretanto 
Entretanto , 
, programas 
programas desenvolvidos 
desenvolvidos em 
em linguagem 
linguagem assemblysão 
assemblysão muito 
muito rápidos 
rápidos . 
. As 
As linguagens 
linguagens de 
de programação 
programação mais 
mais primitivas 
primitivas foram 
foram as 
as linguagensassembly 
linguagensassembly . 
. • 
• # 
# pg008 
pg008 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# Linguagens 
Linguagens procedurais 
procedurais – 
– Essas 
Essas linguagens 
linguagens foram 
foram as 
as primeiras 
primeiras linguagens 
linguagens de 
de “ 
“ alto-nível 
alto-nível ” 
” . 
. A 
A primeira 
primeira delas 
delas , 
, FORTRAN 
FORTRAN , 
, foi 
foi desenvolvida 
desenvolvida no 
no começo 
começo da 
da década 
década de 
de 50 
50 . 
. Ela 
Ela era 
era usada 
usada principalmente 
principalmente para 
para computação 
computação matemática 
matemática e 
e científica 
científica . 
. A 
A unidade 
unidade básica 
básica de 
de abstração 
abstração em 
em FORTRAN 
FORTRAN é 
é a 
a subrotina 
subrotina . 
. Subrotinas 
Subrotinas são 
são similares 
similares aos 
aos serviços 
serviços contidos 
contidos numa 
numa descrição 
descrição de 
de classe 
classe . 
. Os 
Os dados 
dados são 
são passados 
passados para 
para uma 
uma subrotina 
subrotina através 
através de 
de seus 
seus parâmetros 
parâmetros . 
. Computação 
Computação é 
é tipicamente 
tipicamente realizada 
realizada nesses 
nesses dados 
dados e 
e uma 
uma saída 
saída é 
é retornada 
retornada como 
como resultado 
resultado . 
. Outras 
Outras linguagens 
linguagens procedurais 
procedurais populares 
populares são 
são C 
C , 
, Pascal 
Pascal , 
, Algol 
Algol e 
e PL/1 
PL/1 . 
. • 
• Linguagens 
Linguagens funcionais 
funcionais – 
– LISP 
LISP pode 
pode ser 
ser vista 
vista como 
como a 
a avó 
avó das 
das linguagens 
linguagens funcionais 
funcionais . 
. A 
A sigla 
sigla LISP 
LISP significa 
significa processamento 
processamento de 
de listas 
listas ( 
( LISt 
LISt Processing 
Processing ) 
) . 
. LISP 
LISP e 
e suas 
suas linguagens 
linguagens derivadas 
derivadas são 
são amplamente 
amplamente usadas 
usadas na 
na área 
área de 
de inteligência 
inteligência artificial 
artificial , 
, aprendizagem 
aprendizagem de 
de máquina 
máquina e 
e ciência 
ciência cognitiva 
cognitiva . 
. Mesmo 
Mesmo tendo 
tendo algumas 
algumas aplicações 
aplicações comerciais 
comerciais escritas 
escritas em 
em LISP 
LISP , 
, muitos 
muitos ainda 
ainda consideram 
consideram essa 
essa linguagem 
linguagem como 
como uma 
uma ferramenta 
ferramenta de 
de pesquisa 
pesquisa . 
. • 
• Linguagens 
Linguagens Lógicas 
Lógicas – 
– PROLOG 
PROLOG e 
e suas 
suas variações 
variações proporcionam 
proporcionam a 
a oportunidade 
oportunidade de 
de formular 
formular um 
um conjunto 
conjunto de 
de proposições 
proposições lógicas 
lógicas e 
e ter 
ter deduções 
deduções derivadas 
derivadas pela 
pela linguagem 
linguagem . 
. PROLOG 
PROLOG , 
, assim 
assim como 
como LISP 
LISP , 
, tem 
tem sido 
sido usada 
usada como 
como uma 
uma ferramenta 
ferramenta de 
de pesquisa 
pesquisa na 
na área 
área de 
de inteligência 
inteligência artificial 
artificial e 
e aprendizagem 
aprendizagem de 
de máquina 
máquina . 
. • 
• Baseadas 
Baseadas em 
em objetos 
objetos – 
– Modula-2 
Modula-2 e 
e Ada 
Ada são 
são as 
as duas 
duas linguagens 
linguagens baseadas 
baseadas em 
em objeto 
objeto que 
que mais 
mais se 
se destacam 
destacam . 
. Cada 
Cada uma 
uma suporta 
suporta a 
a noção 
noção de 
de tipo 
tipo abstrato 
abstrato de 
de dados 
dados ( 
( a 
a ser 
ser explicado 
explicado mais 
mais tarde 
tarde nesse 
nesse capítulo 
capítulo ) 
) . 
. Essas 
Essas são 
são as 
as primeiras 
primeiras linguagens 
linguagens procedurais 
procedurais a 
a fornecer 
fornecer uma 
uma separação 
separação clara 
clara entre 
entre um 
um modelo 
modelo de 
de dados 
dados e 
e os 
os serviços 
serviços em 
em torno 
torno desses 
desses dados 
dados ( 
( entre 
entre a 
a visão 
visão externa 
externa dos 
dos dados 
dados , 
, pelo 
pelo usuário 
usuário , 
, e 
e suas 
suas representações 
representações internas 
internas ) 
) . 
. Nenhuma 
Nenhuma dessas 
dessas linguagens 
linguagens suporta 
suporta herança 
herança . 
. • 
• Linguagens 
Linguagens orientadas 
orientadas por 
por objetos 
objetos – 
– Simula 
Simula , 
, desenvolvida 
desenvolvida na 
na Noruega 
Noruega no 
no fim 
fim da 
da década 
década de 
de 60 
60 é 
é a 
a primeira 
primeira linguagem 
linguagem de 
de programação 
programação orientada 
orientada por 
por objeto 
objeto . 
. Na 
Na década 
década de 
de 70 
70 o 
o Centro 
Centro de 
de Pesquisa 
Pesquisa da 
da Xerox 
Xerox , 
, em 
em Palo 
Palo Alto 
Alto , 
, fez 
fez algumas 
algumas pesquisas 
pesquisas inovadoras 
inovadoras no 
no modelo 
modelo de 
de objeto 
objeto que 
que levou 
levou ao 
ao desenvolvimento 
desenvolvimento da 
da linguagem 
linguagem de 
de programação 
programação Smalltalk 
Smalltalk . 
. Essa 
Essa linguagem 
linguagem foi 
foi lançada 
lançada comercialmente 
comercialmente em 
em 1980 
1980 . 
. Foi 
Foi logo 
logo seguida 
seguida por 
por C++ 
C++ , 
, Objetctive-C 
Objetctive-C , 
, CLOS 
CLOS ( 
( Common 
Common Lisp 
Lisp Object 
Object System 
System ) 
) , 
, assim 
assim como 
como Eiffel 
Eiffel e 
e uma 
uma séria 
séria de 
de outras 
outras linguagens 
linguagens orientadas 
orientadas por 
por objeto 
objeto menos 
menos conhecidas 
conhecidas . 
. As 
As duas 
duas linguagens 
linguagens orientadas 
orientadas por 
por objeto 
objeto mais 
mais populares 
populares usadas 
usadas hoje 
hoje são 
são C++ 
C++ e 
e Smalltalk 
Smalltalk . 
. Eiffel 
Eiffel está 
está ganhando 
ganhando popularidade 
popularidade rapidamente 
rapidamente mas 
mas fica 
fica atrás 
atrás dessas 
dessas duas 
duas no 
no momento 
momento da 
da escrita 
escrita deste 
deste livro 
livro . 
. 1.7 
1.7 Objetivos 
Objetivos desse 
desse livro 
livro Este 
Este livro 
livro visa 
visa propiciar 
propiciar ao 
ao leitor 
leitor uma 
uma base 
base sólida 
sólida nos 
nos princípios 
princípios fundamentais 
fundamentais de 
de programação 
programação ( 
( nesse 
nesse caso 
caso programação 
programação orientada 
orientada por 
por objeto 
objeto ) 
) e 
e na 
na resolução 
resolução de 
de problemas 
problemas . 
. # 
# pg009 
pg009 # 
# nt 
nt -- 
-- - 
- # 
# cm00 
cm00 # 
# A 
A perspectiva 
perspectiva orientada 
orientada por 
por objeto 
objeto vista 
vista neste 
neste livro 
livro representa 
representa uma 
uma nova 
nova evolução 
evolução numa 
numa tendência 
tendência de 
de enfatizar 
enfatizar abstrações 
abstrações na 
na resolução 
resolução de 
de problemas 
problemas usando 
usando o 
o computador 
computador e 
e o 
o uso 
uso do 
do tipo 
tipo abstrato 
abstrato de 
de dados 
dados em 
em particular 
particular ( 
( que 
que será 
será definido 
definido e 
e discutido 
discutido no 
no próximo 
próximo capítulo 
capítulo ) 
) . 
. Este 
Este livro 
livro introduz 
introduz a 
a modelagem 
modelagem de 
de objetos 
objetos . 
. O 
O autor 
autor deste 
deste livro 
livro acredita 
acredita que 
que um 
um aluno 
aluno iniciante 
iniciante vai 
vai se 
se beneficiar 
beneficiar altamente 
altamente ao 
ao aprender 
aprender logo 
logo cedo 
cedo que 
que o 
o processo 
processo de 
de desenvolvimento 
desenvolvimento desoftwarenão 
desoftwarenão começa 
começa escrevendo-se 
escrevendo-se o 
o código 
código de 
de um 
um programa 
programa . 
. Na 
Na verdade 
verdade , 
, um 
um processo 
processo sistemático 
sistemático de 
de análise 
análise e 
e planejamento 
planejamento vem 
vem primeiro 
primeiro . 
. É 
É importante 
importante que 
que o 
o leitor 
leitor aprenda 
aprenda que 
que a 
a programação 
programação é 
é apenas 
apenas uma 
uma parte 
parte do 
do processo 
processo intelectual 
intelectual associado 
associado à 
à construção 
construção de 
de software 
software e 
e à 
à ciência 
ciência da 
da computação 
computação . 
. Através 
Através de 
de uma 
uma abordagem 
abordagem orientada 
orientada por 
por objetos 
objetos , 
, você 
você leitor 
leitor será 
será apresentado 
apresentado à 
à noção 
noção simples 
simples e 
e atrativa 
atrativa de 
de que 
que um 
um sistema 
sistema desoftwareé 
desoftwareé composto 
composto de 
de objetos 
objetos interagindo 
interagindo de 
de maneira 
maneira harmoniosa 
harmoniosa que 
que se 
se comunicam 
comunicam entre 
entre si 
si através 
através de 
de mensagens 
mensagens . 
. Essas 
Essas mensagens 
mensagens são 
são definidas 
definidas com 
com precisão 
precisão numa 
numa descrição 
descrição de 
de uma 
uma classe 
classe . 
. Como 
Como muitos 
muitos programadores 
programadores estão 
estão descobrindo 
descobrindo , 
, a 
a perspectiva 
perspectiva orientada 
orientada por 
por objetos 
objetos é 
é bastante 
bastante distinta 
distinta da 
da abordagem 
abordagem antiga 
antiga , 
, onde 
onde se 
se começa 
começa de 
de baixo 
baixo para 
para cima 
cima ( 
( aprendendo 
aprendendo primeiramente 
primeiramente sobre 
sobre tipos 
tipos numéricos 
numéricos , 
, variáveis 
variáveis , 
, operações 
operações de 
de atribuição 
atribuição , 
, operações 
operações de 
de comparação 
comparação , 
, controle 
controle de 
de fluxo 
fluxo e 
e repetição 
repetição , 
, e 
e muito 
muito mais 
mais tarde 
tarde , 
, sobre 
sobre o 
o conceito 
conceito de 
de funções 
funções ) 
) . 
. Apesar 
Apesar da 
da abordagem 
abordagem usada 
usada neste 
neste livro 
livro ser 
ser audaciosa 
audaciosa , 
, ela 
ela não 
não é 
é radical 
radical . 
. A 
A noção 
noção de 
de função 
função é 
é apresentada 
apresentada desde 
desde o 
o início 
início ( 
( no 
no capítulo 
capítulo 2 
2 ) 
) and 
and usada 
usada em 
em todo 
todo o 
o resto 
resto do 
do livro 
livro . 
. O 
O princípio 
princípio do 
do encapsulamento 
encapsulamento que 
que une 
une um 
um modelo 
modelo de 
de dados 
dados com 
com uma 
uma abstração 
abstração funcional 
funcional forma 
forma a 
a parte 
parte principal 
principal do 
do capítulo 
capítulo 2 
2 . 
. Apesar 
Apesar de 
de não 
não enfocar 
enfocar em 
em detalhes 
detalhes de 
de programação 
programação até 
até o 
o capítulo 
capítulo 4 
4 , 
, o 
o leitor 
leitor será 
será apresentado 
apresentado ao 
ao processo 
processo de 
de resolução 
resolução de 
de problemas 
problemas orientado 
orientado por 
por objetos 
objetos nos 
nos capítulos 
capítulos 2 
2 e 
e 3 
3 . 
. Eiffel 
Eiffel foi 
foi escolhida 
escolhida para 
para apoiar 
apoiar este 
este esforço 
esforço por 
por causa 
causa de 
de sua 
sua sintaxe 
sintaxe relativamente 
relativamente simples 
simples , 
, sua 
sua consistência 
consistência , 
, e 
e seu 
seu suporte 
suporte rico 
rico e 
e direto 
direto à 
à programação 
programação com 
com objetos 
objetos . 
. Entre 
Entre as 
as várias 
várias linguagens 
linguagens orientadas 
orientadas por 
por objetos 
objetos desenvolvidas 
desenvolvidas nos 
nos últimos 
últimos 10 
10 anos 
anos , 
, ela 
ela é 
é a 
a mais 
mais elegante 
elegante e 
e talvez 
talvez a 
a mais 
mais poderosa 
poderosa . 
. Para 
Para os 
os leitores 
leitores que 
que não 
não estão 
estão usando 
usando este 
este livro 
livro numa 
numa disciplina 
disciplina inicial 
inicial em 
em ciência 
ciência da 
da computação 
computação , 
, deixem-me 
deixem-me dizer 
dizer porque 
porque C++ 
C++ não 
não foi 
foi escolhida 
escolhida para 
para este 
este livro 
livro . 
. Apesar 
Apesar de 
de reconhecer 
reconhecer a 
a enorme 
enorme popularidade 
popularidade de 
de C++ 
C++ e 
e a 
a possibilidade 
possibilidade de 
de que 
que o 
o leitor 
leitor tenha 
tenha que 
que acabar 
acabar se 
se acostumando 
acostumando rapidamente 
rapidamente com 
com esta 
esta linguagem 
linguagem , 
, eu 
eu acredito 
acredito que 
que a 
a complexidade 
complexidade de 
de C++ 
C++ , 
, que 
que é 
é de 
de certa 
certa maneira 
maneira uma 
uma sintaxe 
sintaxe misteriosa 
misteriosa , 
, sua 
sua falta 
falta de 
de segurança 
segurança , 
, seu 
seu apoio 
apoio continuado 
continuado em 
em artefatos 
artefatos de 
de baixo 
baixo nível 
nível com 
com ponteiros 
ponteiros e 
e referências 
referências , 
, distraem 
distraem do 
do objetivo 
objetivo de 
de aprender 
aprender a 
a resolver 
resolver problemas 
problemas usando 
usando objetos 
objetos . 
. C++ 
C++ não 
não encoraja 
encoraja nem 
nem desencoraja 
desencoraja a 
a solução 
solução de 
de problemas 
problemas de 
de maneira 
maneira orientada 
orientada por 
por objetos 
objetos . 
. # 
# pg010 
pg010 # 
# nt075 
nt075 # 
# cm00 
cm00 # 
# C++ 
C++ é 
é uma 
uma linguagem 
linguagem híbrida 
híbrida que 
que culturalmente 
culturalmente é 
é embutida 
embutida em 
em “ 
“ ideologia 
ideologia do 
do C 
C ” 
” . 
. Apesar 
Apesar desta 
desta ideologia 
ideologia ter 
ter demonstrado 
demonstrado ser 
ser extremamente 
extremamente produtiva 
produtiva , 
, ela 
ela não 
não leva 
leva ao 
ao aprendizado 
aprendizado de 
de um 
um novo 
novo conjunto 
conjunto de 
de mecanismos 
mecanismos para 
para solução 
solução de 
de problemas 
problemas . 
. Na 
Na minha 
minha opinião 
opinião , 
, esta 
esta é 
é importante 
importante primeiro 
primeiro tornar-se 
tornar-se eficiente 
eficiente no 
no processo 
processo de 
de solução 
solução de 
de problemas 
problemas orientada 
orientada por 
por objetos 
objetos , 
, antes 
antes de 
de iniciar 
iniciar o 
o desafio 
desafio de 
de dominar 
dominar uma 
uma linguagem 
linguagem mais 
mais complexa 
complexa . 
. O 
O “ 
“ ++ 
++ ” 
” em 
em “ 
“ C++ 
C++ ” 
” não 
não é 
é um 
um pequeno 
pequeno incremento 
incremento da 
da linguagem 
linguagem C. 
C. E 
E acredito 
acredito que 
que vocês 
vocês acharão 
acharão , 
, como 
como eu 
eu acho 
acho , 
, que 
que Eiffel 
Eiffel não 
não é 
é somente 
somente uma 
uma notável 
notável linguagem 
linguagem para 
para se 
se aprender 
aprender princípios 
princípios básicos 
básicos de 
de construção 
construção de 
de programas 
programas orientados 
orientados por 
por objetos 
objetos , 
, mas 
mas também 
também uma 
uma rica 
rica e 
e potente 
potente linguagem 
linguagem para 
para usar 
usar na 
na solução 
solução de 
de problemas 
problemas reais 
reais após 
após você 
você ter 
ter dominado 
dominado os 
os princípios 
princípios da 
da programação 
programação orientada 
orientada por 
por objetos 
objetos . 
. É 
É minha 
minha intenção 
intenção que 
que este 
este livro 
livro inspire 
inspire em 
em vocês 
vocês interesse 
interesse e 
e entusiasmo 
entusiasmo na 
na solução 
solução orientada 
orientada por 
por objetos 
objetos de 
de problemas 
problemas e 
e proporcione 
proporcione a 
a vocês 
vocês com 
com uma 
uma base 
base sólida 
sólida em 
em alguns 
alguns princípios 
princípios básicos 
básicos de 
de ciência 
ciência da 
da computação 
computação . 
. 1.8 
1.8 Exercícios 
Exercícios • 
• Cite 
Cite várias 
várias maneiras 
maneiras nas 
nas quais 
quais computadores 
computadores têm 
têm influenciado 
influenciado sua 
sua vida 
vida . 
. ( 
( Por 
Por favor 
favor restrinja-se 
restrinja-se no 
no uso 
uso de 
de palavras 
palavras tolas 
tolas ) 
) . 
. • 
• Cite 
Cite algumas 
algumas profissões 
profissões que 
que envolvem 
envolvem um 
um computador 
computador . 
. • 
• Explique 
Explique os 
os principais 
principais componentes 
componentes de 
de um 
um computador 
computador . 
. • 
• Qual 
Qual a 
a vantagem 
vantagem no 
no uso 
uso de 
de uma 
uma linguagem 
linguagem de 
de alto 
alto nível 
nível sobre 
sobre uma 
uma linguagem 
linguagem de 
de máquina 
máquina ? 
? • 
• Quais 
Quais são 
são os 
os passos 
passos tradicionais 
tradicionais no 
no ciclo 
ciclo de 
de vida 
vida de 
de um 
um sistema 
sistema desoftware 
desoftware ? 
? • 
• Por 
Por que 
que você 
você está 
está interessado 
interessado por 
por computadores 
computadores ou 
ou pela 
pela ciência 
ciência da 
da computação 
computação ? 
? Você 
Você pode 
pode manter 
manter sua 
sua resposta 
resposta para 
para esta 
esta questão 
questão em 
em um 
um lugar 
lugar seguro 
seguro por 
por alguns 
alguns anos 
anos e 
e reler 
reler sua 
sua resposta 
resposta em 
em 3 
3 anos 
anos . 
. # 
# pg011 
pg011 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# 2 
2 Uma 
Uma Abordagem 
Abordagem Orientada 
Orientada Por 
Por Objetos 
Objetos para 
para Resolver 
Resolver Problemas 
Problemas Este 
Este capítulo 
capítulo é 
é sobre 
sobre objetos 
objetos e 
e classes 
classes e 
e como 
como cada 
cada um 
um é 
é usado 
usado na 
na construção 
construção de 
de um 
um programa 
programa . 
. Quando 
Quando você 
você terminar 
terminar este 
este capítulo 
capítulo , 
, você 
você terá 
terá aprendido 
aprendido : 
: ( 
( palavras 
palavras técnicas 
técnicas importantes 
importantes são 
são mostradas 
mostradas em 
em negrito 
negrito ) 
) : 
: • 
• Um 
Um objeto 
objeto é 
é uma 
uma instância 
instância de 
de umaclasse 
umaclasse . 
. • 
• Um 
Um objeto 
objeto temdadose 
temdadose comportamento 
comportamento . 
. • 
• Um 
Um objeto 
objeto pode 
pode utilizarcomandosou 
utilizarcomandosou consultasde 
consultasde outros 
outros objetos 
objetos . 
. • 
• Um 
Um comando 
comando permite 
permite modificar 
modificar os 
os dados 
dados mantidos 
mantidos pela 
pela instância 
instância de 
de uma 
uma classe 
classe ( 
( pelo 
pelo objeto 
objeto ) 
) . 
. • 
• Uma 
Uma consulta 
consulta permite 
permite verificar 
verificar o 
o valor 
valor dos 
dos dados 
dados mantidos 
mantidos pela 
pela instância 
instância de 
de uma 
uma classe 
classe . 
. • 
• O 
O estadode 
estadode um 
um objeto 
objeto pode 
pode ser 
ser verificado 
verificado através 
através das 
das consultas 
consultas ao 
ao objeto 
objeto ( 
( ao 
ao valor 
valor de 
de seus 
seus dados 
dados ) 
) . 
. • 
• Classes 
Classes podem 
podem ser 
ser relacionadas 
relacionadas entre 
entre si 
si de 
de três 
três maneiras 
maneiras diferentes 
diferentes : 
: herança 
herança , 
, associaçãoe 
associaçãoe uso 
uso . 
. • 
• Algumas 
Algumas classes 
classes sãoabstratas 
sãoabstratas já 
já outras 
outras sãoconcretas 
sãoconcretas . 
. • 
• Objetos 
Objetos são 
são criados 
criados dentro 
dentro de 
de umprograma 
umprograma e 
e interagem 
interagem com 
com outros 
outros objetos 
objetos à 
à medida 
medida que 
que o 
o programa 
programa executa 
executa . 
. # 
# pg012 
pg012 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# 2.1 
2.1 Objeto 
Objeto , 
, objetos 
objetos em 
em todos 
todos os 
os lugares 
lugares 2.1.1 
2.1.1 Objetos 
Objetos ordinários 
ordinários O 
O que 
que é 
é um 
um objeto 
objeto ? 
? Um 
Um objeto 
objeto ordinário 
ordinário é 
é caracterizado 
caracterizado tanto 
tanto por 
por seu 
seu comportamento 
comportamento quanto 
quanto pelo 
pelo seu 
seu estado 
estado interno 
interno . 
. Para 
Para objetos 
objetos ordinários 
ordinários , 
, há 
há uma 
uma linha 
linha que 
que separa 
separa o 
o interior 
interior do 
do objeto 
objeto do 
do lado 
lado de 
de fora 
fora deste 
deste . 
. Dentre 
Dentre as 
as características 
características que 
que definem 
definem objetos 
objetos ordinários 
ordinários estão 
estão incluídas 
incluídas textura 
textura , 
, cor 
cor , 
, cheiro 
cheiro , 
, som 
som , 
, ou 
ou custo 
custo . 
. Uma 
Uma criança 
criança no 
no início 
início de 
de sua 
sua vida 
vida é 
é capaz 
capaz de 
de distinguir 
distinguir objetos 
objetos que 
que estão 
estão ao 
ao seu 
seu redor 
redor . 
. Isto 
Isto inclui 
inclui seus 
seus pais 
pais e 
e as 
as pessoas 
pessoas que 
que tomam 
tomam conta 
conta dela 
dela e 
e os 
os objetos 
objetos próximos 
próximos ou 
ou sobre 
sobre seu 
seu berço 
berço . 
. Isto 
Isto quer 
quer dizer 
dizer que 
que os 
os seres 
seres humanos 
humanos são 
são criaturas 
criaturas orientadas 
orientadas por 
por objetos 
objetos . 
. À 
À medida 
medida que 
que nós 
nós envelhecemos 
envelhecemos nós 
nós aprendemos 
aprendemos também 
também a 
a caracterizar 
caracterizar objetos 
objetos baseando 
baseando no 
no seu 
seu aspecto 
aspecto e 
e comportamento 
comportamento . 
. Nossa 
Nossa orientação 
orientação por 
por objetos 
objetos é 
é fortalecida 
fortalecida pela 
pela a 
a observação 
observação do 
do mundo 
mundo a 
a nossa 
nossa volta 
volta e 
e , 
, mais 
mais tarde 
tarde , 
, por 
por um 
um processo 
processo formal 
formal de 
de educação 
educação . 
. Por 
Por exemplo 
exemplo , 
, em 
em Química 
Química nós 
nós aprendemos 
aprendemos , 
, a 
a compreender 
compreender um 
um átomo 
átomo em 
em particular 
particular baseados 
baseados em 
em sua 
sua classificação 
classificação numa 
numa Tabela 
Tabela Periódica 
Periódica de 
de Elementos 
Elementos . 
. Em 
Em Biologia 
Biologia , 
, nós 
nós aprendemos 
aprendemos , 
, a 
a classificar 
classificar as 
as várias 
várias espécies 
espécies de 
de organismos 
organismos vivosbaseados 
vivosbaseados em 
em uma 
uma elaborada 
elaborada classificação 
classificação hierárquica 
hierárquica de 
de espécies 
espécies . 
. Quando 
Quando jovens 
jovens , 
, nós 
nós observamos 
observamos os 
os objetos 
objetos a 
a nossa 
nossa volta 
volta , 
, nós 
nós freqüentemente 
freqüentemente distinguimos 
distinguimos ou 
ou classificamos 
classificamos objetos 
objetos por 
por suas 
suas semelhanças 
semelhanças e 
e diferenças 
diferenças de 
de aspecto 
aspecto e 
e comportamento 
comportamento . 
. Mas 
Mas , 
, surpreendentemente 
surpreendentemente , 
, nós 
nós rapidamente 
rapidamente aprendemos 
aprendemos a 
a classificar 
classificar tipos 
tipos similares 
similares de 
de objetos 
objetos como 
como um 
um carro 
carro independente 
independente de 
de seu 
seu aspecto 
aspecto , 
, tamanho 
tamanho , 
, cor 
cor ou 
ou textura 
textura precisos 
precisos . 
. Uma 
Uma criança 
criança pode 
pode naturalmente 
naturalmente reconhecer 
reconhecer um 
um desenho 
desenho mal 
mal feito 
feito de 
de um 
um carro 
carro no 
no livro 
livro , 
, um 
um carrinho 
carrinho de 
de brinquedo 
brinquedo do 
do tamanho 
tamanho de 
de uma 
uma caixinha 
caixinha de 
de fósforos 
fósforos , 
, e 
e um 
um carro 
carro real 
real bem 
bem como 
como sendo 
sendo diferentes 
diferentes exemplos 
exemplos , 
, encarnações 
encarnações , 
, ou 
ou “ 
“ instâncias 
instâncias ” 
” da 
da classificação 
classificação CARRO 
CARRO . 
. Muitas 
Muitas crianças 
crianças podem 
podem distinguir 
distinguir mais 
mais tarde 
tarde um 
um carro 
carro de 
de um 
um caminhão 
caminhão baseando- 
baseando- se 
se não 
não apenas 
apenas em 
em sua 
sua forma 
forma precisa 
precisa , 
, tamanho 
tamanho , 
, cor 
cor , 
, ou 
ou outro 
outro dado 
dado `` 
`` significativo 
significativo '' 
'' de 
de um 
um caminhão 
caminhão , 
, mas 
mas ao 
ao invés 
invés , 
, baseando-se 
baseando-se em 
em algumas 
algumas das 
das propriedades 
propriedades visuais 
visuais abstratas 
abstratas de 
de carros 
carros e 
e caminhões 
caminhões . 
. Parece 
Parece uma 
uma característica 
característica dos 
dos seres 
seres humanos 
humanos a 
a habilidade 
habilidade natural 
natural de 
de classificar 
classificar objetos.Nós 
objetos.Nós chamaremos 
chamaremos estas 
estas classificações 
classificações de 
de classes 
classes . 
. A 
A palavrainstância 
palavrainstância será 
será usada 
usada para 
para significar 
significar um 
um membro 
membro particular 
particular de 
de uma 
uma classe 
classe . 
. Por 
Por exemplo 
exemplo , 
, um 
um carro 
carro vermelho 
vermelho do 
do tamanho 
tamanho de 
de uma 
uma caixa 
caixa de 
de fósforo 
fósforo que 
que seja 
seja o 
o brinquedo 
brinquedo favorito 
favorito de 
de uma 
uma criança 
criança é 
é uma 
uma instância 
instância da 
da classe 
classe CARRO 
CARRO ( 
( serão 
serão usadas 
usadas letras 
letras maiúsculas 
maiúsculas para 
para classes 
classes ) 
) da 
da mesma 
mesma maneira 
maneira que 
que o 
o esboço 
esboço mal 
mal feito 
feito de 
de um 
um carro 
carro no 
no livro 
livro de 
de uma 
uma criança 
criança ou 
ou o 
o automóvel 
automóvel real 
real na 
na garagem 
garagem são 
são outras 
outras instâncias 
instâncias de 
de CARRO 
CARRO . 
. Muitas 
Muitas crianças 
crianças desenvolvem 
desenvolvem um 
um nível 
nível alto 
alto de 
de entusiasmo 
entusiasmo para 
para carros 
carros de 
de brinquedo 
brinquedo , 
, caminhões 
caminhões , 
, aviões 
aviões , 
, barcos 
barcos , 
, e 
e trens 
trens . 
. Esta 
Esta fascinação 
fascinação parece 
parece estar 
estar baseada 
baseada na 
na habilidade 
habilidade comum 
comum de 
de todos 
todos estes 
estes objetos 
objetos moverem-se 
moverem-se de 
de um 
um local 
local a 
a outro 
outro e 
e , 
, a 
a mais 
mais importante 
importante , 
, a 
a habilidade 
habilidade que 
que a 
a criança 
criança tem 
tem de 
de controlar 
controlar este 
este movimento 
movimento . 
. Cedo 
Cedo , 
, as 
as crianças 
crianças são 
são hábeis 
hábeis em 
em obter 
obter uma 
uma entendimento 
entendimento abstrato 
abstrato de 
de um 
um VEÍCULO 
VEÍCULO . 
. # 
# pg013 
pg013 # 
# nt050 
nt050 # 
# cm00 
cm00 # 
# Esta 
Esta abstração 
abstração representa 
representa os 
os traços 
traços comuns 
comuns a 
a todos 
todos os 
os veículos 
veículos incluindo 
incluindo carros 
carros , 
, caminhões 
caminhões , 
, aviões 
aviões , 
, barcos 
barcos e 
e trens 
trens ( 
( e 
e outros 
outros tipos 
tipos de 
de veículos 
veículos conhecidos 
conhecidos mais 
mais tarde 
tarde , 
, no 
no momento 
momento em 
em que 
que sua 
sua experiência 
experiência de 
de vida 
vida e 
e poder 
poder aquisitivo 
aquisitivo aumentam 
aumentam ) 
) . 
. Uma 
Uma criança 
criança parece 
parece apta 
apta para 
para fazer 
fazer esta 
esta generalização 
generalização antes 
antes de 
de aprender 
aprender a 
a palavra 
palavra “ 
“ veículo 
veículo ” 
” . 
. Como 
Como humanos 
humanos parecemos 
parecemos ser 
ser capazes 
capazes de 
de desempenhar 
desempenhar essa 
essa tais 
tais generalizações 
generalizações de 
de maneira 
maneira natural 
natural . 
. Esta 
Esta abordagem 
abordagem de 
de classificação 
classificação serve 
serve como 
como base 
base para 
para uma 
uma abordagem 
abordagem “ 
“ orienta 
orienta por 
por objetos 
objetos ” 
” para 
para solução 
solução de 
de problemas 
problemas . 
. A 
A classe 
classe VEÍCULO 
VEÍCULO , 
, seja 
seja formalmente 
formalmente definida 
definida ou 
ou entendida 
entendida informalmente 
informalmente , 
, é 
é considerada 
considerada como 
como sendo 
sendo umaclasse 
umaclasse abstrataem 
abstrataem contraste 
contraste com 
com umaclasse 
umaclasse concreta 
concreta , 
, tal 
tal como 
como CARRO 
CARRO , 
, CAMINHÃO 
CAMINHÃO , 
, AVIÃO 
AVIÃO , 
, BARCO 
BARCO , 
, E 
E TREM 
TREM . 
. Raramente 
Raramente uma 
uma criança 
criança pede 
pede para 
para seu 
seu pai 
pai : 
: “ 
“ Por 
Por favor 
favor , 
, traga-me 
traga-me o 
o veículo 
veículo vermelho 
vermelho do 
do meu 
meu quarto 
quarto ” 
” . 
. Uma 
Uma classe 
classe abstrata 
abstrata ( 
( como 
como veículo 
veículo ) 
) é 
é aquela 
aquela que 
que não 
não possui 
possui instâncias 
instâncias de 
de verdade 
verdade , 
, mas 
mas pode 
pode ser 
ser usada 
usada para 
para produzir 
produzir instâncias 
instâncias de 
de classes 
classes concretas 
concretas ( 
( como 
como CARRO 
CARRO , 
, CAMINHÃO 
CAMINHÃO , 
, AVIÃO 
AVIÃO , 
, BARCO 
BARCO , 
, ou 
ou TREM 
TREM ) 
) . 
. Ela 
Ela é 
é uma 
uma generalização 
generalização de 
de uma 
uma classe 
classe concreta 
concreta . 
. A 
A abstração 
abstração da 
da classe 
classe VEÍCULO 
VEÍCULO contêm 
contêm características 
características comuns 
comuns de 
de CARRO 
CARRO , 
, CAMINHÃO 
CAMINHÃO , 
, AVIÃO 
AVIÃO , 
, BARCO 
BARCO e 
e TREM 
TREM , 
, formando 
formando a 
a base 
base para 
para a 
a noção 
noção deherança 
deherança . 
. A 
A classe 
classe concreta 
concreta adquire 
adquire ( 
( herda 
herda ) 
) características 
características de 
de sua 
sua classe 
classe pai 
pai ( 
( a 
a classe 
classe abstrata 
abstrata ) 
) . 
. Cada 
Cada característica 
característica herdada 
herdada da 
da classe 
classe abstrata 
abstrata é 
é achada 
achada em 
em instâncias 
instâncias na 
na classe 
classe concreta 
concreta . 
. Em 
Em nossa 
nossa percepção 
percepção dos 
dos objetos 
objetos ordinários 
ordinários , 
, é 
é difícil 
difícil ou 
ou quase 
quase impossível 
impossível , 
, definir 
definir precisamente 
precisamente as 
as características 
características de 
de cada 
cada classe 
classe concreta 
concreta . 
. Nós 
Nós podemos 
podemos rapidamente 
rapidamente desenvolver 
desenvolver a 
a habilidade 
habilidade de 
de identificar 
identificar um 
um carro 
carro com 
com exatidão 
exatidão . 
. Nós 
Nós podemos 
podemos nunca 
nunca desenvolver 
desenvolver a 
a habilidade 
habilidade de 
de definir 
definir a 
a classe 
classe CARRO 
CARRO com 
com precisão 
precisão . 
. Nossas 
Nossas habilidades 
habilidades de 
de reconhecimento 
reconhecimento de 
de padrões 
padrões são 
são baseadas 
baseadas em 
em fenômenos 
fenômenos complexos 
complexos que 
que não 
não podem 
podem ser 
ser modelados 
modelados facilmente 
facilmente . 
. Quando 
Quando nós 
nós “ 
“ modelamos 
modelamos ” 
” uma 
uma classe 
classe CARRO 
CARRO , 
, nós 
nós tentamos 
tentamos extrair 
extrair características 
características essenciais 
essenciais , 
, ignorando 
ignorando os 
os detalhes 
detalhes não 
não essenciais 
essenciais . 
. Entretanto 
Entretanto , 
, é 
é confortante 
confortante saber 
saber que 
que embora 
embora não 
não possamos 
possamos modelar 
modelar um 
um carro 
carro com 
com precisão 
precisão , 
, podemos 
podemos ao 
ao menos 
menos guiá- 
guiá- lo 
lo . 
. 2.1.2 
2.1.2 Objetos 
Objetos como 
como abstração 
abstração Quando 
Quando começamos 
começamos a 
a pensar 
pensar , 
, escrever 
escrever ou 
ou falar 
falar sobre 
sobre carros 
carros , 
, nós 
nós desenvolvemos 
desenvolvemos uma 
uma abstração 
abstração desta 
desta entidade 
entidade . 
. Esta 
Esta não 
não é 
é uma 
uma atividade 
atividade que 
que vem 
vem facilmente 
facilmente ou 
ou cedo 
cedo na 
na vida 
vida . 
. Tanto 
Tanto artistas 
artistas quanto 
quanto engenheiros 
engenheiros precisam 
precisam desenvolver 
desenvolver tal 
tal abstração 
abstração quando 
quando tentam 
tentam representar 
representar um 
um carro 
carro . 
. Cada 
Cada um 
um fará 
fará isto 
isto de 
de maneira 
maneira diferente 
diferente . 
. O 
O artista 
artista irá 
irá enfatizar 
enfatizar o 
o contorno 
contorno , 
, a 
a textura 
textura e 
e a 
a cor 
cor ao 
ao passo 
passo que 
que o 
o engenheiro 
engenheiro irá 
irá enfatizar 
enfatizar o 
o formato 
formato e 
e o 
o comportamento 
comportamento do 
do carro 
carro . 
. O 
O engenheiro 
engenheiro , 
, em 
em particular 
particular , 
, se 
se preocupa 
preocupa com 
com a 
a relação 
relação entre 
entre formato 
formato e 
e comportamento 
comportamento . 
. O 
O modelo 
modelo abstrato 
abstrato de 
de um 
um carro 
carro desenvolvido 
desenvolvido por 
por um 
um engenheiro 
engenheiro deve 
deve unificar 
unificar formato 
formato e 
e comportamento 
comportamento . 
. Esta 
Esta unificação 
unificação é 
é chamada 
chamada deencapsulamento 
deencapsulamento . 
. # 
# pg014 
pg014 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Os 
Os aspectos 
aspectos referentes 
referentes à 
à forma 
forma , 
, textura 
textura e 
e cor 
cor devem 
devem ser 
ser considerados 
considerados como 
como os 
os “ 
“ dados 
dados ” 
” do 
do carro 
carro . 
. Além 
Além desses 
desses “ 
“ dados 
dados ” 
” , 
, o 
o engenheiro 
engenheiro se 
se preocupa 
preocupa com 
com questões 
questões como 
como a 
a capacidade 
capacidade de 
de fazer 
fazer curvas 
curvas do 
do carro 
carro , 
, sua 
sua capacidade 
capacidade de 
de frear 
frear , 
, sua 
sua aceleração 
aceleração , 
, etc 
etc . 
. Estes 
Estes fenômenos 
fenômenos envolvem 
envolvem a 
a reação 
reação do 
do veículo 
veículo a 
a vários 
vários estímulos 
estímulos ( 
( por 
por exemplo 
exemplo , 
, pisar 
pisar no 
no pedal 
pedal do 
do acelerador 
acelerador , 
, pisar 
pisar no 
no pedal 
pedal do 
do freio 
freio , 
, virar 
virar o 
o volante 
volante , 
, etc. 
etc. ) 
) . 
. O 
O comportamento 
comportamento de 
de um 
um carro 
carro é 
é fortemente 
fortemente influenciado 
influenciado por 
por esses 
esses “ 
“ dados 
dados ” 
” . 
. Um 
Um carro 
carro grande 
grande e 
e pesado 
pesado geralmente 
geralmente requer 
requer muito 
muito mais 
mais potência 
potência para 
para ter 
ter uma 
uma determinada 
determinada capacidade 
capacidade de 
de aceleração 
aceleração que 
que um 
um carro 
carro pequeno 
pequeno e 
e leve 
leve . 
. Ele 
Ele é 
é geralmente 
geralmente menos 
menos manobrável 
manobrável que 
que um 
um carro 
carro leve 
leve . 
. Para 
Para entender 
entender as 
as características 
características de 
de aceleração 
aceleração de 
de um 
um carro 
carro , 
, os 
os únicos 
únicos “ 
“ dados 
dados ” 
” ( 
( daqui 
daqui em 
em diante 
diante chamados 
chamados deatributos 
deatributos ) 
) que 
que podem 
podem ser 
ser relevantes 
relevantes são 
são a 
a massa 
massa do 
do carro 
carro , 
, torque 
torque , 
, fricção 
fricção dos 
dos pneus 
pneus e 
e coeficiente 
coeficiente aerodinâmico 
aerodinâmico . 
. Essas 
Essas variáveis 
variáveis constituem 
constituem o 
o estado 
estado interno 
interno ou 
ou atributos 
atributos da 
da classe 
classe CARRO 
CARRO . 
. Outros 
Outros atributos 
atributos como 
como sua 
sua cor 
cor , 
, marca 
marca ou 
ou preço 
preço são 
são irrelevantes 
irrelevantes . 
. Aspectos 
Aspectos como 
como a 
a velocidade 
velocidade do 
do carro 
carro podem 
podem ser 
ser calculados 
calculados através 
através do 
do conhecimento 
conhecimento desses 
desses atributos 
atributos . 
. Se 
Se alguém 
alguém está 
está desenvolvendo 
desenvolvendo uma 
uma abstração 
abstração onde 
onde o 
o carro 
carro é 
é um 
um produto 
produto comercial 
comercial , 
, então 
então os 
os atributos 
atributos que 
que nós 
nós devemos 
devemos usar 
usar para 
para representar 
representar o 
o estado 
estado interno 
interno do 
do carro 
carro incluem 
incluem o 
o valor 
valor de 
de empréstimo 
empréstimo , 
, a 
a taxa 
taxa de 
de juros 
juros do 
do empréstimo 
empréstimo , 
, o 
o número 
número de 
de meses 
meses do 
do empréstimo 
empréstimo , 
, o 
o número 
número de 
de pagamentos 
pagamentos já 
já feitos 
feitos , 
, e 
e o 
o preço 
preço de 
de tabela 
tabela do 
do carro 
carro . 
. Por 
Por esses 
esses atributos 
atributos , 
, o 
o “ 
“ comportamento 
comportamento ” 
” do 
do carro 
carro como 
como produto 
produto comercial 
comercial pode 
pode ser 
ser totalmente 
totalmente descrito 
descrito . 
. A 
A modelagem 
modelagem de 
de objetos 
objetos é 
é similar 
similar à 
à modelagem 
modelagem de 
de quaisquer 
quaisquer entidades 
entidades da 
da ciência 
ciência . 
. O 
O nível 
nível de 
de detalhes 
detalhes definidos 
definidos no 
no modelo 
modelo depende 
depende das 
das metas 
metas do 
do problema 
problema . 
. Se 
Se é 
é desejado 
desejado estudar 
estudar as 
as propriedades 
propriedades termodinâmicas 
termodinâmicas da 
da combustão 
combustão de 
de 4 
4 tempos 
tempos , 
, associada 
associada a 
a um 
um motor 
motor de 
de combustão 
combustão interna 
interna , 
, então 
então um 
um modelo 
modelo que 
que inclui 
inclui os 
os mínimos 
mínimos detalhes 
detalhes é 
é apropriado 
apropriado . 
. Isso 
Isso incluiria 
incluiria informações 
informações sobre 
sobre a 
a geometria 
geometria de 
de cada 
cada cilindro 
cilindro e 
e a 
a geometria 
geometria de 
de cada 
cada pistão 
pistão . 
. Portanto 
Portanto , 
, a 
a descrição 
descrição de 
de um 
um objeto 
objeto , 
, a 
a abstração 
abstração do 
do objeto 
objeto , 
, é 
é baseada 
baseada no 
no problema 
problema onde 
onde o 
o objeto 
objeto existe 
existe . 
. Aspectos 
Aspectos do 
do objeto 
objeto que 
que exercem 
exercem um 
um papel 
papel essencial 
essencial na 
na descoberta 
descoberta de 
de uma 
uma solução 
solução para 
para o 
o problema 
problema dado 
dado devem 
devem ser 
ser representados 
representados no 
no modelo 
modelo de 
de objeto 
objeto ( 
( a 
a classe 
classe ) 
) e 
e os 
os aspectos 
aspectos que 
que não 
não são 
são essenciais 
essenciais são 
são ignorados 
ignorados . 
. Uma 
Uma abstração 
abstração representa 
representa uma 
uma descrição 
descrição simplificada 
simplificada da 
da realidade 
realidade . 
. ODicionário 
ODicionário Oxford 
Oxford ( 
( 1966 
1966 ) 
) sugere 
sugere o 
o seguinte 
seguinte sobre 
sobre abstrações 
abstrações : 
: “ 
“ O 
O princípio 
princípio de 
de ignorar 
ignorar aqueles 
aqueles aspectos 
aspectos de 
de um 
um assunto 
assunto que 
que não 
não são 
são relevantes 
relevantes para 
para o 
o problema 
problema a 
a fim 
fim de 
de se 
se concentrar 
concentrar mais 
mais naqueles 
naqueles que 
que são. 
são. ” 
” # 
# pg015 
pg015 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# 2.2 
2.2 O 
O modelo 
modelo de 
de objetos 
objetos Coad 
Coad e 
e Yourdon 
Yourdon [ 
[ 1 
1 ] 
] definem 
definem um 
um objeto 
objeto como 
como “ 
“ uma 
uma abstração 
abstração de 
de algo 
algo no 
no contexto 
contexto de 
de um 
um problema 
problema , 
, refletindo 
refletindo a 
a capacidade 
capacidade do 
do sistema 
sistema em 
em manter 
manter informações 
informações sobre 
sobre ele 
ele ou 
ou interagir 
interagir com 
com ele 
ele ; 
; um 
um encapsulamento 
encapsulamento de 
de valores 
valores característicos 
característicos e 
e seus 
seus serviços 
serviços exclusivos 
exclusivos ” 
” . 
. Visto 
Visto que 
que o 
o “ 
“ contexto 
contexto de 
de um 
um problema 
problema ” 
” pode 
pode se 
se referir 
referir a 
a quase 
quase qualquer 
qualquer coisa 
coisa , 
, os 
os conceitos 
conceitos chave 
chave na 
na definição 
definição dada 
dada acima 
acima , 
, são 
são abstrações 
abstrações , 
, informações 
informações , 
, “ 
“ interação 
interação com 
com ” 
” , 
, valores 
valores e 
e serviços 
serviços exclusivos 
exclusivos . 
. Abstração 
Abstração , 
, como 
como mencionado 
mencionado acima 
acima , 
, envolve 
envolve uma 
uma separação 
separação das 
das características 
características essenciais 
essenciais das 
das não 
não essenciais 
essenciais . 
. Na 
Na definição 
definição de 
de abstração 
abstração , 
, as 
as características 
características essenciais 
essenciais ( 
( e 
e consequentemente 
consequentemente as 
as características 
características não 
não essências 
essências ) 
) são 
são relativas 
relativas ao 
ao problema 
problema que 
que está 
está sendo 
sendo resolvido 
resolvido . 
. Isto 
Isto foi 
foi ilustrado 
ilustrado na 
na seção 
seção 2.1.2 
2.1.2 com 
com dois 
dois modelos 
modelos de 
de carro 
carro , 
, um 
um modelo 
modelo físico 
físico e 
e um 
um modelo 
modelo de 
de comércio 
comércio . 
. O 
O conceito 
conceito deinformação 
deinformação e 
e atributos 
atributos da 
da definição 
definição de 
de objetos 
objetos acima 
acima , 
, implica 
implica em 
em armazenamento 
armazenamento de 
de dados 
dados . 
. Cada 
Cada atributo 
atributo representa 
representa um 
um componente 
componente distinto 
distinto do 
do modelo 
modelo geral 
geral de 
de armazenamento 
armazenamento de 
de dados 
dados . 
. Isto 
Isto foi 
foi ilustrado 
ilustrado na 
na seção 
seção 2.1.2 
2.1.2 com 
com as 
as características 
características de 
de um 
um carro 
carro como 
como massa 
massa , 
, aderência 
aderência dos 
dos pneus 
pneus , 
, torque 
torque e 
e coeficiente 
coeficiente de 
de aerodinâmica 
aerodinâmica . 
. As 
As consultas 
consultas na 
na seção 
seção externa 
externa da 
da classe 
classe ( 
( a 
a parte 
parte da 
da classe 
classe que 
que é 
é publicamente 
publicamente disponível 
disponível ) 
) permitem 
permitem que 
que os 
os valores 
valores de 
de alguns 
alguns atributos 
atributos sejam 
sejam obtidos 
obtidos . 
. O 
O conceito 
conceito de 
de “ 
“ interação 
interação com 
com ” 
” e 
e “ 
“ serviços 
serviços exclusivos 
exclusivos ” 
” na 
na definição 
definição acima 
acima sugere 
sugere ação 
ação e 
e comportamento 
comportamento . 
. Os 
Os serviços 
serviços associados 
associados com 
com um 
um objeto 
objeto descrevem 
descrevem o 
o que 
que pode 
pode ser 
ser feito 
feito com 
com o 
o objeto 
objeto ou 
ou para 
para o 
o objeto 
objeto . 
. Este 
Este é 
é ocomportamento 
ocomportamento do 
do objeto 
objeto . 
. Os 
Os comandos 
comandos na 
na seção 
seção externa 
externa da 
da classe 
classe detalham 
detalham precisamente 
precisamente quais 
quais serviços 
serviços são 
são acessíveis 
acessíveis para 
para os 
os objetos 
objetos da 
da classe 
classe . 
. O 
O modelo 
modelo de 
de objetos 
objetos envolve 
envolve dois 
dois componentes 
componentes principais 
principais : 
: um 
um modelo 
modelo de 
de dados 
dados e 
e um 
um modelo 
modelo de 
de comportamento 
comportamento . 
. Estes 
Estes modelos 
modelos estão 
estão contidos 
contidos na 
na descrição 
descrição do 
do objeto 
objeto na 
na classe 
classe . 
. O 
O modelo 
modelo de 
de dados 
dados fornece 
fornece uma 
uma especificação 
especificação precisa 
precisa do 
do tipo 
tipo de 
de informação 
informação que 
que é 
é armazenada 
armazenada em 
em cada 
cada objeto 
objeto enquanto 
enquanto que 
que o 
o modelo 
modelo de 
de comportamento 
comportamento fornece 
fornece uma 
uma especificação 
especificação precisa 
precisa dos 
dos serviços 
serviços que 
que podem 
podem ser 
ser executados 
executados no 
no objeto 
objeto ou 
ou pelo 
pelo objeto 
objeto . 
. Somente 
Somente os 
os serviços 
serviços descritos 
descritos no 
no modelo 
modelo de 
de comportamento 
comportamento podem 
podem ser 
ser executados 
executados pelo 
pelo objeto 
objeto . 
. Se 
Se funções 
funções adicionais 
adicionais forem 
forem necessárias 
necessárias elas 
elas deverão 
deverão ser 
ser acrescentadas 
acrescentadas no 
no modelo 
modelo de 
de comportamento 
comportamento da 
da classe 
classe que 
que define 
define o 
o objeto 
objeto em 
em questão 
questão . 
. 2.2.1 
2.2.1 Um 
Um exemplo 
exemplo de 
de modelo 
modelo de 
de objeto 
objeto Vamos 
Vamos considerar 
considerar um 
um exemplo 
exemplo simples 
simples para 
para ilustrar 
ilustrar um 
um modelo 
modelo de 
de objeto 
objeto . 
. Suponha 
Suponha que 
que desejamos 
desejamos construir 
construir um 
um modelo 
modelo de 
de objeto 
objeto para 
para um 
um contador 
contador ( 
( um 
um objeto 
objeto que 
que serve 
serve para 
para contar 
contar coisas 
coisas ) 
) . 
. Este 
Este contador 
contador pode 
pode ser 
ser usado 
usado para 
para registrar 
registrar o 
o número 
número de 
de vezes 
vezes que 
que um 
um “ 
“ evento 
evento de 
de contagem 
contagem ” 
” ocorreu 
ocorreu . 
. Exemplos 
Exemplos de 
de contagem 
contagem podem 
podem incluir 
incluir a 
a contagem 
contagem de 
de veículos 
veículos que 
que chegam 
chegam numa 
numa esquina 
esquina numa 
numa simulação 
simulação de 
de tráfego 
tráfego ou 
ou a 
a contagem 
contagem do 
do número 
número de 
de aviões 
aviões que 
que aterrizam 
aterrizam numa 
numa pista 
pista de 
de pouso 
pouso em 
em um 
um determinado 
determinado período 
período de 
de tempo 
tempo . 
. # 
# pg016 
pg016 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# Construiremos 
Construiremos uma 
uma classe 
classe de 
de nome 
nome CONTADOR 
CONTADOR para 
para ilustrar 
ilustrar o 
o modelo 
modelo de 
de objeto 
objeto . 
. O 
O estado 
estado do 
do objeto 
objeto CONTADOR 
CONTADOR , 
, uma 
uma instância 
instância da 
da classe 
classe CONTADOR 
CONTADOR , 
, é 
é totalmente 
totalmente descrito 
descrito por 
por uma 
uma consulta 
consulta . 
. O 
O valor 
valor da 
da consulta 
consulta , 
, resultado 
resultado , 
, retém 
retém o 
o valor 
valor total 
total das 
das vezes 
vezes que 
que o 
o objeto 
objeto citado 
citado incrementou 
incrementou sua 
sua conta 
conta . 
. Esta 
Esta consulta 
consulta especifica 
especifica a 
a informação 
informação contida 
contida no 
no próprio 
próprio objeto 
objeto CONTADOR 
CONTADOR de 
de maneira 
maneira única 
única e 
e completa 
completa . 
. Os 
Os comandos 
comandos ( 
( serviços 
serviços que 
que podem 
podem ser 
ser executados 
executados pelo 
pelo ou 
ou no 
no objeto 
objeto ) 
) incluem 
incluem : 
: • 
• criar 
criar – 
– construir 
construir um 
um novo 
novo objeto 
objeto com 
com valor 
valor inicial 
inicial igual 
igual a 
a zero 
zero • 
• incrementar– 
incrementar– adicionar 
adicionar o 
o valor 
valor 1 
1 ao 
ao estado 
estado atual 
atual do 
do contador 
contador • 
• zerar– 
zerar– muda 
muda o 
o valor 
valor atual 
atual para 
para zero 
zero A 
A figura 
figura 2.1 
2.1 mostra 
mostra uma 
uma descrição 
descrição gráfica 
gráfica da 
da classe 
classe CONTADOR 
CONTADOR . 
. Descrição 
Descrição Gráfica 
Gráfica da 
da Classe 
Classe CONTADOR 
CONTADOR Esta 
Esta notação 
notação na 
na qual 
qual uma 
uma classe 
classe é 
é envolvida 
envolvida por 
por uma 
uma nuvem 
nuvem pontilhada 
pontilhada foi 
foi criada 
criada por 
por Grady 
Grady Booch 
Booch [ 
[ 2 
2 ] 
] e 
e é 
é chamada 
chamada de 
de “ 
“ nuvem 
nuvem de 
de Booch 
Booch ” 
” ou 
ou apenas 
apenas diagrama 
diagrama de 
de classe 
classe . 
. O 
O nome 
nome da 
da classe 
classe fica 
fica escrito 
escrito acima 
acima da 
da linha 
linha horizontal 
horizontal . 
. Abaixo 
Abaixo dela 
dela estão 
estão os 
os comandos 
comandos e 
e as 
as consultas 
consultas . 
. O 
O par 
par de 
de parênteses 
parênteses vazios 
vazios perto 
perto de 
de cada 
cada comando 
comando indica 
indica que 
que estes 
estes comandos 
comandos requerem 
requerem a 
a entrada 
entrada de 
de uma 
uma informação 
informação externa 
externa . 
. 2.2.2 
2.2.2 A 
A metáfora 
metáfora do 
do nome-verbo 
nome-verbo e 
e nome- 
nome- substantivo 
substantivo Introduziremos 
Introduziremos uma 
uma notação 
notação para 
para representar 
representar as 
as ações 
ações que 
que nós 
nós podemos 
podemos executar 
executar em 
em um 
um objeto 
objeto . 
. Continuaremos 
Continuaremos com 
com o 
o exemplo 
exemplo da 
da classe 
classe CONTADOR 
CONTADOR , 
, apresentado 
apresentado na 
na última 
última seção 
seção . 
. As 
As quatro 
quatro coisas 
coisas que 
que nós 
nós podemos 
podemos fazer 
fazer com 
com este 
este objeto 
objeto são 
são : 
: criar 
criar um 
um , 
, aumentar 
aumentar o 
o seu 
seu valor 
valor em 
em um 
um , 
, acessar 
acessar o 
o seuresultadoatual 
seuresultadoatual e 
e retornar 
retornar o 
o seu 
seu valor 
valor para 
para 0 
0 . 
. Estas 
Estas são 
são as 
as responsabilidadesdo 
responsabilidadesdo objeto 
objeto CONTADOR 
CONTADOR . 
. # 
# pg017 
pg017 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# Suponha 
Suponha que 
que deixemos 
deixemos a 
a entidadecontador_de_carrosrepresentar 
entidadecontador_de_carrosrepresentar um 
um objeto 
objeto contador 
contador que 
que é 
é usado 
usado em 
em um 
um programa 
programa de 
de simulação 
simulação de 
de tráfego 
tráfego para 
para manter 
manter o 
o controle 
controle do 
do número 
número de 
de veículos 
veículos que 
que chegam 
chegam a 
a um 
um posto 
posto de 
de pedágio 
pedágio de 
de uma 
uma ponte 
ponte . 
. Os 
Os comandos 
comandos e 
e a 
a consulta 
consulta que 
que podemos 
podemos efetuar 
efetuar em 
em tal 
tal objeto 
objeto são 
são : 
: Comandos 
Comandos : 
: contador_de_carros.criar 
contador_de_carros.criar contador_de_carros.incrementar 
contador_de_carros.incrementar contador_de_carros.zerar 
contador_de_carros.zerar Consulta 
Consulta : 
: contador_de_carros.resultado 
contador_de_carros.resultado Em 
Em cada 
cada uma 
uma dessas 
dessas ações 
ações , 
, o 
o objeto 
objeto recebendo 
recebendo a 
a ação 
ação está 
está conectado 
conectado à 
à operação 
operação no 
no objeto 
objeto por 
por um 
um conector 
conector ponto 
ponto ( 
( “ 
“ . 
. ” 
” ) 
) . 
. Seria 
Seria razoável 
razoável dizer 
dizer que 
que a 
a notação 
notação acima 
acima sugere 
sugere que 
que estamos 
estamos realizando 
realizando ações 
ações em 
em um 
um objeto 
objeto particular 
particular para 
para os 
os comandos 
comandos ou 
ou obtendo 
obtendo informação 
informação do 
do objeto 
objeto para 
para a 
a consulta 
consulta .. 
.. Para 
Para os 
os comandos 
comandos , 
, o 
o objeto 
objeto é 
é um 
um substantivo 
substantivo e 
e a 
a ação 
ação é 
é um 
um verbo 
verbo . 
. Para 
Para a 
a consulta 
consulta tanto 
tanto a 
a objeto 
objeto e 
e a 
a consulta 
consulta são 
são substantivos 
substantivos . 
. 2.2.3 
2.2.3 Estado 
Estado Interno 
Interno Suponhamos 
Suponhamos que 
que haja 
haja três 
três objetos 
objetos CONTADOR 
CONTADOR no 
no nosso 
nosso programa 
programa simulador 
simulador de 
de tráfego 
tráfego : 
: contador_de_carros 
contador_de_carros , 
, contador_de_caminhoes 
contador_de_caminhoes , 
, e 
e contador_de_onibus3 
contador_de_onibus3 . 
. À 
À medida 
medida que 
que veículos 
veículos chegam 
chegam ao 
ao posto 
posto de 
de pedágio 
pedágio da 
da ponte 
ponte , 
, suponha 
suponha que 
que a 
a seguinte 
seguinte seqüência 
seqüência de 
de ações 
ações acontece 
acontece : 
: contador_de_carros.zerar 
contador_de_carros.zerar contador_de_caminhoes.zerar 
contador_de_caminhoes.zerar contador_de_onibus.zerar 
contador_de_onibus.zerar contador_de_carros.incrementar 
contador_de_carros.incrementar contador_de_carros.incrementar 
contador_de_carros.incrementar contador_de_onibus.incrementar 
contador_de_onibus.incrementar contador_de_carros.incrementar 
contador_de_carros.incrementar contador_de_caminhoes.incrementar 
contador_de_caminhoes.incrementar contador_de_carros.incrementar 
contador_de_carros.incrementar contador_de_caminhoes.incrementar 
contador_de_caminhoes.incrementar As 
As três 
três primeiras 
primeiras ações 
ações iniciam 
iniciam os 
os três 
três contadores 
contadores em 
em 0 
0 . 
. Depois 
Depois que 
que as 
as sete 
sete ações 
ações restantes 
restantes são 
são efetuadas 
efetuadas , 
, os 
os objetos 
objetos têm 
têm o 
o seguinte 
seguinte estado 
estado interno 
interno : 
: contador_de_carros 
contador_de_carros ( 
( 4 
4 ) 
) , 
, contador_de_caminhoes 
contador_de_caminhoes ( 
( 2 
2 ) 
) , 
, contador_de_onibus 
contador_de_onibus ( 
( 3 
3 ) 
) . 
. Os 
Os estados 
estados internos 
internos dos 
dos objetos 
objetos são 
são diferentes 
diferentes uns 
uns dos 
dos outros 
outros por 
por causa 
causa das 
das diferentes 
diferentes açõesincrementarefetuadas 
açõesincrementarefetuadas em 
em cada 
cada um 
um . 
. # 
# pg018 
pg018 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# O 
O ponto 
ponto principal 
principal é 
é que 
que , 
, embora 
embora existam 
existam três 
três objetos 
objetos CONTADOR 
CONTADOR distintos 
distintos , 
, cada 
cada um 
um caracterizado 
caracterizado pelo 
pelo mesmo 
mesmo modelo 
modelo de 
de objeto 
objeto ( 
( descrição 
descrição de 
de classe 
classe dada 
dada na 
na Figura 
Figura 2.1 
2.1 ) 
) , 
, os 
os estados 
estados internos 
internos de 
de cada 
cada um 
um destes 
destes objetos 
objetos evoluem 
evoluem dinamicamente 
dinamicamente . 
. 3 
3 NT 
NT : 
: Note 
Note que 
que os 
os nomes 
nomes não 
não tem 
tem acentos 
acentos , 
, uma 
uma vez 
vez que 
que devemos 
devemos evitar 
evitar o 
o uso 
uso de 
de acentos 
acentos em 
em identificadores 
identificadores ( 
( nomes 
nomes usados 
usados para 
para representar 
representar algo 
algo ) 
) quando 
quando estamos 
estamos escrevendo 
escrevendo numa 
numa linguagem 
linguagem de 
de programação 
programação qualquer 
qualquer . 
. 2.2.4 
2.2.4 Cenários 
Cenários de 
de objetos 
objetos e 
e mensagens 
mensagens O 
O diagrama 
diagrama de 
de classe 
classe da 
da Figura 
Figura 2.1 
2.1 representa 
representa um 
um modelo 
modelo estático 
estático da 
da classe 
classe CONTADOR 
CONTADOR . 
. O 
O comportamento 
comportamento dinâmico 
dinâmico não 
não é 
é mostrado 
mostrado . 
. Um 
Um diagrama 
diagrama de 
de cenário 
cenário de 
de objeto 
objeto pode 
pode ser 
ser utilizado 
utilizado para 
para descrever 
descrever as 
as interações 
interações dinâmicas 
dinâmicas entre 
entre os 
os objetos 
objetos . 
. Para 
Para cada 
cada comando 
comando dado 
dado no 
no modelo 
modelo de 
de comportamento 
comportamento de 
de uma 
uma classe 
classe ( 
( ex 
ex . 
. : 
: criar 
criar , 
, incrementar 
incrementar , 
, zerar 
zerar ) 
) , 
, uma 
uma mensagem 
mensagem correspondente 
correspondente a 
a este 
este serviço 
serviço pode 
pode ser 
ser enviada 
enviada para 
para uma 
uma instância 
instância da 
da classe 
classe . 
. Estas 
Estas mensagens 
mensagens tomam 
tomam a 
a forma 
forma descrita 
descrita na 
na seção 
seção 2.2.3 
2.2.3 , 
, onde 
onde dez 
dez ações 
ações são 
são citadas 
citadas . 
. Cada 
Cada uma 
uma destas 
destas expressões 
expressões envolvem 
envolvem o 
o envio 
envio de 
de uma 
uma mensagem 
mensagem para 
para um 
um objeto 
objeto . 
. O 
O comportamento 
comportamento dinâmico 
dinâmico da 
da classe 
classe CONTADOR 
CONTADOR é 
é mostrado 
mostrado na 
na Figura 
Figura 2.2 
2.2 . 
. Esta 
Esta figura 
figura inclui 
inclui objetos 
objetos de 
de outras 
outras classes 
classes que 
que utilizam 
utilizam os 
os objetos 
objetos da 
da classe 
classe CONTADOR 
CONTADOR . 
. Diagrama 
Diagrama de 
de cenário 
cenário de 
de objeto 
objeto Na 
Na figura 
figura 2.2 
2.2 , 
, quatro 
quatro objetos 
objetos são 
são mostrados 
mostrados através 
através das 
das nuvens 
nuvens sólidas 
sólidas de 
de Booch 
Booch . 
. O 
O objetosimulacaoé 
objetosimulacaoé uma 
uma instância 
instância da 
da classe 
classe SIMULACAO 
SIMULACAO ( 
( detalhes 
detalhes não 
não mostrados 
mostrados aqui 
aqui ) 
) . 
. O 
O objeto 
objeto posto_de_pedagioé 
posto_de_pedagioé uma 
uma instância 
instância da 
da classe 
classe POSTO_DE_PEDAGIO 
POSTO_DE_PEDAGIO ( 
( detalhes 
detalhes não 
não mostrados 
mostrados aqui 
aqui ) 
) . 
. Os 
Os objetoscontador_de_carrose 
objetoscontador_de_carrose contador_de_caminhoessão 
contador_de_caminhoessão instâncias 
instâncias da 
da classe 
classe CONTADOR 
CONTADOR . 
. Os 
Os números 
números indicam 
indicam a 
a seqüência 
seqüência das 
das ações 
ações . 
. A 
A primeira 
primeira ação 
ação está 
está associada 
associada com 
com o 
o objeto 
objeto simulacaoenviando 
simulacaoenviando a 
a mensagemcarro_chegapara 
mensagemcarro_chegapara o 
o objetoposto_de_pedagio 
objetoposto_de_pedagio . 
. A 
A segunda 
segunda ação 
ação está 
está associada 
associada com 
com o 
o objetoposto_de_pedagioenviando 
objetoposto_de_pedagioenviando a 
a mensagem 
mensagem incrementarpara 
incrementarpara o 
o objetocontador_de_carros. 
objetocontador_de_carros. # 
# pg019 
pg019 # 
# nt050 
nt050 # 
# cm00 
cm00 # 
# A 
A terceira 
terceira ação 
ação é 
é associada 
associada com 
com o 
o objetosimulacaode 
objetosimulacaode enviando 
enviando a 
a mensagemcaminhao_chegapara 
mensagemcaminhao_chegapara o 
o objeto 
objeto posto_de_pedagio 
posto_de_pedagio . 
. A 
A quarta 
quarta ação 
ação é 
é associada 
associada com 
com o 
o objetoposto_de_pedagioemitindo 
objetoposto_de_pedagioemitindo a 
a mensagemincrementarpara 
mensagemincrementarpara o 
o objetocontador_de_caminhoes 
objetocontador_de_caminhoes . 
. Deve-se 
Deve-se enfatizar 
enfatizar que 
que somente 
somente mensagens 
mensagens que 
que correspondem 
correspondem aos 
aos comandos 
comandos disponíveis 
disponíveis são 
são permitidas 
permitidas . 
. Por 
Por exemplo 
exemplo , 
, pode 
pode ser 
ser ilegal 
ilegal para 
para enviar 
enviar para 
para o 
o objeto 
objeto contador_de_carrosa 
contador_de_carrosa mensagemaumentar_valor_em_tres 
mensagemaumentar_valor_em_tres . 
. Tal 
Tal mensagem 
mensagem com 
com intenção 
intenção de 
de aumentar 
aumentar o 
o valor 
valor deresultadoem 
deresultadoem três 
três unidades 
unidades , 
, somente 
somente seria 
seria permitida 
permitida se 
se estivesse 
estivesse incluída 
incluída na 
na descrição 
descrição estática 
estática da 
da classe 
classe CONTADOR 
CONTADOR . 
. 2.2.5 
2.2.5 Parâmetros 
Parâmetros Suponha 
Suponha que 
que fosse 
fosse desejado 
desejado incrementar 
incrementar oresultadodo 
oresultadodo objeto 
objeto CONTADOR 
CONTADOR em 
em mais 
mais do 
do que 
que um 
um ( 
( ex 
ex . 
. : 
: muitos 
muitos carros 
carros chegam 
chegam em 
em faixas 
faixas diferentes 
diferentes na 
na mesma 
mesma cabinedepedágio 
cabinedepedágio ao 
ao mesmo 
mesmo tempo 
tempo ) 
) . 
. Um 
Um comando 
comando adicional 
adicional pode 
pode ser 
ser adicionado 
adicionado ao 
ao modelo 
modelo comportamental 
comportamental da 
da classe 
classe CONTADOR 
CONTADOR . 
. Nós 
Nós podemos 
podemos especificar 
especificar este 
este comando 
comando comoincrementar_em 
comoincrementar_em ( 
( quantia 
quantia : 
: INTEGER 
INTEGER ) 
) . 
. A 
A entidadequantia 
entidadequantia : 
: INTEGERdentro 
INTEGERdentro dos 
dos parênteses 
parênteses indica 
indica que 
que quantiaé 
quantiaé um 
um parâmetro 
parâmetro eINTEGERé 
eINTEGERé a 
a sua 
sua descrição 
descrição ou 
ou tipo 
tipo . 
. O 
O parâmetroquantia 
parâmetroquantia indica 
indica qual 
qual o 
o valor 
valor a 
a ser 
ser adicionado 
adicionado àresultado 
àresultado . 
. Nós 
Nós assumiremos 
assumiremos quequantiadeve 
quequantiadeve ser 
ser um 
um valor 
valor positivo 
positivo . 
. Um 
Um diagrama 
diagrama de 
de classes 
classes modificado 
modificado é 
é mostrado 
mostrado na 
na figura 
figura 2.3 
2.3 e 
e um 
um diagrama 
diagrama de 
de cenário 
cenário de 
de objeto 
objeto que 
que uso 
uso o 
o novo 
novo serviçoincrementar_emé 
serviçoincrementar_emé mostrado 
mostrado na 
na figura 
figura 2.4 
2.4 . 
. Descrição 
Descrição modificada 
modificada da 
da classe 
classe CONTADOR 
CONTADOR # 
# pg020 
pg020 # 
# nt070 
nt070 # 
# cm00 
cm00 # 
# Diagrama 
Diagrama modificado 
modificado de 
de cenário 
cenário de 
de objeto 
objeto Um 
Um comando 
comando pode 
pode ter 
ter um 
um ou 
ou mais 
mais parâmetros 
parâmetros , 
, cada 
cada um 
um de 
de um 
um tipo 
tipo específico 
específico . 
. Eles 
Eles fornecem 
fornecem valores 
valores externos 
externos de 
de entrada 
entrada para 
para o 
o comando 
comando que 
que ajudam 
ajudam a 
a determinar 
determinar a 
a ação 
ação executada 
executada . 
. Como 
Como exemplo 
exemplo de 
de um 
um comando 
comando com 
com vários 
vários parâmetros 
parâmetros , 
, considere 
considere uma 
uma aplicação 
aplicação que 
que envolve 
envolve a 
a construção 
construção de 
de uma 
uma janela 
janela no 
no vídeo 
vídeo de 
de um 
um computador 
computador ( 
( região 
região geométrica 
geométrica definida 
definida por 
por bordas 
bordas em 
em que 
que os 
os textos 
textos e 
e gráficos 
gráficos podem 
podem ser 
ser mostrados 
mostrados ) 
) . 
. A 
A informação 
informação externa 
externa requerida 
requerida para 
para construir 
construir tal 
tal janela 
janela inclui 
inclui o 
o comprimento 
comprimento e 
e a 
a largura 
largura da 
da janela 
janela , 
, além 
além de 
de sua 
sua coordenada 
coordenada superior 
superior esquerda 
esquerda . 
. A 
A especificação 
especificação de 
de tal 
tal comando 
comando em 
em uma 
uma classe 
classe , 
, JANELA 
JANELA , 
, pode 
pode ser 
ser : 
: criar 
criar ( 
( canto 
canto : 
: PONTO 
PONTO ; 
; largura 
largura : 
: INTEGER 
INTEGER ; 
; altura 
altura : 
: INTEGER 
INTEGER ) 
) O 
O primeiro 
primeiro parâmetro 
parâmetro , 
, canto 
canto , 
, é 
é do 
do tipoPONTO 
tipoPONTO . 
. O 
O tipoPONTO 
tipoPONTO é 
é uma 
uma classe 
classe que 
que inclui 
inclui entre 
entre seus 
seus serviçoscriar 
serviçoscriar ( 
( x 
x : 
: INTEGER 
INTEGER ; 
; y 
y : 
: INTEGER 
INTEGER ) 
) para 
para criar 
criar um 
um objeto 
objeto ponto 
ponto de 
de coordenadasx 
coordenadasx e 
e y 
y . 
. As 
As ações 
ações a 
a seguir 
seguir , 
, dadas 
dadas por 
por duas 
duas mensagens 
mensagens , 
, podem 
podem ser 
ser tomadas 
tomadas para 
para criar 
criar um 
um objeto 
objeto janela 
janela , 
, cujas 
cujas coordenadas 
coordenadas do 
do canto 
canto são 
são ( 
( 5,10 
5,10 ) 
) , 
, cujo 
cujo comprimento 
comprimento é 
é 100 
100 e 
e cuja 
cuja altura 
altura é 
é 200. 
200. um_ponto.criar 
um_ponto.criar ( 
( 5,10 
5,10 ) 
) uma_janela.criar 
uma_janela.criar ( 
( um_ponto,100,200 
um_ponto,100,200 ) 
) O 
O primeiro 
primeiro comando 
comando cria 
cria einicializa 
einicializa um 
um objeto 
objeto ponto 
ponto ( 
( um_ponto 
um_ponto ) 
) com 
com coordenada 
coordenada x 
x igual 
igual a 
a 5 
5 e 
e coordenaday 
coordenaday igual 
igual a 
a 10 
10 . 
. Este 
Este objeto 
objeto ponto 
ponto é 
é usado 
usado para 
para criar 
criar einicializar 
einicializar um 
um objeto 
objeto janela 
janela ( 
( uma_janela 
uma_janela ) 
) com 
com canto 
canto superior 
superior esquerdo 
esquerdo dado 
dado porum_ponto 
porum_ponto e 
e comprimento 
comprimento de 
de 100 
100 e 
e altura 
altura 200 
200 . 
. # 
# pg021 
pg021 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# Ambas 
Ambas ações 
ações dadas 
dadas pelas 
pelas duas 
duas mensagens 
mensagens acima 
acima dependem 
dependem da 
da informação 
informação externa 
externa enviada 
enviada nos 
nos dois 
dois parâmetros 
parâmetros decriar 
decriar da 
da classePONTO 
classePONTO e 
e os 
os três 
três parâmetros 
parâmetros decriar 
decriar da 
da classe 
classe JANELA 
JANELA . 
. Como 
Como um 
um exemplo 
exemplo final 
final que 
que ilustra 
ilustra a 
a importância 
importância de 
de permitir 
permitir que 
que os 
os comandos 
comandos definidos 
definidos em 
em uma 
uma classe 
classe incluam 
incluam parâmetros 
parâmetros , 
, considere 
considere a 
a classe 
classe VEÍCULO 
VEÍCULO . 
. Suponha 
Suponha que 
que queremos 
queremos criar 
criar um 
um veículo 
veículo com 
com determinada 
determinada cor 
cor , 
, peso 
peso , 
, custo 
custo e 
e potência 
potência . 
. O 
O comandocriar 
comandocriar para 
para a 
a classe 
classe VEÍCULO 
VEÍCULO pode 
pode ser 
ser definido 
definido como 
como : 
: criar 
criar ( 
( cor 
cor : 
: STRING 
STRING ; 
; peso 
peso : 
: INTEGER 
INTEGER ; 
; custo 
custo : 
: REAL 
REAL ; 
; potencia 
potencia : 
: INTEGER 
INTEGER ) 
) O 
O parâmetrocor 
parâmetrocor é 
é do 
do tipo 
tipo STRING 
STRING . 
. Essa 
Essa é 
é a 
a classe 
classe que 
que representa 
representa uma 
uma seqüência 
seqüência de 
de caracteres 
caracteres em 
em modelo 
modelo de 
de dados 
dados ( 
( uma 
uma palavra 
palavra comum 
comum ) 
) . 
. As 
As características 
características de 
de tal 
tal classe 
classe serão 
serão discutidas 
discutidas mais 
mais a 
a frente 
frente no 
no livro 
livro . 
. Os 
Os parâmetrospeso 
parâmetrospeso e 
e potencia 
potencia são 
são do 
do tipo 
tipo INTEGER 
INTEGER enquanto 
enquanto o 
o parâmetrocustoé 
parâmetrocustoé do 
do tipo 
tipo REAL 
REAL . 
. Embora 
Embora não 
não seja 
seja aparente 
aparente , 
, imediatamente 
imediatamente ao 
ao leitor 
leitor e 
e de 
de fato 
fato não 
não pareça 
pareça natural 
natural , 
, valores 
valores numéricos 
numéricos do 
do tipo 
tipo INTEGER 
INTEGER tem 
tem comportamento 
comportamento diferente 
diferente dos 
dos valores 
valores numéricos 
numéricos do 
do tipo 
tipo REAL 
REAL . 
. Um 
Um objeto 
objeto do 
do tipo 
tipo INTEGER 
INTEGER pode 
pode ter 
ter apenas 
apenas valores 
valores inteiros 
inteiros . 
. Um 
Um objeto 
objeto do 
do tipo 
tipo REAL 
REAL pode 
pode ter 
ter valores 
valores fracionários 
fracionários . 
. Quando 
Quando fazemos 
fazemos contas 
contas com 
com valores 
valores do 
do tipo 
tipo INTEGER 
INTEGER , 
, uma 
uma resposta 
resposta exata 
exata é 
é computada 
computada . 
. Por 
Por outro 
outro lado 
lado , 
, quando 
quando fazemos 
fazemos contas 
contas em 
em valores 
valores do 
do tipo 
tipo REAL 
REAL , 
, nem 
nem sempre 
sempre é 
é possível 
possível chegar 
chegar a 
a uma 
uma resposta 
resposta exata 
exata . 
. Esse 
Esse erro 
erro de 
de arredondamento 
arredondamento presente 
presente nas 
nas unidades 
unidades de 
de processamento 
processamento aritmético 
aritmético de 
de computadores 
computadores digitais 
digitais é 
é causada 
causada pela 
pela capacidade 
capacidade finita 
finita de 
de armazenamento 
armazenamento para 
para cada 
cada casa 
casa decimal 
decimal . 
. Uma 
Uma quantidade 
quantidade como 
como 1/3 
1/3 ( 
( uma 
uma fração 
fração recorrente 
recorrente que 
que requer 
requer um 
um número 
número infinito 
infinito de 
de casas 
casas decimais 
decimais ) 
) só 
só pode 
pode ser 
ser representada 
representada com 
com precisão 
precisão finita 
finita . 
. Isto 
Isto leva 
leva à 
à introdução 
introdução de 
de um 
um pequeno 
pequeno erro 
erro em 
em qualquer 
qualquer computação 
computação que 
que envolva 
envolva essa 
essa quantidade 
quantidade decimal 
decimal . 
. Como 
Como números 
números do 
do tipo 
tipo INTEGER 
INTEGER se 
se comportam 
comportam de 
de maneira 
maneira diferente 
diferente de 
de números 
números do 
do tipo 
tipo REAL 
REAL , 
, seus 
seus comportamentos 
comportamentos são 
são especificados 
especificados em 
em duas 
duas classes 
classes diferentes 
diferentes . 
. 2.3 
2.3 Relações 
Relações ent 
ent re 
re objetos 
objetos Raramente 
Raramente nos 
nos preocupamos 
preocupamos com 
com objetos 
objetos isolados 
isolados . 
. Ciência 
Ciência em 
em geral 
geral e 
e ciência 
ciência da 
da computação 
computação em 
em particular 
particular estão 
estão se 
se preocupando 
preocupando com 
com modelagem 
modelagem e 
e compreensão 
compreensão de 
de sistemas 
sistemas . 
. Sistemas 
Sistemas orientado 
orientado por 
por objetos 
objetos envolvem 
envolvem vários 
vários objetos 
objetos de 
de diferentes 
diferentes tipos 
tipos trabalhando 
trabalhando juntos 
juntos para 
para atingir 
atingir desejada 
desejada meta 
meta . 
. É 
É importante 
importante que 
que examinemos 
examinemos os 
os tipos 
tipos de 
de relação 
relação que 
que objetos 
objetos podem 
podem ter 
ter uns 
uns com 
com os 
os outros 
outros . 
. Várias 
Várias relações 
relações importantes 
importantes que 
que objetos 
objetos podem 
podem ter 
ter uns 
uns com 
com os 
os outros 
outros são 
são baseadas 
baseadas nas 
nas relações 
relações entre 
entre suas 
suas classes 
classes . 
. # 
# pg022 
pg022 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Estas 
Estas incluemherança 
incluemherança ( 
( vista 
vista na 
na seção 
seção 2.3.1 
2.3.1 ) 
) , 
, associação 
associação ( 
( vista 
vista na 
na seção 
seção 2.3.2 
2.3.2 ) 
) erelação 
erelação de 
de uso 
uso ( 
( vista 
vista na 
na seção 
seção 2.3.3 
2.3.3 ) 
) . 
. 2.3.1 
2.3.1 Herança 
Herança A 
A palavra 
palavra herança 
herança sugere 
sugere a 
a aquisição 
aquisição de 
de características 
características de 
de um 
um ou 
ou mais 
mais ancestrais 
ancestrais . 
. Este 
Este é 
é precisamente 
precisamente o 
o sentido 
sentido no 
no qual 
qual nós 
nós deveremos 
deveremos usar 
usar este 
este termo 
termo em 
em associação 
associação com 
com a 
a solução 
solução de 
de problemas 
problemas orientada 
orientada por 
por objetos 
objetos . 
. Suponha 
Suponha que 
que queiramos 
queiramos construir 
construir uma 
uma nova 
nova classe 
classe , 
, uma 
uma subclasse 
subclasse , 
, que 
que represente 
represente uma 
uma especialização 
especialização de 
de uma 
uma classe 
classe existente 
existente . 
. Queremos 
Queremos que 
que a 
a subclasse 
subclasse possibilite 
possibilite o 
o aumento 
aumento de 
de alguns 
alguns atributos 
atributos aos 
aos dados 
dados da 
da classe 
classe mãe 
mãe , 
, assim 
assim como 
como adicionar 
adicionar alguns 
alguns comandos 
comandos ou 
ou consultas 
consultas . 
. Também 
Também queremos 
queremos que 
que a 
a subclasse 
subclasse compartilhe 
compartilhe as 
as características 
características do 
do modelos 
modelos de 
de dados 
dados da 
da classe 
classe mãe 
mãe e 
e que 
que forneça 
forneça os 
os serviços 
serviços da 
da classe 
classe mãe 
mãe . 
. Há 
Há um 
um princípio 
princípio importante 
importante de 
de consistência 
consistência que 
que deve 
deve ser 
ser satisfeito 
satisfeito quando 
quando uma 
uma classe 
classe é 
é uma 
uma subclasse 
subclasse de 
de outra 
outra . 
. Este 
Este princípio 
princípio tem 
tem três 
três partes 
partes : 
: • 
• A 
A subclasse 
subclasse deve 
deve ter 
ter uma 
uma relacionamento 
relacionamento lógico 
lógico com 
com a 
a mãe 
mãe que 
que possa 
possa ser 
ser expresso 
expresso como 
como “ 
“ a 
a subclasse 
subclasse é 
é um 
um tipo 
tipo de 
de ” 
” da 
da classe 
classe mãe 
mãe . 
. • 
• Os 
Os atributos 
atributos da 
da classe 
classe mãe 
mãe devem 
devem fazer 
fazer sentido 
sentido como 
como parte 
parte do 
do estado 
estado da 
da subclasse 
subclasse . 
. • 
• Os 
Os serviços 
serviços da 
da classe 
classe mãe 
mãe devem 
devem fazer 
fazer sentido 
sentido como 
como parte 
parte do 
do comportamento 
comportamento da 
da subclasse 
subclasse . 
. Como 
Como um 
um exemplo 
exemplo , 
, considere 
considere a 
a ligação 
ligação entre 
entre a 
a classe 
classe VEÍCULO 
VEÍCULO e 
e a 
a classe 
classe CARRO 
CARRO . 
. Claramente 
Claramente , 
, classe 
classe CARRO 
CARRO é 
é uma 
uma especialização 
especialização da 
da classe 
classe VEÍCULO 
VEÍCULO . 
. Há 
Há muitos 
muitos tipos 
tipos de 
de veículos 
veículos que 
que não 
não são 
são carros 
carros , 
, mas 
mas não 
não há 
há carros 
carros que 
que não 
não sejam 
sejam veículos 
veículos . 
. Suponha 
Suponha que 
que , 
, para 
para os 
os propósitos 
propósitos deste 
deste simples 
simples exemplo 
exemplo , 
, a 
a classe 
classe VEÍCULO 
VEÍCULO tenha 
tenha os 
os atributoscor 
atributoscor , 
, peso 
peso , 
, velocidade_maxima 
velocidade_maxima , 
, e 
e preco.A 
preco.A classe 
classe CARRO 
CARRO tem 
tem os 
os atributos 
atributos adicionaisnumero_de_cilindros 
adicionaisnumero_de_cilindros e 
e cavalos_de_forca 
cavalos_de_forca . 
. Agora 
Agora vamos 
vamos considerar 
considerar a 
a classe 
classe AVIÃO 
AVIÃO , 
, uma 
uma outra 
outra subclasse 
subclasse da 
da classe 
classe VEÍCULO 
VEÍCULO . 
. Em 
Em acréscimo 
acréscimo aos 
aos atributospeso 
atributospeso , 
, velocidade_maxima 
velocidade_maxima e 
e preco 
preco , 
, herdados 
herdados da 
da classe 
classe VEÍCULO 
VEÍCULO , 
, ela 
ela tem 
tem o 
o atributo 
atributo adicionalenvergadura_da_asa 
adicionalenvergadura_da_asa . 
. Considere 
Considere agora 
agora duas 
duas subclasses 
subclasses de 
de AVIÃO 
AVIÃO : 
: AVIÃO_A_JATO 
AVIÃO_A_JATO e 
e AVIÃO_A_HÉLICE 
AVIÃO_A_HÉLICE . 
. A 
A classe 
classe AVIÄO_A_JATO 
AVIÄO_A_JATO apresenta 
apresenta o 
o atributoimpulso_maximo 
atributoimpulso_maximo ( 
( uma 
uma característica 
característica de 
de suas 
suas turbinas 
turbinas ) 
) e 
e a 
a classe 
classe AVIÃO_A_HÉLICE 
AVIÃO_A_HÉLICE apresenta 
apresenta o 
o atributo 
atributo volume_deslocado 
volume_deslocado ( 
( o 
o volume 
volume de 
de cada 
cada cilindro 
cilindro ) 
) . 
. Por 
Por ser 
ser apenas 
apenas um 
um simples 
simples exemplo 
exemplo não 
não serão 
serão feitos 
feitos esforços 
esforços no 
no sentido 
sentido de 
de modelar 
modelar os 
os comandos 
comandos e 
e consultas 
consultas de 
de cada 
cada uma 
uma destas 
destas classes 
classes . 
. O 
O diagrama 
diagrama de 
de Booch 
Booch na 
na figura 
figura 2.5 
2.5 mostra 
mostra a 
a hierarquia 
hierarquia de 
de herança 
herança para 
para estas 
estas classes 
classes básicas 
básicas de 
de veículo 
veículo . 
. As 
As setas 
setas estão 
estão direcionadas 
direcionadas das 
das subclasses 
subclasses para 
para as 
as classes 
classes mãe 
mãe . 
. # 
# pg023 
pg023 # 
# nt070 
nt070 # 
# cm00 
cm00 # 
# relações 
relações de 
de herança 
herança para 
para classes 
classes VEÍCULO 
VEÍCULO . 
. 2.3.1.1 
2.3.1.1 Classificação 
Classificação Foi 
Foi mencionado 
mencionado anteriormente 
anteriormente que 
que o 
o processo 
processo de 
de classificação 
classificação pode 
pode ser 
ser usado 
usado para 
para administrar 
administrar complexidade 
complexidade . 
. Sempre 
Sempre que 
que um 
um grupo 
grupo relacionado 
relacionado mas 
mas de 
de algum 
algum modo 
modo diferente 
diferente precisa 
precisa ser 
ser modelado 
modelado , 
, uma 
uma análise 
análise cuidadosa 
cuidadosa de 
de suas 
suas semelhanças 
semelhanças e 
e diferenças 
diferenças pode 
pode levar 
levar a 
a uma 
uma hierarquia 
hierarquia de 
de classes 
classes . 
. Atributos 
Atributos que 
que são 
são compartilhados 
compartilhados por 
por várias 
várias devem 
devem ser 
ser colocados 
colocados no 
no topo 
topo da 
da hierarquia 
hierarquia . 
. Serviços 
Serviços que 
que são 
são compartilhados 
compartilhados por 
por muitas 
muitas subclasses 
subclasses devem 
devem também 
também ser 
ser colocados 
colocados no 
no topo 
topo da 
da hierarquia 
hierarquia . 
. A 
A base 
base principal 
principal para 
para classificação 
classificação é 
é usualmente 
usualmente baseada 
baseada na 
na distribuição 
distribuição e 
e reuso 
reuso dos 
dos atributos 
atributos ( 
( o 
o modelo 
modelo de 
de dados 
dados ) 
) . 
. Como 
Como exemplo 
exemplo , 
, vamos 
vamos considerar 
considerar o 
o mundo 
mundo de 
de cachorros 
cachorros de 
de raça 
raça pura 
pura , 
, . 
. O 
O clube 
clube KENNEL 
KENNEL americano 
americano classificou 
classificou os 
os cachorros 
cachorros em 
em vários 
vários subgrupos 
subgrupos , 
, de 
de acordo 
acordo com 
com suas 
suas características 
características físicas 
físicas e 
e comportamentais 
comportamentais . 
. A 
A figura 
figura 2.6 
2.6 mostra 
mostra um 
um pouco 
pouco das 
das relações 
relações hierárquicas 
hierárquicas das 
das classes 
classes de 
de cachorros 
cachorros de 
de raça 
raça . 
. Várias 
Várias classes 
classes são 
são marcadas 
marcadas com 
com adornos 
adornos triangulares 
triangulares com 
com a 
a letra 
letra “ 
“ A 
A ” 
” colocada 
colocada no 
no centro 
centro do 
do triângulo 
triângulo . 
. O 
O símbolo 
símbolo indica 
indica que 
que a 
a classe 
classe é 
é uma 
uma classeabstrata 
classeabstrata . 
. Uma 
Uma classe 
classe abstrata 
abstrata jamais 
jamais terá 
terá instâncias 
instâncias Seu 
Seu propósito 
propósito é 
é agrupar 
agrupar atributos 
atributos comuns 
comuns assim 
assim como 
como os 
os serviços 
serviços que 
que são 
são necessários 
necessários nas 
nas classes 
classes descendentes 
descendentes . 
. Esses 
Esses atributos 
atributos não 
não são 
são mostrados 
mostrados na 
na figura 
figura 2.6 
2.6 . 
. # 
# pg024 
pg024 # 
# nt065 
nt065 # 
# cm00 
cm00 # 
# Classificações 
Classificações de 
de Cães 
Cães Um 
Um criador 
criador de 
de cães 
cães é 
é capaz 
capaz de 
de saber 
saber muito 
muito sobre 
sobre uma 
uma raça 
raça de 
de cães 
cães , 
, conhecendo 
conhecendo onde 
onde ela 
ela fica 
fica na 
na hierarquia 
hierarquia canina 
canina . 
. Do 
Do mesmo 
mesmo modo 
modo , 
, um 
um engenheiro 
engenheiro de 
de software 
software é 
é capaz 
capaz de 
de saber 
saber muito 
muito a 
a respeito 
respeito do 
do comportamento 
comportamento esperado 
esperado de 
de um 
um objeto 
objeto por 
por conhecer 
conhecer onde 
onde está 
está situado 
situado na 
na hierarquia 
hierarquia da 
da classe 
classe em 
em volta 
volta dele 
dele . 
. 2.3.2 
2.3.2 Associação 
Associação Os 
Os objetos 
objetos a 
a nossa 
nossa volta 
volta são 
são geralmente 
geralmente compostos 
compostos de 
de outros 
outros objetos 
objetos . 
. Seu 
Seu computador 
computador é 
é composto 
composto de 
de uma 
uma unidade 
unidade central 
central de 
de processamento 
processamento , 
, memória 
memória de 
de acesso 
acesso aleatório 
aleatório , 
, memória 
memória cachede 
cachede alta 
alta velocidade 
velocidade e 
e armazenamento 
armazenamento secundário 
secundário . 
. Cada 
Cada um 
um destes 
destes objetos 
objetos pode 
pode ser 
ser dividido 
dividido em 
em pequeno 
pequeno objetos.Se 
objetos.Se você 
você continuar 
continuar a 
a subdividir 
subdividir os 
os componentes 
componentes , 
, no 
no final 
final , 
, você 
você se 
se encontrará 
encontrará no 
no nível 
nível molecular 
molecular ou 
ou atômico 
atômico . 
. Como 
Como sempre 
sempre , 
, o 
o problema 
problema sendo 
sendo resolvido 
resolvido determina 
determina o 
o nível 
nível apropriado 
apropriado de 
de granularidade 
granularidade na 
na modelagem 
modelagem de 
de algum 
algum objeto 
objeto como 
como uma 
uma “ 
“ associação 
associação ” 
” de 
de outros 
outros objetos 
objetos . 
. Vamos 
Vamos rever 
rever novamente 
novamente o 
o modelo 
modelo de 
de objeto 
objeto de 
de um 
um carro 
carro . 
. Um 
Um carro 
carro é 
é composto 
composto de 
de um 
um motor 
motor , 
, uma 
uma transmissão 
transmissão , 
, um 
um chassi 
chassi , 
, um 
um jogo 
jogo de 
de rodas 
rodas e 
e pneus 
pneus , 
, um 
um sistema 
sistema elétrico 
elétrico , 
, um 
um sistema 
sistema de 
de suspensão 
suspensão , 
, um 
um sistema 
sistema de 
de escapamento 
escapamento e 
e componentes 
componentes do 
do interior 
interior . 
. Cada 
Cada um 
um destes 
destes são 
são partes 
partes essenciais 
essenciais do 
do carro 
carro e 
e podem 
podem ser 
ser modelados 
modelados como 
como classes 
classes . 
. # 
# pg025 
pg025 # 
# nt050 
nt050 # 
# cm00 
cm00 # 
# O 
O objeto 
objeto deve 
deve ser 
ser capaz 
capaz de 
de satisfazer 
satisfazer ao 
ao relação 
relação “ 
“ tem_um 
tem_um ” 
” em 
em respeito 
respeito a 
a cada 
cada uma 
uma de 
de suas 
suas partes 
partes . 
. A 
A Figura 
Figura 2.7 
2.7 Demostra 
Demostra as 
as relações 
relações de 
de associação 
associação de 
de um 
um carro 
carro . 
. Relações 
Relações de 
de associação 
associação entre 
entre classes 
classes . 
. O 
O círculo 
círculo escuro 
escuro conectando 
conectando a 
a classeCarro 
classeCarro com 
com seus 
seus componetesMotor 
componetesMotor , 
, Transmissão 
Transmissão , 
, Suspensão 
Suspensão , 
, Rodas 
Rodas , 
, ComponentesInternos 
ComponentesInternos , 
, Sistema_de_Escapamento 
Sistema_de_Escapamento , 
, e 
e Sistema_Eletricoindica 
Sistema_Eletricoindica ao 
ao relação 
relação “ 
“ tem 
tem um 
um ” 
” de 
de associação 
associação . 
. 2.3.3 
2.3.3 Relação 
Relação de 
de uso 
uso Muitas 
Muitas vezes 
vezes uma 
uma classe 
classe precisa 
precisa usar 
usar os 
os recursos 
recursos de 
de uma 
uma outra 
outra classe 
classe que 
que pode 
pode não 
não estar 
estar intimamente 
intimamente relacionada 
relacionada a 
a ela 
ela . 
. Por 
Por exemplo 
exemplo , 
, uma 
uma classe 
classe SIMULAÇÃO 
SIMULAÇÃO pode 
pode precisar 
precisar realizar 
realizar operações 
operações matemáticas 
matemáticas , 
, incluindo 
incluindo seno 
seno , 
, coseno 
coseno , 
, e 
e raiz 
raiz quadrada 
quadrada . 
. Suponha 
Suponha que 
que estes 
estes serviços 
serviços são 
são encontrados 
encontrados na 
na classe 
classe MATEMÁTICA.Além 
MATEMÁTICA.Além disso 
disso , 
, a 
a classe 
classe SIMULAÇÃO 
SIMULAÇÃO precisa 
precisa desenhar 
desenhar figuras 
figuras geométricas 
geométricas na 
na tela 
tela . 
. Suponha 
Suponha os 
os serviços 
serviços para 
para fazer 
fazer isto 
isto são 
são encontrados 
encontrados na 
na classe 
classe GRÁFICOS 
GRÁFICOS . 
. A 
A figura 
figura 2.8 
2.8 demostra 
demostra a 
a relação 
relação de 
de uso 
uso entre 
entre a 
a classe 
classe SIMULAÇÃO 
SIMULAÇÃO e 
e as 
as classes 
classes MATEMÁTICA 
MATEMÁTICA e 
e GRÁFICOS 
GRÁFICOS . 
. Os 
Os círculos 
círculos claros 
claros ligados 
ligados à 
à classe 
classe SIMULAÇÃO 
SIMULAÇÃO indicam 
indicam a 
a relação 
relação de 
de uso 
uso com 
com as 
as classes 
classes MATEMÁTICA 
MATEMÁTICA e 
e GRÁFICOS 
GRÁFICOS . 
. # 
# pg026 
pg026 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Uma 
Uma relação 
relação de 
de uso 
uso entre 
entre classes 
classes 2.4 
2.4 Tipos 
Tipos abstratos 
abstratos de 
de dados 
dados Um 
Um tipo 
tipo abstrato 
abstrato de 
de dados 
dados ( 
( TAD 
TAD ) 
) é 
é um 
um modelo 
modelo de 
de dados 
dados e 
e um 
um conjunto 
conjunto de 
de operações 
operações associadas 
associadas que 
que podem 
podem ser 
ser efetuadas 
efetuadas por 
por ou 
ou em 
em um 
um modelo 
modelo de 
de dados 
dados . 
. A 
A classe 
classe CONTADOR 
CONTADOR definida 
definida anteriormente 
anteriormente é 
é um 
um exemplo 
exemplo perfeito 
perfeito de 
de um 
um tipo 
tipo abstrato 
abstrato de 
de dados 
dados . 
. O 
O modelo 
modelo de 
de dados 
dados consiste 
consiste em 
em um 
um simples 
simples inteiro 
inteiro , 
, resultado 
resultado . 
. As 
As operações 
operações que 
que definem 
definem o 
o comportamento 
comportamento desse 
desse modelo 
modelo de 
de dados 
dados sãocriar 
sãocriar , 
, incrementare 
incrementare incrementar_em 
incrementar_em . 
. O 
O tipo 
tipo abstrato 
abstrato de 
de dados 
dados CONTADOR 
CONTADOR pode 
pode ser 
ser entendido 
entendido como 
como um 
um elemento 
elemento unificado 
unificado cujo 
cujo propósito 
propósito é 
é contar 
contar eventos 
eventos ou 
ou coisas 
coisas . 
. As 
As coisas 
coisas que 
que se 
se pode 
pode fazer 
fazer para 
para um 
um objeto 
objeto contador 
contador são 
são zerar 
zerar seu 
seu valor 
valor , 
, incrementar 
incrementar seu 
seu resultado 
resultado em 
em 1 
1 , 
, ou 
ou incrementar 
incrementar seu 
seu resultado 
resultado de 
de um 
um valor 
valor inteiro 
inteiro arbitrário 
arbitrário não 
não negativo 
negativo . 
. Isso 
Isso é 
é tudo 
tudo . 
. Não 
Não se 
se pode 
pode adicionar 
adicionar , 
, subtrair 
subtrair , 
, multiplicar 
multiplicar ou 
ou dividir 
dividir um 
um objeto 
objeto CONTADOR 
CONTADOR por 
por outro 
outro objeto 
objeto CONTADOR 
CONTADOR ou 
ou por 
por um 
um inteiro 
inteiro qualquer 
qualquer . 
. Isso 
Isso é 
é porque 
porque o 
o tipo 
tipo abstrato 
abstrato de 
de dados 
dados definiu 
definiu propriedades 
propriedades singulares 
singulares que 
que não 
não incluem 
incluem tal 
tal aritmética 
aritmética . 
. Tipos 
Tipos abstratos 
abstratos de 
de dados 
dados proporcionam 
proporcionam poderosas 
poderosas abstrações 
abstrações que 
que podem 
podem ser 
ser usadas 
usadas como 
como base 
base para 
para solução 
solução de 
de problemas 
problemas . 
. Os 
Os detalhes 
detalhes de 
de baixo 
baixo nível 
nível do 
do modelo 
modelo de 
de dados 
dados ( 
( os 
os internos 
internos do 
do TAD 
TAD ) 
) se 
se tornam 
tornam sem 
sem importância 
importância quando 
quando decidimos 
decidimos como 
como os 
os TADs 
TADs interagem 
interagem entre 
entre si 
si . 
. Apenas 
Apenas as 
as propriedades 
propriedades externas 
externas do 
do TAD 
TAD ( 
( definidas 
definidas pelo 
pelo conjunto 
conjunto de 
de operações 
operações ) 
) são 
são importantes 
importantes na 
na determinação 
determinação de 
de seu 
seu uso 
uso . 
. Tipos 
Tipos abstratos 
abstratos de 
de dados 
dados são 
são representados 
representados por 
por classes 
classes numa 
numa linguagem 
linguagem orientada 
orientada por 
por objetos 
objetos . 
. Nas 
Nas linguagens 
linguagens procedurais 
procedurais como 
como C 
C e 
e Pascal 
Pascal , 
, não 
não há 
há sintaxe 
sintaxe de 
de linguagem 
linguagem direta 
direta ou 
ou suporte 
suporte para 
para tipos 
tipos abstratos 
abstratos de 
de dados 
dados . 
. Programação 
Programação cuidadosa 
cuidadosa e 
e disciplinada 
disciplinada permite 
permite ao 
ao programador 
programador simular 
simular TADs 
TADs . 
. O 
O termo 
termo “ 
“ omissão 
omissão de 
de –dados 
–dados ” 
” ( 
( data-hiding 
data-hiding ) 
) é 
é usado 
usado significando 
significando que 
que o 
o modelo 
modelo de 
de dados 
dados ( 
( estado 
estado interno 
interno ) 
) de 
de um 
um TAD 
TAD não 
não pode 
pode ser 
ser modificado 
modificado pelo 
pelo usuário 
usuário . 
. O 
O estado 
estado interno 
interno pode 
pode ser 
ser modificado 
modificado apenas 
apenas através 
através do 
do conjunto 
conjunto de 
de operações 
operações definidas 
definidas pelo 
pelo TDA 
TDA . 
. Não 
Não há 
há segredo 
segredo associado 
associado com 
com o 
o termo 
termo “ 
“ omissão 
omissão de 
de dados 
dados ” 
” ( 
( data-hiding 
data-hiding ) 
) , 
, apenas 
apenas proteção. 
proteção. # 
# pg027 
pg027 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# O 
O estado 
estado interno 
interno de 
de um 
um objeto 
objeto ( 
( um 
um TAD 
TAD ) 
) é 
é protegido 
protegido de 
de corrupções 
corrupções negligentes 
negligentes . 
. Como 
Como se 
se pode 
pode definir 
definir um 
um tipo 
tipo abstrato 
abstrato de 
de dados 
dados para 
para um 
um semáforo 
semáforo ? 
? O 
O modelo 
modelo de 
de dados 
dados da 
da luz 
luz deve 
deve permitir 
permitir os 
os estados 
estados internos 
internos verde 
verde , 
, amarelo 
amarelo e 
e vermelho 
vermelho . 
. Esses 
Esses valores 
valores podem 
podem ser 
ser definidos 
definidos tendo 
tendo um 
um tipo 
tipo COR_DE_LUZ 
COR_DE_LUZ ( 
( tal 
tal modelo 
modelo de 
de dados 
dados permitiria 
permitiria somente 
somente três 
três valores 
valores para 
para uma 
uma instância 
instância de 
de COR_DE_LUZ 
COR_DE_LUZ ) 
) . 
. Os 
Os comandos 
comandos que 
que poderiam 
poderiam ser 
ser efetuados 
efetuados na 
na luz 
luz incluem 
incluem : 
: • 
• muda_cor 
muda_cor ( 
( cor 
cor : 
: COR_DE_LUZ 
COR_DE_LUZ ) 
) • 
• prossiga 
prossiga A 
A operaçãomuda_cor 
operaçãomuda_cor permite 
permite ao 
ao usuário 
usuário ajustar 
ajustar o 
o estado 
estado interno 
interno da 
da luz 
luz . 
. A 
A operaçãoprossigamuda 
operaçãoprossigamuda a 
a cor 
cor da 
da luz 
luz através 
através da 
da seqüência 
seqüência verde 
verde , 
, amarelo 
amarelo , 
, vermelho 
vermelho quando 
quando aplicada 
aplicada repetidamente 
repetidamente . 
. O 
O comportamento 
comportamento do 
do semáforo 
semáforo é 
é completamente 
completamente especificado 
especificado pelas 
pelas operaçõesmuda_core 
operaçõesmuda_core prossiga 
prossiga . 
. 2.5 
2.5 Produtores 
Produtores e 
e consumidores 
consumidores . 
. Um 
Um sistema 
sistema de 
de software 
software é 
é geralmente 
geralmente composto 
composto de 
de vários 
vários componentes 
componentes individuais 
individuais . 
. Em 
Em uma 
uma organização 
organização orientada 
orientada por 
por objeto 
objeto , 
, esses 
esses componentes 
componentes são 
são dados 
dados pelas 
pelas classes 
classes . 
. Uma 
Uma biblioteca 
biblioteca de 
de classes 
classes contém 
contém uma 
uma coleção 
coleção de 
de classes 
classes unidas 
unidas por 
por seu 
seu suportes 
suportes para 
para alguma 
alguma área 
área de 
de aplicação 
aplicação . 
. Bibliotecas 
Bibliotecas de 
de classes 
classes têm 
têm sido 
sido construídas 
construídas para 
para apoiar 
apoiar interfaces 
interfaces gráficas 
gráficas de 
de usuário 
usuário dentro 
dentro da 
da programação 
programação em 
em Windows 
Windows , 
, banco 
banco de 
de dados 
dados para 
para armazenamento 
armazenamento de 
de informações 
informações complexas 
complexas , 
, matemática 
matemática computacional 
computacional para 
para aplicações 
aplicações em 
em engenharia 
engenharia e 
e ciências 
ciências , 
, estruturas 
estruturas de 
de dados 
dados para 
para representação 
representação de 
de tipos 
tipos abstratos 
abstratos de 
de dados 
dados , 
, operações 
operações de 
de entrada 
entrada e 
e saída 
saída e 
e outras 
outras áreas 
áreas de 
de aplicações 
aplicações . 
. Um 
Um produtor 
produtor é 
é um 
um programador 
programador cujo 
cujo objetivo 
objetivo principal 
principal é 
é a 
a construção 
construção de 
de bibliotecas 
bibliotecas de 
de classes 
classes para 
para serem 
serem usadas 
usadas por 
por outros 
outros programadores 
programadores ou 
ou por 
por outras 
outras partes 
partes de 
de uma 
uma aplicação 
aplicação . 
. Umconsumidor 
Umconsumidor é 
é um 
um programador 
programador que 
que faz 
faz uso 
uso da 
da biblioteca 
biblioteca de 
de classes 
classes para 
para aplicações 
aplicações específicas 
específicas . 
. Muitas 
Muitas vezes 
vezes um 
um programador 
programador faz 
faz o 
o papel 
papel dos 
dos dois 
dois , 
, produtor 
produtor e 
e consumidor 
consumidor , 
, produzindo 
produzindo algumas 
algumas classes 
classes para 
para depois 
depois serem 
serem usadas 
usadas por 
por outras 
outras ou 
ou na 
na própria 
própria aplicação 
aplicação , 
, usando 
usando classes 
classes já 
já existentes 
existentes . 
. É 
É geralmente 
geralmente aconselhável 
aconselhável usar 
usar recursos 
recursos disponíveis 
disponíveis de 
de uma 
uma biblioteca 
biblioteca existente 
existente para 
para desenvolver 
desenvolver uma 
uma nova 
nova aplicação 
aplicação a 
a menos 
menos que 
que você 
você deseje 
deseje desenvolver 
desenvolver novas 
novas aplicações 
aplicações a 
a partir 
partir de 
de seus 
seus princípios 
princípios básicos 
básicos ( 
( por 
por exemplo 
exemplo reinventar 
reinventar a 
a roda 
roda ) 
) . 
. Um 
Um programador 
programador instruído 
instruído pode 
pode ser 
ser capaz 
capaz de 
de construir 
construir aplicações 
aplicações de 
de software 
software através 
através do 
do uso 
uso de 
de componentes 
componentes de 
de software 
software existentes 
existentes que 
que são 
são conectados 
conectados junto 
junto com 
com uma 
uma pequena 
pequena porção 
porção de 
de código 
código novo 
novo . 
. Esta 
Esta seria 
seria uma 
uma atividade 
atividade de 
de consumidor 
consumidor . 
. # 
# pg028 
pg028 # 
# nt070 
nt070 # 
# cm00 
cm00 # 
# Como 
Como exemplo 
exemplo , 
, considere 
considere , 
, uma 
uma típica 
típica aplicação 
aplicação inicial 
inicial de 
de programação 
programação . 
. Nós 
Nós desejamos 
desejamos escrever 
escrever um 
um programa 
programa que 
que mostra 
mostra seu 
seu nome 
nome na 
na tela 
tela de 
de seu 
seu computador 
computador . 
. Muitas 
Muitas linguagens 
linguagens de 
de programação 
programação são 
são apoiadas 
apoiadas por 
por uma 
uma ou 
ou mais 
mais bibliotecas 
bibliotecas para 
para fazer 
fazer entrada 
entrada e 
e saída 
saída de 
de dados 
dados . 
. Entrada 
Entrada de 
de dados 
dados é 
é o 
o processo 
processo de 
de interação 
interação entre 
entre o 
o usuário 
usuário e 
e computador 
computador na 
na qual 
qual o 
o usuário 
usuário transfere 
transfere informação 
informação para 
para o 
o programa 
programa que 
que você 
você está 
está usando 
usando . 
. Saída 
Saída de 
de dados 
dados é 
é o 
o processo 
processo de 
de interação 
interação entre 
entre o 
o usuário 
usuário e 
e o 
o computador 
computador no 
no qual 
qual um 
um programa 
programa transfere 
transfere informação 
informação ao 
ao usuário 
usuário . 
. O 
O primeiro 
primeiro programa 
programa que 
que nós 
nós desejamos 
desejamos construir 
construir envolve 
envolve somente 
somente uma 
uma saída 
saída simples 
simples . 
. O 
O programa 
programa deverá 
deverá mostrar 
mostrar o 
o nome 
nome do 
do usuário 
usuário no 
no terminal 
terminal de 
de vídeo 
vídeo . 
. A 
A identação 
identação segue 
segue o 
o estilo 
estilo geral 
geral do 
do Eiffel 
Eiffel . 
. Um 
Um primeiro 
primeiro programa 
programa : 
: Mostrando 
Mostrando seu 
seu nome 
nome . 
. class 
class PRIMEIRO_PROGRAMA 
PRIMEIRO_PROGRAMA creation 
creation inicio 
inicio feature 
feature inicio 
inicio is 
is do 
do io.putstring 
io.putstring ( 
( “ 
“ Meu 
Meu nome 
nome e 
e ’ 
’ xxx 
xxx ” 
” ) 
) end 
end ; 
; end 
end -– 
-– class 
class PRIMEIRO_PROGRAMA 
PRIMEIRO_PROGRAMA Na 
Na listagem 
listagem 2.1 
2.1 , 
, a 
a classe 
classe PRIMEIRO_PROGRAMA 
PRIMEIRO_PROGRAMA contém 
contém uma 
uma rotina 
rotina , 
, inicio 
inicio , 
, que 
que inicia 
inicia a 
a aplicação 
aplicação . 
. Um 
Um arquivo 
arquivo de 
de configuração 
configuração chamado 
chamado arquivoACE 
arquivoACE informa 
informa ao 
ao sistema 
sistema EIFFEL 
EIFFEL que 
que PRIMEIRO_PROGRAMA 
PRIMEIRO_PROGRAMA é 
é a 
a classe 
classe de 
de aplicação 
aplicação e 
e especifica 
especifica queinicio 
queinicio é 
é o 
o ponto 
ponto de 
de entrada 
entrada para 
para a 
a aplicação 
aplicação . 
. O 
O leitor 
leitor deve 
deve consultar 
consultar o 
o seu 
seu guia 
guia do 
do usuário 
usuário do 
do sistema 
sistema EIFFEL 
EIFFEL para 
para detalhes 
detalhes relacionados 
relacionados com 
com a 
a construção 
construção de 
de um 
um arquivoACE 
arquivoACE . 
. A 
A rotina 
rotina inicio 
inicio contém 
contém somente 
somente uma 
uma única 
única linha 
linha executável 
executável de 
de código 
código , 
, io.put_string 
io.put_string ( 
( “ 
“ Meu 
Meu nome 
nome e 
e ’ 
’ xxx 
xxx ” 
” ) 
) onde 
onde o 
o usuário 
usuário deve 
deve substituir 
substituir o 
o “ 
“ xxx 
xxx ” 
” com 
com seu 
seu nome 
nome . 
. O 
O objetoio 
objetoio é 
é definido 
definido em 
em uma 
uma biblioteca 
biblioteca padrão 
padrão de 
de entrada 
entrada e 
e saída 
saída de 
de dados 
dados disponível 
disponível em 
em todos 
todos os 
os sitemas 
sitemas Eiffel 
Eiffel . 
. Esta 
Esta biblioteca 
biblioteca é 
é um 
um importante 
importante componente 
componente reusável 
reusável de 
de software 
software . 
. A 
A rotina 
rotina putstring 
putstring é 
é uma 
uma das 
das muitas 
muitas rotinas 
rotinas definidas 
definidas nesta 
nesta biblioteca 
biblioteca . 
. Ela 
Ela permite 
permite ao 
ao usuário 
usuário mostrar 
mostrar uma 
uma “ 
“ string 
string ” 
” ( 
( de 
de caracteres 
caracteres ) 
) no 
no terminal 
terminal de 
de vídeo 
vídeo . 
. Uma 
Uma “ 
“ string 
string ” 
” é 
é uma 
uma seqüência 
seqüência de 
de caracteres 
caracteres . 
. # 
# pg029 
pg029 # 
# nt055 
nt055 # 
# cm00 
cm00 # 
# Os 
Os detalhes 
detalhes formais 
formais para 
para escrita 
escrita de 
de programas 
programas em 
em Eiffel 
Eiffel e 
e o 
o uso 
uso das 
das bibliotecas 
bibliotecas existentes 
existentes nele 
nele estão 
estão introduzidos 
introduzidos no 
no capítulo 
capítulo 3 
3 . 
. Contudo 
Contudo o 
o leitor 
leitor pode 
pode querer 
querer digitar 
digitar o 
o código 
código da 
da listagem 
listagem 2.1 
2.1 , 
, compilar 
compilar e 
e executá-lo 
executá-lo . 
. É 
É muito 
muito emocionante 
emocionante quando 
quando o 
o primeiro 
primeiro programa 
programa de 
de alguém 
alguém é 
é completado 
completado com 
com sucesso 
sucesso . 
. O 
O autor 
autor da 
da listagem 
listagem 2.1 
2.1 agiu 
agiu como 
como um 
um consumidor 
consumidor . 
. O 
O recurso 
recurso que 
que ele 
ele consumiu 
consumiu , 
, ou 
ou utilizou 
utilizou , 
, foi 
foi a 
a biblioteca 
biblioteca padrão 
padrão de 
de entrada 
entrada e 
e saída 
saída de 
de dados 
dados . 
. Em 
Em capítulos 
capítulos posteriores 
posteriores você 
você verá 
verá como 
como inspecionar 
inspecionar a 
a interface 
interface das 
das bibliotecas 
bibliotecas e 
e como 
como usar 
usar seus 
seus recursos 
recursos . 
. Do 
Do começo 
começo ao 
ao fim 
fim deste 
deste livro 
livro serão 
serão usadas 
usadas rotinas 
rotinas importante 
importante de 
de bibliotecas 
bibliotecas importantes 
importantes do 
do Eiffel 
Eiffel na 
na construção 
construção de 
de aplicações 
aplicações específicas 
específicas . 
. Você 
Você também 
também deverá 
deverá verá 
verá o 
o processo 
processo de 
de criação 
criação de 
de rotinas 
rotinas para 
para uso 
uso por 
por outras 
outras pessoas 
pessoas . 
. Deve-se 
Deve-se tornar 
tornar um 
um consumidor 
consumidor competente 
competente antes 
antes de 
de se 
se tornar 
tornar um 
um produtor 
produtor competente 
competente . 
. Vários 
Vários capítulos 
capítulos posteriores 
posteriores enfatizam 
enfatizam as 
as responsabilidades 
responsabilidades do 
do produtor 
produtor . 
. 2.6 
2.6 Modelagem 
Modelagem de 
de objetos 
objetos Modelagem 
Modelagem de 
de objetos 
objetos é 
é envolve 
envolve análise 
análise edesign 
edesign . 
. Por 
Por causa 
causa da 
da natureza 
natureza introdutória 
introdutória deste 
deste livro 
livro , 
, somente 
somente os 
os conceitos 
conceitos fundamentais 
fundamentais dedesigne 
dedesigne análise 
análise de 
de objetos 
objetos serão 
serão explorados 
explorados nesta 
nesta sessão 
sessão . 
. 2.6.1 
2.6.1 Análise 
Análise Análise 
Análise desoftware 
desoftware , 
, tanto 
tanto orientado 
orientado por 
por objeto 
objeto ou 
ou não 
não , 
, envolve 
envolve entendimento 
entendimento e 
e modelagem 
modelagem do 
do problema 
problema . 
. Os 
Os principais 
principais elementos 
elementos do 
do problema 
problema são 
são mapeados 
mapeados em 
em componentes 
componentes de 
de software 
software . 
. A 
A arquitetura 
arquitetura inicial 
inicial destes 
destes componentes 
componentes desoftwareé 
desoftwareé construída 
construída de 
de maneira 
maneira precisa 
precisa , 
, descrevendo 
descrevendo as 
as conexões 
conexões que 
que existem 
existem entre 
entre várias 
várias entidades 
entidades do 
do problema 
problema . 
. No 
No contexto 
contexto da 
da orientação 
orientação por 
por objeto 
objeto essas 
essas entidades 
entidades são 
são objetos 
objetos , 
, cada 
cada um 
um é 
é uma 
uma instância 
instância de 
de classe 
classe particular 
particular . 
. A 
A análises 
análises orientada 
orientada por 
por objetos 
objetos envolve 
envolve a 
a descoberta 
descoberta de 
de classes 
classes importantes 
importantes e 
e suas 
suas conexões 
conexões com 
com outras 
outras classes 
classes importantes 
importantes . 
. Como 
Como discutido 
discutido anteriormente 
anteriormente , 
, cada 
cada classe 
classe encapsula 
encapsula um 
um modelo 
modelo de 
de dados 
dados e 
e um 
um conjunto 
conjunto de 
de serviços 
serviços associados 
associados . 
. Estes 
Estes serviços 
serviços representam 
representam o 
o modelo 
modelo de 
de comportamento 
comportamento das 
das classes 
classes . 
. Muito 
Muito do 
do trabalho 
trabalho de 
de análise 
análise orientada 
orientada por 
por objeto 
objeto envolve 
envolve determinar 
determinar o 
o modelo 
modelo de 
de dados 
dados e 
e comportamento 
comportamento de 
de cada 
cada classe 
classe . 
. A 
A arquitetura 
arquitetura estática 
estática , 
, desenvolvida 
desenvolvida no 
no nível 
nível de 
de análise 
análise , 
, é 
é dada 
dada pelas 
pelas associações 
associações entre 
entre classes 
classes . 
. Essas 
Essas associações 
associações incluem 
incluem relações 
relações de 
de associação 
associação ( 
( todo 
todo / 
/ parte 
parte essencial 
essencial ) 
) relação 
relação de 
de uso 
uso e 
e relações 
relações de 
de generalização 
generalização / 
/ especialização 
especialização ( 
( herança 
herança ) 
) . 
. Essas 
Essas relações 
relações são 
são discutidas 
discutidas e 
e ilustradas 
ilustradas a 
a seguir 
seguir . 
. # 
# pg030 
pg030 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# 2.6.1.1 
2.6.1.1 Relação 
Relação de 
de associação 
associação Uma 
Uma relação 
relação de 
de associação 
associação é 
é uma 
uma relação 
relação “ 
“ todo 
todo / 
/ parte 
parte essencial 
essencial ” 
” ou 
ou “ 
“ intrínseca 
intrínseca ” 
” . 
. O 
O objeto 
objeto “ 
“ inteiro 
inteiro ” 
” é 
é “ 
“ composto 
composto da 
da parte 
parte ” 
” . 
. Essa 
Essa parte 
parte deve 
deve ser 
ser essencial 
essencial para 
para a 
a integridade 
integridade do 
do todo 
todo . 
. A 
A relação 
relação de 
de associaçãoé 
associaçãoé um 
um tipo 
tipo natural 
natural de 
de associação 
associação . 
. Muitos 
Muitos dos 
dos objetos 
objetos ao 
ao seu 
seu redor 
redor são 
são compostos 
compostos de 
de partes 
partes constituintes 
constituintes . 
. Por 
Por exemplo 
exemplo , 
, seu 
seu monitor 
monitor é 
é composto 
composto por 
por uma 
uma capa 
capa de 
de plástico 
plástico , 
, um 
um tubo 
tubo de 
de vídeo 
vídeo e 
e botões 
botões de 
de controle 
controle ou 
ou teclas 
teclas . 
. Cada 
Cada uma 
uma dessas 
dessas partes 
partes constituintes 
constituintes são 
são essenciais 
essenciais para 
para o 
o funcionamento 
funcionamento do 
do monitor 
monitor . 
. O 
O motor 
motor em 
em um 
um carro 
carro pode 
pode ser 
ser considerado 
considerado a 
a ser 
ser uma 
uma parte 
parte essencial 
essencial do 
do carro 
carro . 
. Embora 
Embora podendo 
podendo certamente 
certamente ser 
ser argumentado 
argumentado que 
que o 
o motor 
motor tem 
tem uma 
uma identidade 
identidade própria 
própria ( 
( até 
até o 
o seu 
seu próprio 
próprio número 
número de 
de série 
série ) 
) , 
, pode 
pode ser 
ser produzido 
produzido em 
em local 
local separado 
separado e 
e pode 
pode ser 
ser colocado 
colocado dentro 
dentro e 
e fora 
fora de 
de carros 
carros , 
, pela 
pela maioria 
maioria das 
das aplicações 
aplicações o 
o carro 
carro é 
é associado 
associado com 
com um 
um motor 
motor particular 
particular que 
que não 
não será 
será mudado 
mudado . 
. Além 
Além disso 
disso , 
, o 
o funcionamento 
funcionamento do 
do carro 
carro é 
é totalmente 
totalmente dependente 
dependente da 
da presença 
presença de 
de um 
um motor 
motor . 
. A 
A partir 
partir desse 
desse ponto 
ponto de 
de vista 
vista , 
, a 
a identidade 
identidade de 
de um 
um carro 
carro ( 
( o 
o objeto 
objeto inteiro 
inteiro ) 
) não 
não é 
é separado 
separado do 
do motor 
motor ( 
( a 
a parte 
parte constituinte 
constituinte e 
e essencial 
essencial ) 
) . 
. O 
O sistema 
sistema de 
de transmissão 
transmissão do 
do carro 
carro poderia 
poderia também 
também ser 
ser considerado 
considerado uma 
uma parte 
parte essencial 
essencial do 
do carro 
carro . 
. Alguém 
Alguém poderia 
poderia , 
, portanto 
portanto , 
, dizer 
dizer que 
que o 
o carro 
carro ( 
( o 
o todo 
todo ) 
) tem 
tem uma 
uma relação 
relação de 
de associação 
associação com 
com o 
o motor 
motor e 
e a 
a transmissão 
transmissão ( 
( as 
as partes 
partes ) 
) . 
. Há 
Há , 
, é 
é claro 
claro , 
, muitos 
muitos outros 
outros componentes 
componentes essenciais 
essenciais do 
do carro 
carro que 
que não 
não foram 
foram citados 
citados . 
. Num 
Num anel 
anel de 
de diamante 
diamante , 
, é 
é justo 
justo argumentar 
argumentar que 
que o 
o anel 
anel ( 
( o 
o objeto 
objeto todo 
todo ) 
) tem 
tem uma 
uma relação 
relação de 
de associação 
associação com 
com suas 
suas partes 
partes essenciais 
essenciais , 
, um 
um aro 
aro de 
de ouro 
ouro e 
e uma 
uma pedra 
pedra de 
de diamante 
diamante . 
. Embora 
Embora cada 
cada uma 
uma possa 
possa ser 
ser produzida 
produzida separadamente 
separadamente , 
, de 
de um 
um ponto 
ponto de 
de vista 
vista de 
de modelo 
modelo a 
a identidade 
identidade d 
d aro 
aro de 
de ouro 
ouro e 
e da 
da pedra 
pedra de 
de diamante 
diamante não 
não é 
é crítica 
crítica . 
. O 
O que 
que é 
é crítico 
crítico é 
é a 
a identidade 
identidade de 
de todo 
todo o 
o objeto 
objeto , 
, o 
o anel 
anel . 
. A 
A notação 
notação deBoochpara 
deBoochpara uma 
uma relação 
relação de 
de associação 
associação é 
é mostrada 
mostrada na 
na figura 
figura 2.9 
2.9 . 
. A 
A classe 
classe com 
com o 
o retângulo 
retângulo escuro 
escuro é 
é a 
a “ 
“ parte 
parte ” 
” e 
e a 
a classe 
classe com 
com o 
o círculo 
círculo escuro 
escuro é 
é o 
o “ 
“ todo 
todo ” 
” . 
. Relação 
Relação de 
de associação 
associação # 
# pg031 
pg031 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# 2.6.1.2 
2.6.1.2 Relação 
Relação de 
de Uso 
Uso Como 
Como exemplo 
exemplo de 
de uma 
uma relação 
relação de 
de uso 
uso , 
, tomemos 
tomemos uma 
uma sala 
sala , 
, algumas 
algumas mesas 
mesas e 
e cadeiras 
cadeiras . 
. A 
A sala 
sala tem 
tem uma 
uma identidade 
identidade sem 
sem suas 
suas mesas 
mesas e 
e cadeiras 
cadeiras . 
. A 
A sala 
sala ainda 
ainda existe 
existe mesmo 
mesmo quando 
quando está 
está vazia 
vazia . 
. As 
As mesas 
mesas e 
e cadeiras 
cadeiras podem 
podem ser 
ser mudadas 
mudadas , 
, rearranjadas 
rearranjadas , 
, trocadas 
trocadas , 
, ou 
ou facilmente 
facilmente removidas 
removidas . 
. A 
A notação 
notação de 
de Booch 
Booch para 
para uma 
uma relação 
relação de 
de uso 
uso é 
é mostrada 
mostrada na 
na figura 
figura 2.10 
2.10 . 
. Aqui 
Aqui uma 
uma sala 
sala é 
é mostrada 
mostrada tendo 
tendo um 
um relacionamento 
relacionamento de 
de uso 
uso para 
para zero 
zero ou 
ou mais 
mais cadeiras 
cadeiras e 
e zero 
zero ou 
ou mais 
mais mesas 
mesas . 
. Relação 
Relação de 
de Uso 
Uso 2.6.1.3 
2.6.1.3 Relação 
Relação de 
de Herança 
Herança Herança 
Herança é 
é um 
um contexto 
contexto de 
de programa 
programa orientado 
orientado por 
por objeto 
objeto que 
que implica 
implica em 
em especialização 
especialização . 
. Uma 
Uma classe 
classe pai 
pai define 
define atributos 
atributos gerais 
gerais e 
e comportamento 
comportamento que 
que são 
são compartilhadas 
compartilhadas pelas 
pelas suas 
suas crianças 
crianças . 
. Cada 
Cada classe 
classe criança 
criança contém 
contém atributos 
atributos ou 
ou comportamento 
comportamento ( 
( serviços 
serviços ) 
) mais 
mais especializados 
especializados que 
que não 
não estão 
estão presentes 
presentes no 
no pai 
pai . 
. Por 
Por exemplo 
exemplo , 
, um 
um carro 
carro pode 
pode ser 
ser considerado 
considerado outro 
outro tipo 
tipo especial 
especial de 
de veículo 
veículo . 
. Um 
Um carro 
carro e 
e um 
um avião 
avião podem 
podem compartilhar 
compartilhar certos 
certos atributos 
atributos ( 
( cor 
cor , 
, peso 
peso , 
, preço 
preço ) 
) mas 
mas têm 
têm atributos 
atributos separados 
separados ( 
( número 
número de 
de pistões 
pistões para 
para um 
um carro 
carro , 
, envergadura 
envergadura de 
de asa 
asa para 
para um 
um avião 
avião ) 
) . 
. A 
A notação 
notação de 
de Booch 
Booch para 
para herança 
herança é 
é mostrada 
mostrada na 
na Figura 
Figura 2.11 
2.11 usando 
usando as 
as classes 
classes VEICULO 
VEICULO , 
, CARRO 
CARRO e 
e AVIAO 
AVIAO . 
. As 
As setas 
setas apontam 
apontam da 
da criança 
criança ao 
ao pai 
pai ( 
( na 
na direção 
direção da 
da generalização 
generalização ) 
) . 
. Relação 
Relação de 
de Herança 
Herança # 
# pg032 
pg032 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# 2.6.2 
2.6.2 Análise 
Análise de 
de um 
um elevador 
elevador Discutiremos 
Discutiremos alguns 
alguns elementos 
elementos simples 
simples da 
da análise 
análise orientada 
orientada por 
por objeto 
objeto de 
de um 
um elevador 
elevador em 
em um 
um prédio 
prédio comercial 
comercial . 
. Quais 
Quais são 
são os 
os aspectos 
aspectos relevantes 
relevantes para 
para o 
o problema 
problema ? 
? Existe 
Existe , 
, é 
é claro 
claro , 
, um 
um elevador 
elevador . 
. Existe 
Existe um 
um conjunto 
conjunto de 
de botões 
botões , 
, cada 
cada um 
um com 
com um 
um número 
número indicando 
indicando um 
um andar 
andar em 
em particular 
particular do 
do prédio 
prédio comercial 
comercial . 
. O 
O elevador 
elevador é 
é pintado 
pintado com 
com uma 
uma certa 
certa cor 
cor . 
. Mas 
Mas isto 
isto certamente 
certamente não 
não é 
é relevante 
relevante para 
para o 
o funcionamento 
funcionamento de 
de um 
um elevador 
elevador e 
e não 
não será 
será incluído 
incluído no 
no modelo 
modelo de 
de análise 
análise . 
. Finalmente 
Finalmente , 
, existe 
existe um 
um usuário 
usuário , 
, um 
um ser 
ser humano 
humano que 
que entra 
entra no 
no elevador 
elevador e 
e deseja 
deseja ser 
ser transportado 
transportado para 
para outro 
outro andar 
andar , 
, tanto 
tanto superior 
superior quanto 
quanto inferior 
inferior , 
, no 
no prédio 
prédio comercial 
comercial . 
. Baseado 
Baseado na 
na descrição 
descrição do 
do problema 
problema , 
, existe 
existe uma 
uma relação 
relação todo/parte 
todo/parte entre 
entre o 
o elevador 
elevador e 
e seus 
seus botões 
botões . 
. Cada 
Cada elevador 
elevador tem 
tem um 
um conjunto 
conjunto de 
de botões 
botões que 
que contêm 
contêm todos 
todos os 
os locais 
locais onde 
onde o 
o elevador 
elevador pode 
pode ir 
ir . 
. Estas 
Estas são 
são as 
as partes 
partes essenciais 
essenciais de 
de um 
um elevador 
elevador . 
. Na 
Na Figura 
Figura 2.12 
2.12 , 
, um 
um simples 
simples diagrama 
diagrama de 
de classe 
classe exibindo 
exibindo a 
a classe 
classe ELEVADOR 
ELEVADOR e 
e a 
a classe 
classe BOTÃO 
BOTÃO , 
, é 
é mostrado 
mostrado . 
. Diagrama 
Diagrama de 
de classe 
classe paraelevador 
paraelevador Cada 
Cada nuvem 
nuvem pontilhada 
pontilhada representa 
representa uma 
uma classe 
classe . 
. O 
O nome 
nome de 
de classe 
classe é 
é dado 
dado dentro 
dentro da 
da nuvem 
nuvem . 
. Como 
Como indicado 
indicado anteriormente 
anteriormente , 
, a 
a reta 
reta com 
com um 
um ponto 
ponto em 
em seu 
seu começo 
começo , 
, que 
que une 
une a 
a classe 
classe ELEVADOR 
ELEVADOR à 
à classe 
classe BOTAO 
BOTAO , 
, indica 
indica uma 
uma relação 
relação todo/parte 
todo/parte ou 
ou uma 
uma relação 
relação de 
de associação 
associação . 
. A 
A classe 
classe com 
com o 
o ponto 
ponto “ 
“ tem 
tem ” 
” ou 
ou “ 
“ é 
é composta 
composta ” 
” da 
da classe 
classe que 
que não 
não tem 
tem o 
o ponto 
ponto . 
. A 
A notação 
notação , 
, 1 
1 .. 
.. n 
n , 
, no 
no final 
final da 
da linha 
linha indica 
indica que 
que existe 
existe um 
um ou 
ou mais 
mais botões 
botões que 
que são 
são partes 
partes do 
do elevador 
elevador . 
. O 
O quadrado 
quadrado no 
no final 
final desta 
desta linha 
linha indica 
indica que 
que a 
a classe 
classe ELEVADOR 
ELEVADOR contém 
contém um 
um conjunto 
conjunto de 
de botões 
botões ( 
( eles 
eles não 
não são 
são compartilhados 
compartilhados por 
por quaisquer 
quaisquer outros 
outros objetos 
objetos ) 
) . 
. Quando 
Quando uma 
uma pessoa 
pessoa entra 
entra em 
em um 
um elevador 
elevador , 
, ele 
ele ou 
ou ela 
ela aperta 
aperta um 
um botão 
botão . 
. Esta 
Esta ação 
ação é 
é mostrada 
mostrada no 
no diagrama 
diagrama de 
de cenário 
cenário de 
de objeto 
objeto dado 
dado na 
na Figura 
Figura 2.13 
2.13 . 
. Cada 
Cada nuvem 
nuvem sólida 
sólida representa 
representa um 
um objeto 
objeto especifico 
especifico com 
com um 
um nome 
nome dado 
dado dentro 
dentro da 
da nuvem 
nuvem . 
. Os 
Os números 
números seguidos 
seguidos de 
de dois 
dois pontos 
pontos representam 
representam a 
a seqüência 
seqüência das 
das ações 
ações . 
. Os 
Os três 
três eventos 
eventos que 
que são 
são mostrados 
mostrados na 
na Figura 
Figura 2.13 
2.13 são 
são : 
: ( 
( 1 
1 ) 
) uma 
uma pessoa 
pessoa entra 
entra no 
no elevador 
elevador , 
, ( 
( 2 
2 ) 
) a 
a pessoa 
pessoa escolhe 
escolhe um 
um dos 
dos vários 
vários botões 
botões , 
, e 
e ( 
( 3 
3 ) 
) a 
a pessoa 
pessoa aperta 
aperta este 
este botão 
botão escolhido 
escolhido . 
. # 
# pg033 
pg033 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# Diagrama 
Diagrama de 
de cenário 
cenário de 
de objetos 
objetos para 
para uma 
uma pessoa 
pessoa entrando 
entrando no 
no elevador 
elevador . 
. O 
O primeiro 
primeiro evento 
evento , 
, uma 
uma pessoa 
pessoa entrando 
entrando no 
no elevador 
elevador , 
, é 
é descrito 
descrito na 
na figura 
figura 2.13 
2.13 pelo 
pelo objetouma_pessoamandando 
objetouma_pessoamandando a 
a mensagementrar 
mensagementrar para 
para o 
o objetoum_elevador 
objetoum_elevador . 
. O 
O segundo 
segundo evento 
evento na 
na figura 
figura 2.13 
2.13 é 
é exibido 
exibido pelo 
pelo objetouma_pessoamandando 
objetouma_pessoamandando a 
a mensagemselecionar_botãopara 
mensagemselecionar_botãopara uma 
uma coleção 
coleção de 
de objetosbotões 
objetosbotões , 
, mostrado 
mostrado por 
por três 
três nuvens 
nuvens . 
. O 
O botão 
botão selecionado 
selecionado é 
é mostrado 
mostrado com 
com o 
o nomebotao_selecionado 
nomebotao_selecionado . 
. O 
O terceiro 
terceiro evento 
evento exibido 
exibido é 
é o 
o objetouma_pessoaenviando 
objetouma_pessoaenviando a 
a mensagemapertar 
mensagemapertar para 
para o 
o objetobotao_selecionado 
objetobotao_selecionado . 
. 2.6.3 
2.6.3 Projeto 
Projeto Se 
Se alguém 
alguém olha 
olha para 
para o 
o problema 
problema ao 
ao fazer 
fazer uma 
uma análise 
análise , 
, deve 
deve olhar 
olhar para 
para a 
a solução 
solução quando 
quando faz 
faz o 
o projeto 
projeto . 
. A 
A solução 
solução é 
é um 
um sistema 
sistema desoftwarecontendo 
desoftwarecontendo vários 
vários objetos 
objetos que 
que interagem 
interagem uns 
uns com 
com os 
os outros 
outros . 
. Cada 
Cada objeto 
objeto é 
é tipicamente 
tipicamente definido 
definido por 
por uma 
uma classe 
classe . 
. Durante 
Durante o 
o projeto 
projeto , 
, identifica-se 
identifica-se precisamente 
precisamente classes 
classes adicionais 
adicionais que 
que interagem 
interagem com 
com classes 
classes principais 
principais identificadas 
identificadas na 
na análise 
análise para 
para completar 
completar uma 
uma solução 
solução para 
para o 
o problema 
problema . 
. A 
A natureza 
natureza preliminar 
preliminar deste 
deste livro 
livro o 
o faz 
faz impróprio 
impróprio para 
para detalhar 
detalhar a 
a fase 
fase de 
de projeto 
projeto . 
. # 
# pg034 
pg034 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# 2.7 
2.7 Sumário 
Sumário • 
• Objetos 
Objetos ordinários 
ordinários são 
são caracterizados 
caracterizados por 
por seus 
seus comportamentos 
comportamentos assim 
assim como 
como seus 
seus atributos 
atributos . 
. • 
• Parece 
Parece que 
que os 
os seres 
seres humanos 
humanos possuem 
possuem uma 
uma habilidade 
habilidade natural 
natural de 
de classificar 
classificar objetos 
objetos . 
. Nós 
Nós chamaremos 
chamaremos essas 
essas classificações 
classificações de 
de classes 
classes . 
. • 
• A 
A palavra 
palavra “ 
“ instância 
instância ” 
” será 
será usada 
usada para 
para significar 
significar um 
um objeto 
objeto cujas 
cujas propriedades 
propriedades são 
são descritas 
descritas numa 
numa classe 
classe . 
. • 
• A 
A descrição 
descrição de 
de um 
um objeto 
objeto , 
, a 
a abstração 
abstração do 
do objeto 
objeto , 
, é 
é baseada 
baseada no 
no domínio 
domínio do 
do problema 
problema no 
no qual 
qual o 
o objeto 
objeto existe 
existe . 
. • 
• Uma 
Uma abstração 
abstração representa 
representa uma 
uma descrição 
descrição simplificada 
simplificada da 
da realidade 
realidade . 
. • 
• As 
As características 
características do 
do objeto 
objeto que 
que são 
são essenciais 
essenciais para 
para se 
se achar 
achar uma 
uma solução 
solução do 
do problema 
problema dado 
dado deve 
deve ser 
ser representada 
representada no 
no modelo 
modelo do 
do objeto 
objeto ( 
( a 
a classe 
classe ) 
) assim 
assim como 
como características 
características que 
que não 
não são 
são essenciais 
essenciais devem 
devem ser 
ser ignoradas 
ignoradas . 
. • 
• Coad 
Coad e 
e Yourdon 
Yourdon definem 
definem um 
um objeto 
objeto como 
como “ 
“ uma 
uma abstração 
abstração de 
de algo 
algo no 
no domínio 
domínio de 
de um 
um problema 
problema , 
, refletindo 
refletindo a 
a capacidade 
capacidade de 
de um 
um sistema 
sistema de 
de manter 
manter informação 
informação sobre 
sobre ou 
ou interagir 
interagir com 
com ele 
ele ; 
; um 
um encapsulamento 
encapsulamento de 
de atributos 
atributos e 
e seus 
seus serviços 
serviços exclusivos 
exclusivos . 
. • 
• O 
O modelo 
modelo de 
de dados 
dados fornece 
fornece uma 
uma precisa 
precisa especificação 
especificação de 
de qual 
qual informação 
informação é 
é mantida 
mantida em 
em cada 
cada objeto 
objeto . 
. • 
• O 
O modelo 
modelo de 
de comportamento 
comportamento fornece 
fornece uma 
uma precisa 
precisa especificação 
especificação dos 
dos comandos 
comandos que 
que podem 
podem ser 
ser realizados 
realizados no 
no objeto 
objeto . 
. • 
• Um 
Um objeto 
objeto recebendo 
recebendo uma 
uma ação 
ação é 
é conectado 
conectado à 
à operação 
operação nesse 
nesse objeto 
objeto usando 
usando um 
um conector 
conector ponto 
ponto ( 
( “ 
“ . 
. ” 
” ) 
) . 
. • 
• Um 
Um diagrama 
diagrama de 
de classe 
classe é 
é usado 
usado para 
para descrever 
descrever a 
a arquitetura 
arquitetura estática 
estática do 
do sistema 
sistema de 
de software 
software . 
. • 
• Um 
Um diagrama 
diagrama de 
de cenário 
cenário de 
de objeto 
objeto é 
é usado 
usado para 
para descrever 
descrever as 
as interações 
interações dinâmicas 
dinâmicas entre 
entre objetos 
objetos . 
. • 
• Um 
Um serviço 
serviço específico 
específico pode 
pode ter 
ter um 
um ou 
ou mais 
mais parâmetros 
parâmetros , 
, cada 
cada um 
um de 
de tipo 
tipo específico 
específico . 
. Isso 
Isso fornece 
fornece uma 
uma entrada 
entrada externa 
externa ao 
ao serviço 
serviço que 
que ajuda 
ajuda a 
a determinar 
determinar a 
a ação 
ação realizada 
realizada pelo 
pelo serviço 
serviço . 
. • 
• Ciência 
Ciência em 
em geral 
geral e 
e ciência 
ciência da 
da computação 
computação em 
em particular 
particular envolve 
envolve modelagem 
modelagem e 
e compreensão 
compreensão de 
de sistemas 
sistemas . 
. # 
# pg035 
pg035 # 
# nt065 
nt065 # 
# cm00 
cm00 # 
# • 
• Sistemas 
Sistemas orientados 
orientados por 
por objetos 
objetos envolvem 
envolvem muitos 
muitos objetos 
objetos de 
de tipos 
tipos diferentes 
diferentes trabalhando 
trabalhando juntos 
juntos para 
para alcançar 
alcançar , 
, de 
de alguma 
alguma maneira 
maneira , 
, um 
um objetivo 
objetivo desejado 
desejado . 
. • 
• O 
O processo 
processo de 
de classificação 
classificação pode 
pode ser 
ser usado 
usado para 
para gerenciar 
gerenciar complexidade 
complexidade . 
. • 
• Sempre 
Sempre que 
que um 
um grupo 
grupo de 
de objetos 
objetos diferentes 
diferentes , 
, mas 
mas relacionados 
relacionados de 
de alguma 
alguma maneira 
maneira , 
, precisarem 
precisarem ser 
ser modelados 
modelados , 
, uma 
uma cuidadosa 
cuidadosa consideração 
consideração de 
de suas 
suas semelhanças 
semelhanças e 
e diferenças 
diferenças pode 
pode levar 
levar a 
a uma 
uma hierarquia 
hierarquia de 
de classes 
classes . 
. • 
• Atributos 
Atributos que 
que são 
são compartilhados 
compartilhados por 
por muitas 
muitas subclasses 
subclasses devem 
devem ser 
ser postos 
postos em 
em classes 
classes no 
no topo 
topo da 
da hierarquia 
hierarquia . 
. • 
• A 
A base 
base fundamental 
fundamental para 
para classificação 
classificação é 
é geralmente 
geralmente baseada 
baseada na 
na distribuição 
distribuição e 
e reunião 
reunião de 
de atributos 
atributos ( 
( isto 
isto é 
é , 
, um 
um modelo 
modelo de 
de dados 
dados ) 
) • 
• A 
A subclasse 
subclasse deve 
deve ter 
ter um 
um relacionamento 
relacionamento lógico 
lógico com 
com sua 
sua classe 
classe mãe 
mãe , 
, que 
que possa 
possa ser 
ser expressa 
expressa como 
como “ 
“ a 
a subclasse 
subclasse é 
é um 
um tipo 
tipo de 
de ” 
” da 
da classe 
classe mãe 
mãe . 
. • 
• Os 
Os atributos 
atributos da 
da classe 
classe mãe 
mãe devem 
devem todos 
todos fazer 
fazer sentido 
sentido como 
como parte 
parte do 
do estado 
estado da 
da subclasse 
subclasse . 
. • 
• Todos 
Todos serviços 
serviços da 
da classe 
classe mãe 
mãe devem 
devem fazer 
fazer sentido 
sentido como 
como parte 
parte do 
do comportamento 
comportamento da 
da subclasse 
subclasse . 
. • 
• Os 
Os objetos 
objetos em 
em nossa 
nossa volta 
volta geralmente 
geralmente são 
são feitos 
feitos a 
a partir 
partir de 
de outros 
outros objetos 
objetos mais 
mais simples 
simples . 
. • 
• Um 
Um tipo 
tipo abstrato 
abstrato de 
de dados 
dados ( 
( TAD 
TAD ) 
) é 
é um 
um modelo 
modelo de 
de dados 
dados e 
e um 
um conjunto 
conjunto associado 
associado de 
de operações 
operações que 
que podem 
podem ser 
ser feitas 
feitas no 
no modelo 
modelo de 
de dados 
dados . 
. • 
• Os 
Os tipos 
tipos abstratos 
abstratos de 
de dados 
dados fornecem 
fornecem poderosas 
poderosas abstrações 
abstrações que 
que podem 
podem ser 
ser usadas 
usadas como 
como base 
base para 
para resolver 
resolver problemas 
problemas . 
. • 
• Torna-se 
Torna-se sem 
sem importância 
importância o 
o interior 
interior dos 
dos TADs 
TADs quando 
quando decidimos 
decidimos como 
como eles 
eles vão 
vão interagir 
interagir entre 
entre si 
si . 
. Somente 
Somente as 
as propriedades 
propriedades externas 
externas do 
do TAD 
TAD ( 
( definidas 
definidas por 
por um 
um conjunto 
conjunto de 
de operações 
operações ) 
) são 
são importantes 
importantes na 
na determinação 
determinação de 
de seu 
seu uso 
uso . 
. • 
• Os 
Os tipos 
tipos abstratos 
abstratos de 
de dados 
dados são 
são representados 
representados por 
por classes 
classes em 
em linguagens 
linguagens orientadas 
orientadas por 
por objetos 
objetos . 
. • 
• O 
O termo 
termo “ 
“ omissão 
omissão de 
de dados 
dados ” 
” é 
é usado 
usado para 
para dizer 
dizer que 
que o 
o modelo 
modelo de 
de dados 
dados ( 
( estado 
estado interno 
interno ) 
) de 
de um 
um TAD 
TAD não 
não pode 
pode ser 
ser acessado 
acessado diretamente 
diretamente pelo 
pelo usuário 
usuário . 
. O 
O estado 
estado interno 
interno só 
só pode 
pode ser 
ser modificado 
modificado através 
através de 
de um 
um conjunto 
conjunto de 
de operações 
operações pré- 
pré- definidas 
definidas . 
. • 
• Um 
Um produtor 
produtor é 
é um 
um programador 
programador cujo 
cujo objetivo 
objetivo principal 
principal é 
é a 
a construção 
construção de 
de uma 
uma biblioteca 
biblioteca de 
de classes 
classes para 
para outros 
outros programadores 
programadores ou 
ou outras 
outras partes 
partes de 
de um 
um aplicativo 
aplicativo . 
. # 
# pg036 
pg036 # 
# nt000 
nt000 # 
# cm00 
cm00 # 
# # 
# pg037 
pg037 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# • 
• Desenhe 
Desenhe um 
um diagrama 
diagrama de 
de Booch 
Booch de 
de uma 
uma hierarquia 
hierarquia de 
de veículos 
veículos . 
. A 
A classe 
classe raiz 
raiz nesta 
nesta hierarquia 
hierarquia deverá 
deverá ser 
ser a 
a classe 
classe VEICULO 
VEICULO . 
. Indique 
Indique os 
os atributos 
atributos associados 
associados a 
a cada 
cada classe 
classe na 
na sua 
sua hierarquia 
hierarquia de 
de veículos 
veículos . 
. Os 
Os dois 
dois primeiros 
primeiros elementos 
elementos do 
do princípio 
princípio de 
de consistência 
consistência estão 
estão satisfeitos 
satisfeitos na 
na sua 
sua hierarquia 
hierarquia ? 
? Explique 
Explique em 
em detalhes 
detalhes . 
. • 
• Acrescente 
Acrescente alguns 
alguns métodos 
métodos ( 
( comportamento 
comportamento ) 
) para 
para cada 
cada classe 
classe em 
em sua 
sua hierarquia 
hierarquia veículo 
veículo do 
do problema 
problema anterior 
anterior . 
. O 
O terceiro 
terceiro elemento 
elemento do 
do princípio 
princípio de 
de consistência 
consistência foi 
foi satisfeito 
satisfeito para 
para sua 
sua hierarquia 
hierarquia ? 
? • 
• Desenhe 
Desenhe um 
um diagrama 
diagrama de 
de Booch 
Booch que 
que descreve 
descreve as 
as classes 
classes que 
que modelam 
modelam uma 
uma sala 
sala de 
de aula 
aula universitária 
universitária . 
. Inclua 
Inclua os 
os estudantes 
estudantes , 
, professor 
professor , 
, monitor 
monitor , 
, e 
e qualquer 
qualquer outra 
outra coisa 
coisa que 
que você 
você puder 
puder pensar 
pensar . 
. Mostre 
Mostre as 
as relações 
relações que 
que estes 
estes objetos 
objetos têm 
têm um 
um com 
com o 
o outro 
outro em 
em seu 
seu diagrama 
diagrama de 
de classe 
classe . 
. • 
• Ilustre 
Ilustre o 
o princípio 
princípio decomposição 
decomposição construindo 
construindo uma 
uma classe 
classe que 
que é 
é composta 
composta de 
de outros 
outros objetos 
objetos . 
. Desenhe 
Desenhe um 
um diagrama 
diagrama de 
de Booch 
Booch de 
de sua 
sua classe 
classe . 
. • 
• Descreva 
Descreva os 
os passos 
passos fundamentais 
fundamentais envolvendo 
envolvendo o 
o ato 
ato de 
de escrever 
escrever um 
um cheque 
cheque pessoal 
pessoal usando 
usando um 
um diagrama 
diagrama de 
de cenário 
cenário de 
de objeto 
objeto de 
de Booch 
Booch . 
. Mostre 
Mostre todos 
todos os 
os objetos 
objetos envolvidos 
envolvidos em 
em seu 
seu cenário 
cenário e 
e a 
a sucessão 
sucessão de 
de mensagens 
mensagens enviadas 
enviadas a 
a cada 
cada objeto 
objeto . 
. Descreva 
Descreva com 
com suas 
suas próprias 
próprias palavras 
palavras o 
o significado 
significado de 
de seu 
seu diagrama 
diagrama . 
. • 
• Mostre 
Mostre as 
as associações 
associações apropriadas 
apropriadas entre 
entre as 
as classes 
classes que 
que descrevem 
descrevem as 
as entidades 
entidades seguintes 
seguintes : 
: tulipa 
tulipa , 
, rosa 
rosa , 
, flor 
flor , 
, pétala 
pétala , 
, abelha 
abelha , 
, vaso 
vaso de 
de flor 
flor . 
. • 
• Mostre 
Mostre as 
as associações 
associações apropriadas 
apropriadas entre 
entre as 
as classes 
classes que 
que descrevem 
descrevem as 
as entidades 
entidades seguintes 
seguintes : 
: motocicleta 
motocicleta , 
, bicicleta 
bicicleta , 
, carro 
carro , 
, barco 
barco , 
, hidroavião 
hidroavião , 
, avião 
avião , 
, avião 
avião a 
a jato 
jato , 
, planador 
planador e 
e mobilete 
mobilete . 
. • 
• Mostre 
Mostre as 
as associações 
associações apropriadas 
apropriadas entre 
entre as 
as classes 
classes que 
que descrevem 
descrevem as 
as entidades 
entidades seguintes 
seguintes : 
: biblioteca 
biblioteca , 
, livros 
livros , 
, fichário 
fichário , 
, estantes 
estantes , 
, seções 
seções de 
de estantes 
estantes , 
, e 
e usuários 
usuários . 
. • 
• Mostre 
Mostre as 
as associações 
associações apropriadas 
apropriadas entre 
entre as 
as classes 
classes que 
que descrevem 
descrevem as 
as entidades 
entidades seguintes 
seguintes : 
: universidade 
universidade , 
, salas 
salas de 
de aula 
aula , 
, estudantes 
estudantes , 
, professores 
professores , 
, quadro-negro 
quadro-negro , 
, escrivaninhas 
escrivaninhas , 
, terminais 
terminais de 
de computador 
computador , 
, cadeiras 
cadeiras , 
, cadernos 
cadernos , 
, e 
e cursos 
cursos . 
. Se 
Se você 
você desejar 
desejar acrescentar 
acrescentar algumas 
algumas entidades 
entidades adicionais 
adicionais para 
para enriquecer 
enriquecer sua 
sua modelagem 
modelagem de 
de objetos 
objetos , 
, sinta-se 
sinta-se livre 
livre para 
para fazer 
fazer isto 
isto . 
. Indique 
Indique para 
para toda 
toda classe 
classe adicional 
adicional seu 
seu propósito 
propósito e 
e mostre 
mostre sua 
sua associação 
associação com 
com as 
as classes 
classes especificadas 
especificadas acima 
acima . 
. # 
# pg038 
pg038 # 
# ntnnn 
ntnnn # 
# cm00 
cm00 # 
# # 
# pg039 
pg039 # 
# nt085 
nt085 # 
# cm00 
cm00 # 
# 3 
3 Os 
Os Elementos 
Elementos Básicos 
Básicos de 
de Programas 
Programas de 
de Eiffel 
Eiffel 3.1 
3.1 Programando 
Programando Nós 
Nós começaremos 
começaremos a 
a programar 
programar neste 
neste capítulo 
capítulo . 
. Um 
Um sistema 
sistema de 
de software 
software é 
é uma 
uma coleção 
coleção interconectada 
interconectada de 
de unidades 
unidades algumas 
algumas vezes 
vezes chamadas 
chamadas módulos 
módulos . 
. Cada 
Cada módulo 
módulo contém 
contém um 
um conjunto 
conjunto logicamente 
logicamente coerente 
coerente de 
de operações 
operações e 
e um 
um modelo 
modelo de 
de dados 
dados subjacente 
subjacente ( 
( que 
que está 
está por 
por trás 
trás das 
das operações 
operações ) 
) . 
. Em 
Em um 
um contexto 
contexto de 
de orientação 
orientação por 
por objetos 
objetos , 
, um 
um módulo 
módulo é 
é o 
o mesmo 
mesmo que 
que uma 
uma classe 
classe : 
: uma 
uma unificação 
unificação de 
de um 
um modelo 
modelo de 
de dados 
dados e 
e comportamento 
comportamento consistindo 
consistindo em 
em um 
um conjunto 
conjunto de 
de funções 
funções chamadas 
chamadas consultas 
consultas e 
e comandos 
comandos que 
que podem 
podem acessar 
acessar e 
e manipular 
manipular as 
as informações 
informações contidas 
contidas no 
no modelo 
modelo de 
de dados 
dados . 
. A 
A princípio 
princípio cada 
cada módulo 
módulo representa 
representa um 
um pedaço 
pedaço potencialmente 
potencialmente reutilizável 
reutilizável de 
de código 
código . 
. Um 
Um ponto 
ponto de 
de vista 
vista de 
de `` 
`` sistemas 
sistemas '' 
'' é 
é bem 
bem diferente 
diferente do 
do ponto 
ponto de 
de vista 
vista de 
de um 
um `` 
`` programa 
programa '' 
'' monolítico 
monolítico mais 
mais tradicional 
tradicional . 
. Usando 
Usando a 
a abordagem 
abordagem do 
do `` 
`` programa 
programa '' 
'' , 
, todo 
todo o 
o comportamento 
comportamento desejado 
desejado do 
do software 
software deve 
deve ser 
ser embutido 
embutido e 
e considerado 
considerado para 
para a 
a única 
única entidade 
entidade ( 
( seu 
seu programa 
programa ) 
) . 
. Usando 
Usando a 
a abordagem 
abordagem de 
de `` 
`` sistemas 
sistemas '' 
'' , 
, cada 
cada módulo 
módulo é 
é responsável 
responsável por 
por apenas 
apenas uma 
uma pequena 
pequena , 
, mas 
mas bem 
bem enfocada 
enfocada porção 
porção do 
do comportamento 
comportamento desejado 
desejado do 
do software 
software . 
. Linguagens 
Linguagens de 
de programação 
programação mais 
mais modernas 
modernas , 
, inclusive 
inclusive Eiffel 
Eiffel , 
, favorecem 
favorecem uma 
uma abordagem 
abordagem de 
de `` 
`` sistemas 
sistemas '' 
'' para 
para construção 
construção desoftware 
desoftware . 
. Esta 
Esta é 
é a 
a abordagem 
abordagem que 
que nós 
nós tomaremos 
tomaremos desde 
desde o 
o começo 
começo . 
. Usando 
Usando esta 
esta abordagem 
abordagem , 
, nosso 
nosso primeiro 
primeiro programa 
programa de 
de Eiffel 
Eiffel que 
que se 
se denomina 
denomina `` 
`` Meu 
Meu primeiro 
primeiro programa 
programa '' 
'' é 
é dado 
dado na 
na listagem 
listagem 3.1 
3.1 . 
. Para 
Para se 
se ajustar 
ajustar com 
com o 
o mais 
mais recente 
recente padrão 
padrão de 
de formatação 
formatação Eiffel 
Eiffel , 
, todos 
todos os 
os caracteres 
caracteres são 
são escritos 
escritos em 
em itálico 
itálico e 
e em 
em adição 
adição , 
, palavras 
palavras reservadas 
reservadas na 
na linguagem 
linguagem são 
são escritas 
escritas em 
em tipo 
tipo negrito. 
negrito. # 
# pg040 
pg040 # 
# nt075 
nt075 # 
# cm00 
cm00 # 
# A 
A indentação 
indentação também 
também segue 
segue o 
o padrão 
padrão de 
de formatação 
formatação Eiffel 
Eiffel . 
. Primeiro 
Primeiro programa 
programa em 
em Eiffel 
Eiffel class 
class APLICAÇÃO 
APLICAÇÃO creation 
creation comece 
comece feature 
feature comece 
comece is 
is do 
do io.put_string 
io.put_string ( 
( `` 
`` meu 
meu primeiro 
primeiro programa 
programa '' 
'' ) 
) io.new_line 
io.new_line end 
end end 
end -- 
-- class 
class APLICAÇÃO 
APLICAÇÃO Os 
Os dois 
dois comandos 
comandos de 
de saída 
saída , 
, put_stringe 
put_stringe new_linequando 
new_linequando enviados 
enviados para 
para o 
o objeto 
objeto padrão 
padrão de 
de entrada 
entrada e 
e saída 
saída ( 
( o 
o objetoio 
objetoio ) 
) fazem 
fazem com 
com que 
que astring 
astring “ 
“ meu 
meu primeiro 
primeiro programa 
programa ” 
” , 
, seja 
seja exibida 
exibida na 
na saída 
saída padrão 
padrão ( 
( seu 
seu monitor 
monitor de 
de vídeo 
vídeo ) 
) com 
com a 
a posição 
posição do 
do cursor 
cursor movida 
movida para 
para a 
a próxima 
próxima linha 
linha . 
. Como 
Como a 
a saída 
saída e 
e entrada 
entrada de 
de dados 
dados são 
são necessárias 
necessárias e 
e são 
são padrão 
padrão , 
, o 
o objetoio 
objetoio não 
não precisa 
precisa ser 
ser declarado 
declarado explicitamente 
explicitamente . 
. Sua 
Sua existência 
existência ocorre 
ocorre por 
por padrão 
padrão , 
, em 
em todas 
todas as 
as aplicações 
aplicações em 
em Eiffell 
Eiffell . 
. Mesmo 
Mesmo para 
para ser 
ser capaz 
capaz de 
de escrever 
escrever este 
este simples 
simples programa 
programa , 
, o 
o programador 
programador deve 
deve ter 
ter algum 
algum conhecimento 
conhecimento dos 
dos serviços 
serviços de 
de saída 
saída de 
de dados 
dados na 
na classe 
classe STANDARD_FILES 
STANDARD_FILES . 
. Um 
Um resumo 
resumo destes 
destes serviços 
serviços pode 
pode ser 
ser obtido 
obtido usando 
usando uma 
uma ferramenta 
ferramenta chamadashort 
chamadashort . 
. Esta 
Esta ferramenta 
ferramenta retira 
retira todos 
todos os 
os detalhes 
detalhes de 
de implementação 
implementação e 
e revela 
revela somente 
somente a 
a informação 
informação de 
de interface 
interface que 
que poderia 
poderia ser 
ser relevante 
relevante para 
para o 
o uso 
uso desta 
desta classe 
classe . 
. A 
A listagem 
listagem 3.2 
3.2 mostra 
mostra parte 
parte destes 
destes detalhes 
detalhes de 
de interface 
interface usando 
usando o 
o resultado 
resultado da 
da aplicação 
aplicação doshort 
doshort na 
na classe 
classe . 
. Somente 
Somente as 
as rotinas 
rotinas de 
de saída 
saída de 
de dados 
dados contidas 
contidas nesta 
nesta classe 
classe são 
são mostradas 
mostradas , 
, Elas 
Elas proporcionam 
proporcionam meios 
meios para 
para que 
que o 
o programador 
programador possa 
possa imprimir 
imprimir caracteres 
caracteres , 
, inteiros 
inteiros , 
, frações 
frações decimais 
decimais ( 
( números 
números do 
do tipo 
tipo ponto 
ponto flutuante 
flutuante ) 
) , 
, strings 
strings e 
e valores 
valores booleanos 
booleanos . 
. Partes 
Partes da 
da interface 
interface da 
da classe 
classe STANDARD_FILES 
STANDARD_FILES . 
. class 
class interface 
interface STANDARD_FILES 
STANDARD_FILES feature 
feature specification 
specification -- 
-- rotinas 
rotinas de 
de saída 
saída # 
# pg041 
pg041 # 
# nt090 
nt090 # 
# cm 
cm vários 
vários erros 
erros de 
de formatação 
formatação # 
# put_char 
put_char ( 
( c 
c : 
: CHARACTER 
CHARACTER ) 
) -- 
-- Escreve 
Escreve ‘ 
‘ c 
c ’ 
’ no 
no fim 
fim da 
da saída 
saída default 
default . 
. put_string 
put_string ( 
( s 
s : 
: STRING 
STRING ) 
) -- 
-- Escreve 
Escreve ‘ 
‘ s 
s ’ 
’ no 
no fim 
fim da 
da saída 
saída default 
default . 
. put_real 
put_real ( 
( r 
r : 
: REAL 
REAL ) 
) -- 
-- Escreve 
Escreve ‘ 
‘ r 
r ’ 
’ no 
no fim 
fim da 
da saída 
saída default 
default . 
. put_double 
put_double ( 
( d 
d : 
: DOUBLE 
DOUBLE ) 
) -- 
-- Escreve 
Escreve ‘ 
‘ d 
d ’ 
’ no 
no fim 
fim da 
da saída 
saída default 
default . 
. put_int 
put_int ( 
( i 
i : 
: INTEGER 
INTEGER ) 
) -- 
-- Escreve 
Escreve ‘ 
‘ i 
i ’ 
’ no 
no fim 
fim da 
da saída 
saída default 
default . 
. put_bool 
put_bool ( 
( b 
b : 
: BOOLEAN 
BOOLEAN ) 
) -- 
-- Escreve 
Escreve ‘ 
‘ b 
b ’ 
’ no 
no fim 
fim da 
da saída 
saída default 
default . 
. new_line 
new_line -- 
-- Escreve 
Escreve mudança 
mudança de 
de linha 
linha no 
no fim 
fim da 
da saída 
saída default 
default . 
. -- 
-- Muitas 
Muitas rotinas 
rotinas não 
não exibidas 
exibidas . 
. end 
end interface 
interface – 
– classe 
classe STANDARD_FILES 
STANDARD_FILES A 
A classeAPLICAÇÃO 
classeAPLICAÇÃO na 
na Listagem 
Listagem 3.1 
3.1 serve 
serve para 
para iniciar 
iniciar a 
a execução 
execução do 
do software 
software . 
. Ela 
Ela é 
é a 
a classe 
classe raiz 
raiz da 
da aplicação 
aplicação . 
. Todos 
Todos os 
os softwares 
softwares Eiffel 
Eiffel devem 
devem estar 
estar acompanhados 
acompanhados de 
de um 
um arquivoAce 
arquivoAce que 
que especifica 
especifica onde 
onde estão 
estão os 
os arquivo 
arquivo das 
das bibliotecas 
bibliotecas padrão 
padrão , 
, os 
os arquivos 
arquivos gerados 
gerados pelo 
pelo programador 
programador que 
que constituem 
constituem a 
a aplicação 
aplicação dada 
dada , 
, o 
o nome 
nome da 
da classe 
classe raiz 
raiz , 
, e 
e o 
o nome 
nome da 
da rotina 
rotina de 
de criação 
criação dentro 
dentro da 
da classe 
classe raiz 
raiz . 
. O 
O arquivo 
arquivo Ace 
Ace que 
que controla 
controla a 
a aplicação 
aplicação dada 
dada na 
na Listagem 
Listagem 3.1 
3.1 é 
é mostrado 
mostrado na 
na Listagem 
Listagem 3.3 
3.3 . 
. Arquivo 
Arquivo Ace 
Ace para 
para Listagem 
Listagem 3.1 
3.1 ( 
( Usando 
Usando sistema 
sistema ISE 
ISE Eiffel 
Eiffel 3 
3 ) 
) system 
system test 
test root 
root aplication 
aplication ( 
( ROOT_CLUSTER 
ROOT_CLUSTER ) 
) : 
: “ 
“ comece 
comece ” 
” default 
default assertion 
assertion ( 
( all 
all ) 
) ; 
; precompiled 
precompiled ( 
( “ 
“ $ 
$ EIFFEL3/precomp/spec/ 
EIFFEL3/precomp/spec/ $ 
$ PLATFORM/base 
PLATFORM/base ” 
” ) 
) cluster 
cluster ROOT_CLUSTER 
ROOT_CLUSTER : 
: “ 
“ /disk2/EIFFELWORK3/WORK 
/disk2/EIFFELWORK3/WORK ” 
” ; 
; end 
end # 
# pg042 
pg042 # 
# nt085 
nt085 # 
# cm 
cm erro 
erro no 
no layout 
layout # 
# O 
O Leitor 
Leitor pode 
pode querer 
querer consultar 
consultar o 
o manual 
manual de 
de instruções 
instruções que 
que vem 
vem junto 
junto com 
com o 
o sistema 
sistema Eiffel 
Eiffel para 
para maiores 
maiores detalhes 
detalhes a 
a respeito 
respeito de 
de arquivos 
arquivos Ace 
Ace . 
. 3.2 
3.2 A 
A linguagem 
linguagem Eiffel 
Eiffel A 
A linguagem 
linguagem nasceu 
nasceu no 
no final 
final dos 
dos anos 
anos 80 
80 . 
. É 
É uma 
uma linguagem 
linguagem totalmente 
totalmente orientada 
orientada por 
por objeto 
objeto . 
. Isto 
Isto implica 
implica que 
que as 
as funções 
funções podem 
podem ser 
ser chamadas 
chamadas somente 
somente através 
através de 
de objetos 
objetos e 
e não 
não sozinhas 
sozinhas , 
, como 
como entidades 
entidades lógicas 
lógicas auto-suficientes 
auto-suficientes . 
. O 
O que 
que é 
é um 
um contraste 
contraste evidente 
evidente para 
para a 
a popular 
popular , 
, mas 
mas complexa 
complexa linguagem 
linguagem orientada 
orientada por 
por objetos 
objetos C++ 
C++ que 
que admite 
admite uma 
uma mistura 
mistura de 
de programação 
programação orientada 
orientada por 
por objetos 
objetos e 
e estruturada 
estruturada na 
na mesma 
mesma aplicação 
aplicação , 
, sendo 
sendo denominada 
denominada linguagem 
linguagem híbrida 
híbrida . 
. Como 
Como uma 
uma linguagem 
linguagem totalmente 
totalmente orientada 
orientada por 
por objeto 
objeto , 
, a 
a classe 
classe em 
em Eiffel 
Eiffel é 
é a 
a unidade 
unidade básica 
básica lógica 
lógica do 
do encapsulamento 
encapsulamento bem 
bem como 
como a 
a unidade 
unidade básica 
básica física 
física , 
, um 
um módulo 
módulo . 
. Um 
Um programa 
programa em 
em Eiffel 
Eiffel é 
é organizado 
organizado como 
como um 
um conjunto 
conjunto de 
de classes 
classes interligadas 
interligadas e 
e cooperando 
cooperando entre 
entre si 
si . 
. Nas 
Nas diversas 
diversas seções 
seções seguintes 
seguintes os 
os elementos 
elementos básicos 
básicos da 
da programação 
programação em 
em Eiffel 
Eiffel serão 
serão apresentados 
apresentados . 
. Muitos 
Muitos desses 
desses elementos 
elementos são 
são similares 
similares aos 
aos de 
de outras 
outras linguagens 
linguagens . 
. O 
O projetista 
projetista do 
do Eiffel 
Eiffel , 
, Bertrand 
Bertrand Meyer 
Meyer , 
, tem 
tem sido 
sido um 
um grande 
grande estudioso 
estudioso da 
da tecnologia 
tecnologia de 
de linguagens 
linguagens de 
de programação 
programação e 
e projetou 
projetou uma 
uma sintaxe 
sintaxe que 
que utiliza 
utiliza algumas 
algumas das 
das melhores 
melhores características 
características encontradas 
encontradas nas 
nas outras 
outras linguagens 
linguagens . 
. Acredito 
Acredito que 
que você 
você irá 
irá achar 
achar a 
a sintaxe 
sintaxe do 
do Eiffel 
Eiffel coerente 
coerente , 
, lógica 
lógica e 
e legível 
legível . 
. 3.3 
3.3 Criando 
Criando e 
e destruindo 
destruindo objetos 
objetos Programas 
Programas são 
são constituídos 
constituídos de 
de classe 
classe que 
que criam 
criam objetos 
objetos . 
. Estes 
Estes objetos 
objetos são 
são criados 
criados , 
, realizam 
realizam suas 
suas tarefas 
tarefas , 
, e 
e são 
são normalmente 
normalmente destruídos 
destruídos . 
. Quando 
Quando um 
um objeto 
objeto é 
é criado 
criado , 
, um 
um espaço 
espaço na 
na memória 
memória é 
é reservado 
reservado para 
para seu 
seu armazenamento 
armazenamento . 
. Quando 
Quando o 
o mesmo 
mesmo é 
é destruído 
destruído o 
o espaço 
espaço reservado 
reservado é 
é liberado 
liberado e 
e poderá 
poderá ser 
ser reutilizado 
reutilizado por 
por outros 
outros objetos 
objetos criados 
criados depois 
depois . 
. Um 
Um objeto 
objeto em 
em Eiffel 
Eiffel , 
, e 
e nas 
nas outras 
outras linguagens 
linguagens orientadas 
orientadas por 
por objetos 
objetos , 
, é 
é uma 
uma instância 
instância de 
de uma 
uma classe 
classe . 
. Seus 
Seus atributos 
atributos são 
são dados 
dados por 
por um 
um modelo 
modelo de 
de dados 
dados de 
de sua 
sua classe 
classe . 
. Os 
Os comandos 
comandos que 
que ele 
ele pode 
pode responder 
responder ( 
( as 
as rotinas 
rotinas que 
que se 
se pode 
pode solicitar 
solicitar através 
através dele 
dele ) 
) são 
são especificados 
especificados por 
por um 
um conjunto 
conjunto de 
de rotinas 
rotinas dadas 
dadas na 
na descrição 
descrição da 
da classe 
classe . 
. Antes 
Antes de 
de um 
um objeto 
objeto ser 
ser criado 
criado no 
no Eiffel 
Eiffel , 
, ele 
ele deve 
deve ser 
ser declarado 
declarado para 
para se 
se tornar 
tornar uma 
uma variável 
variável de 
de um 
um certo 
certo tipo 
tipo . 
. Este 
Este tipo 
tipo é 
é o 
o nome 
nome da 
da classe 
classe da 
da qual 
qual o 
o objeto 
objeto será 
será uma 
uma instância 
instância ( 
( depois 
depois de 
de criado 
criado ) 
) . 
. Quando 
Quando uma 
uma declaração 
declaração de 
de tipo 
tipo em 
em Eiffel 
Eiffel como 
como , 
, meu_carro 
meu_carro : 
: CARRO 
CARRO , 
, é 
é dada 
dada , 
, o 
o compilador 
compilador verifica 
verifica se 
se a 
a classe 
classe referida 
referida foi 
foi definida 
definida . 
. Normalmente 
Normalmente o 
o arquivo 
arquivo que 
que define 
define a 
a classe 
classe deve 
deve estar 
estar no 
no mesmo 
mesmo subdiretório 
subdiretório da 
da classe 
classe na 
na qual 
qual a 
a declaração 
declaração existe 
existe . 
. # 
# pg043 
pg043 # 
# nt070 
nt070 # 
# cm 
cm vários 
vários erros 
erros de 
de identação 
identação na 
na listagem 
listagem # 
# A 
A declaraçãomeu_carro 
declaraçãomeu_carro : 
: CARRO 
CARRO não 
não cria 
cria uma 
uma instância 
instância da 
da classe 
classe CARRO 
CARRO . 
. Nenhuma 
Nenhuma memória 
memória é 
é reservada 
reservada para 
para o 
o objetomeu_carro 
objetomeu_carro , 
, como 
como em 
em qualquer 
qualquer outro 
outro objeto 
objeto que 
que foi 
foi apenas 
apenas declarado 
declarado , 
, assumindo 
assumindo o 
o valor 
valor Void 
Void ( 
( que 
que significa 
significa vazio 
vazio ) 
) . 
. Neste 
Neste estado 
estado , 
, o 
o objeto 
objeto não 
não pode 
pode receber 
receber qualquer 
qualquer comando 
comando ou 
ou efetuar 
efetuar nenhuma 
nenhuma tarefa 
tarefa proveitosa 
proveitosa . 
. Normalmente 
Normalmente , 
, parameu_carrose 
parameu_carrose tornar 
tornar uma 
uma instância 
instância da 
da classe 
classe CARRO 
CARRO e 
e ter 
ter um 
um região 
região de 
de memória 
memória corretamente 
corretamente alocada 
alocada para 
para si 
si , 
, uma 
uma rotina 
rotina de 
de criação 
criação ou 
ou um 
um operador 
operador de 
de criação 
criação deve 
deve ser 
ser usado 
usado . 
. Considere 
Considere o 
o caso 
caso onde 
onde a 
a classe 
classe CARRO 
CARRO não 
não tem 
tem nenhuma 
nenhuma rotina 
rotina de 
de criação 
criação especificada 
especificada . 
. O 
O que 
que poderia 
poderia fazer 
fazer o 
o objetomeu_carroexistir 
objetomeu_carroexistir ( 
( ou 
ou seja 
seja , 
, reservar 
reservar um 
um local 
local de 
de armazenamento 
armazenamento para 
para ele 
ele ) 
) poderia 
poderia ser 
ser usar 
usar o 
o seguinte 
seguinte operador 
operador de 
de criação 
criação : 
: ! 
! ! 
! meu_carro 
meu_carro . 
. O 
O resultado 
resultado desta 
desta expressão 
expressão é 
é a 
a criação 
criação de 
de um 
um local 
local para 
para armazenarmeu_carro 
armazenarmeu_carro , 
, mas 
mas sem 
sem providenciar 
providenciar qualquer 
qualquer inicialização 
inicialização dos 
dos atributos 
atributos que 
que podem 
podem ser 
ser definidos 
definidos na 
na classe 
classe CARRO 
CARRO . 
. Desta 
Desta maneira 
maneira , 
, alguns 
alguns atributos 
atributos , 
, como 
como aqueles 
aqueles declarados 
declarados como 
como sendo 
sendo do 
do tipo 
tipo INTEGER 
INTEGER , 
, REAL 
REAL , 
, BOOLEAN 
BOOLEAN ou 
ou CHARACTER 
CHARACTER , 
, assumem 
assumem inicialmente 
inicialmente valores 
valores padrão 
padrão ( 
( nulos 
nulos ) 
) . 
. Considere 
Considere outro 
outro caso 
caso onde 
onde a 
a classe 
classe CARRO 
CARRO providencie 
providencie três 
três rotinas 
rotinas de 
de criação 
criação : 
: criar 
criar , 
, montare 
montare construir 
construir . 
. Uma 
Uma parte 
parte da 
da classe 
classe CARRO 
CARRO é 
é a 
a seguinte 
seguinte : 
: class 
class CARRO 
CARRO creation 
creation criar 
criar , 
, montar 
montar , 
, construir 
construir feature 
feature criar 
criar ( 
( cor 
cor : 
: STRING 
STRING ; 
; preço 
preço : 
: REAL 
REAL ; 
; peso 
peso : 
: INTEGER 
INTEGER ) 
) is 
is -- 
-- Detalhes 
Detalhes não 
não mostrados 
mostrados end 
end -- 
-- criar 
criar montar 
montar ( 
( cor 
cor : 
: STRING 
STRING ; 
; preço 
preço : 
: REAL 
REAL ; 
; peso 
peso : 
: INTEGER 
INTEGER ; 
; potencia 
potencia : 
: INTEGER 
INTEGER ) 
) is 
is -- 
-- Detalhes 
Detalhes não 
não mostrados 
mostrados end 
end -- 
-- montar 
montar construir 
construir ( 
( cor 
cor : 
: STRING 
STRING ) 
) is 
is -- 
-- Detalhes 
Detalhes não 
não mostrados 
mostrados end 
end -- 
-- construir 
construir Algumas 
Algumas expressões 
expressões que 
que poderiam 
poderiam criar 
criar o 
o objetomeu_carroincluem 
objetomeu_carroincluem : 
: ! 
! ! 
! meu_carro.criar 
meu_carro.criar ( 
( “ 
“ Branco 
Branco ” 
” , 
, 25600 
25600 , 
, 3100 
3100 ) 
) ! 
! ! 
! meu_carro.montar 
meu_carro.montar ( 
( “ 
“ Vermelho 
Vermelho ” 
” , 
, 12000 
12000 , 
, 3500 
3500 , 
, 125 
125 ) 
) ! 
! ! 
! meu_carro.construir 
meu_carro.construir ( 
( “ 
“ Azul 
Azul ” 
” ) 
) # 
# pg044 
pg044 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Em 
Em todas 
todas as 
as três 
três expressões 
expressões acima 
acima , 
, o 
o objetomeu_carroé 
objetomeu_carroé criado 
criado e 
e inicializado 
inicializado com 
com os 
os valores 
valores dados 
dados como 
como parâmetros 
parâmetros nas 
nas várias 
várias rotinas 
rotinas de 
de criação 
criação . 
. No 
No primeiro 
primeiro caso 
caso dado 
dado acima 
acima ( 
( ! 
! ! 
! meu_carro 
meu_carro ) 
) meu_carroé 
meu_carroé criado 
criado mas 
mas os 
os atributos 
atributos assumem 
assumem seus 
seus valores 
valores padrão 
padrão . 
. Deveria 
Deveria ficar 
ficar claro 
claro nessa 
nessa discussão 
discussão que 
que objetos 
objetos devem 
devem ser 
ser explicitamente 
explicitamente criados 
criados ou 
ou usando 
usando o 
o operador 
operador de 
de criação 
criação ( 
( ! 
! ! 
! ) 
) na 
na frente 
frente do 
do objeto 
objeto que 
que você 
você deseja 
deseja criar 
criar ou 
ou usando 
usando uma 
uma rotina 
rotina de 
de criação 
criação específica 
específica em 
em conjunto 
conjunto com 
com o 
o operador 
operador de 
de criação 
criação , 
, como 
como mostrado 
mostrado nos 
nos três 
três exemplos 
exemplos acima 
acima . 
. Como 
Como os 
os objetos 
objetos de 
de Eiffel 
Eiffel são 
são destruídos 
destruídos ? 
? Os 
Os sistemas 
sistemas Eiffel 
Eiffel proporcionam 
proporcionam “ 
“ coleta 
coleta automática 
automática de 
de lixo 
lixo ” 
” ( 
( garbage 
garbage collection 
collection ) 
) . 
. À 
À medida 
medida que 
que um 
um aplicativo 
aplicativo Eiffel 
Eiffel roda 
roda , 
, um 
um processo 
processo de 
de coleta 
coleta de 
de lixo 
lixo está 
está rodando 
rodando em 
em segundo 
segundo plano 
plano e 
e detectando 
detectando quando 
quando uma 
uma região 
região de 
de memória 
memória não 
não está 
está mais 
mais ligada 
ligada a 
a um 
um nome 
nome de 
de variável 
variável . 
. Em 
Em um 
um momento 
momento oportuno 
oportuno o 
o processo 
processo de 
de coleta 
coleta de 
de lixo 
lixo recicla 
recicla ( 
( efetivamente 
efetivamente destrói 
destrói ) 
) o 
o armazenamento 
armazenamento desnecessário 
desnecessário . 
. O 
O seguinte 
seguinte segmento 
segmento de 
de código 
código mostra 
mostra um 
um exemplo 
exemplo de 
de um 
um armazenamento 
armazenamento que 
que não 
não é 
é mais 
mais necessário 
necessário : 
: meu_carro 
meu_carro : 
: CARRO 
CARRO ! 
! ! 
! meu_carro.construir 
meu_carro.construir ( 
( “ 
“ Azul 
Azul ” 
” ) 
) ! 
! ! 
! meu_carro.construir 
meu_carro.construir ( 
( “ 
“ Vermelho 
Vermelho ” 
” ) 
) A 
A sentença 
sentença , 
, ! 
! ! 
! meu_carro.construir 
meu_carro.construir ( 
( “ 
“ Azul 
Azul ” 
” ) 
) , 
, faz 
faz com 
com que 
que o 
o armazenamento 
armazenamento de 
de memória 
memória seja 
seja alocado 
alocado e 
e o 
o nome 
nome do 
do objetomeu_carroanexado 
objetomeu_carroanexado a 
a esse 
esse armazenamento 
armazenamento . 
. A 
A terceira 
terceira sentença 
sentença , 
, ! 
! ! 
! meu_carro.construir 
meu_carro.construir ( 
( “ 
“ Vermelho 
Vermelho ” 
” ) 
) , 
, faz 
faz com 
com que 
que novo 
novo armazenamento 
armazenamento de 
de memória 
memória seja 
seja alocado 
alocado e 
e o 
o nome 
nome do 
do objetomeu_carro 
objetomeu_carro anexado 
anexado a 
a esse 
esse novo 
novo armazenamento 
armazenamento , 
, deixando 
deixando o 
o antigo 
antigo desanexado 
desanexado de 
de qualquer 
qualquer outro 
outro nome 
nome de 
de objeto 
objeto . 
. A 
A seqüência 
seqüência de 
de ações 
ações é 
é mostrada 
mostrada na 
na Figura 
Figura 3.1 
3.1 . 
. # 
# pg045 
pg045 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# Produção 
Produção de 
de Lixo 
Lixo . 
. A 
A seção 
seção de 
de memória 
memória destacada 
destacada que 
que contém 
contém “ 
“ Azul 
Azul ” 
” pode 
pode ser 
ser recuperada 
recuperada pelo 
pelo coletor 
coletor automático 
automático de 
de lixo 
lixo ( 
( garbage 
garbage collector 
collector ) 
) enquanto 
enquanto o 
o programa 
programa está 
está rodando 
rodando . 
. Não 
Não é 
é da 
da responsabilidade 
responsabilidade do 
do programador 
programador deEiffel 
deEiffel fazer 
fazer isto 
isto . 
. 3.4 
3.4 Tipos 
Tipos básicos 
básicos , 
, valores 
valores default 
default e 
e atribuições 
atribuições Existem 
Existem vários 
vários tipos 
tipos básicos 
básicos de 
de objetos 
objetos que 
que não 
não exigem 
exigem uma 
uma criação 
criação definida 
definida para 
para serem 
serem usados 
usados . 
. Os 
Os importantes 
importantes são 
são : 
: INTEGER 
INTEGER , 
, CHARACTER 
CHARACTER , 
, REAL 
REAL e 
e BOOLEAN 
BOOLEAN . 
. Considere 
Considere as 
as seguintes 
seguintes declarações 
declarações : 
: um_inteiro 
um_inteiro : 
: INTEGER 
INTEGER um_caracter 
um_caracter : 
: CHARACTER 
CHARACTER um_real 
um_real : 
: REAL 
REAL um_boolean 
um_boolean : 
: BOOLEAN 
BOOLEAN Cada 
Cada um 
um desses 
desses objetos 
objetos de 
de tipos 
tipos básicos 
básicos recebe 
recebe um 
um valordefaultque 
valordefaultque não 
não éVoid 
éVoid . 
. Objetos 
Objetos do 
do tipo 
tipo INTEGER 
INTEGER têm 
têm um 
um valordefault 
valordefault de 
de 0 
0 . 
. Objetos 
Objetos do 
do tipo 
tipo CHARACTER 
CHARACTER têm 
têm um 
um valordefault 
valordefault do 
do caracter 
caracter NULL 
NULL ( 
( valor 
valor ASCII 
ASCII 0 
0 ) 
) . 
. Objetos 
Objetos do 
do tipo 
tipo REAL 
REAL têm 
têm um 
um valordefaultde 
valordefaultde 0.0 
0.0 . 
. Finalmente 
Finalmente , 
, objetos 
objetos do 
do tipo 
tipo BOOLEAN 
BOOLEAN têm 
têm um 
um valor 
valor defaultdefalse 
defaultdefalse . 
. # 
# pg046 
pg046 # 
# nt030 
nt030 # 
# cm00 
cm00 # 
# Os 
Os tipos 
tipos básicos 
básicos apresentados 
apresentados na 
na seção 
seção anterior 
anterior têm 
têm significado 
significado de 
de valores 
valores . 
. Isto 
Isto implica 
implica que 
que a 
a declaração 
declaração de 
de tais 
tais objetos 
objetos causam 
causam alocação 
alocação automatica 
automatica de 
de memória 
memória e 
e atribuição 
atribuição de 
de valoresdefaultpara 
valoresdefaultpara eles 
eles . 
. Quando 
Quando um 
um tipo 
tipo básico 
básico de 
de objeto 
objeto ( 
( objeto 
objeto de 
de origem 
origem ) 
) , 
, é 
é atribuído 
atribuído para 
para outro 
outro tipo 
tipo básico 
básico de 
de objeto 
objeto ( 
( objeto 
objeto de 
de destino 
destino ) 
) , 
, este 
este reside 
reside numa 
numa região 
região de 
de memória 
memória diferente 
diferente de 
de onde 
onde está 
está o 
o objeto 
objeto de 
de origem 
origem . 
. O 
O operador 
operador de 
de atribuição 
atribuição do 
do Eiffel 
Eiffel é 
é “ 
“ : 
: = 
= ” 
” . 
. O 
O comando 
comando a 
a : 
: = 
= b 
b deve 
deve ser 
ser lido 
lido como 
como “ 
“ a 
a recebe 
recebe b 
b ” 
” . 
. A 
A figura 
figura 3.2 
3.2 mostra 
mostra a 
a atribuição 
atribuição entre 
entre dois 
dois objetos 
objetos do 
do tipo 
tipo inteiro 
inteiro . 
. Atribuição 
Atribuição de 
de objetos 
objetos de 
de tipos 
tipos básicos 
básicos 3.5 
3.5 Tipos 
Tipos de 
de objetos 
objetos ordinários 
ordinários ou 
ou de 
de referência 
referência . 
. Objetosordinários 
Objetosordinários ( 
( objetosnão 
objetosnão básicos 
básicos ) 
) tem 
tem semântica 
semântica de 
de referência 
referência . 
. Isso 
Isso implica 
implica que 
que o 
o programador 
programador é 
é responsável 
responsável pela 
pela alocação 
alocação de 
de memória 
memória através 
através de 
de um 
um operador 
operador de 
de criação 
criação , 
, possivelmente 
possivelmente junto 
junto com 
com uma 
uma rotina 
rotina de 
de criação 
criação como 
como foi 
foi discutido 
discutido na 
na seção 
seção 3.3 
3.3 . 
. O 
O valor 
valor defaultde 
defaultde um 
um objeto 
objeto ordinário 
ordinário éVoid 
éVoid . 
. Após 
Após o 
o programador 
programador alocar 
alocar um 
um espaço 
espaço na 
na memória 
memória para 
para um 
um objeto 
objeto , 
, o 
o nome 
nome do 
do objeto 
objeto é 
é anexado 
anexado àquela 
àquela região 
região de 
de memória 
memória ( 
( ver 
ver figura 
figura 3.1 
3.1 ) 
) O 
O que 
que significa 
significa atribuir 
atribuir um 
um objeto 
objeto ordinário 
ordinário a 
a outro 
outro ? 
? Considere 
Considere o 
o segmento 
segmento de 
de código 
código abaixo 
abaixo : 
: # 
# pg047 
pg047 # 
# nt050 
nt050 # 
# cm00 
cm00 # 
# meu_carro 
meu_carro : 
: CARRO 
CARRO seu_carro 
seu_carro : 
: CARRO 
CARRO ! 
! ! 
! meu_carro.criar 
meu_carro.criar ( 
( “ 
“ verde 
verde ” 
” ,1000,2000 
,1000,2000 ) 
) seu_carro 
seu_carro : 
: =meu_carro 
=meu_carro A 
A figura 
figura 3.3 
3.3 representa 
representa a 
a semântica 
semântica do 
do segmento 
segmento de 
de código 
código acima 
acima . 
. Atribuição 
Atribuição de 
de objetos 
objetos de 
de tipos 
tipos de 
de referência 
referência Depois 
Depois da 
da atribuição 
atribuição demeu_carroparaseu_carro 
demeu_carroparaseu_carro , 
, ambos 
ambos nomes 
nomes dos 
dos objetos 
objetos , 
, são 
são ligados 
ligados à 
à mesma 
mesma região 
região de 
de memória 
memória . 
. Isto 
Isto implica 
implica que 
que se 
se um 
um dos 
dos atributos 
atributos demeu_carrofor 
demeu_carrofor modificado 
modificado , 
, através 
através do 
do envio 
envio de 
de um 
um comando 
comando tal 
tal , 
, comomeu_carro.mudar_peso 
comomeu_carro.mudar_peso ( 
( 2500 
2500 ) 
) , 
, o 
o atributo 
atributo peso 
peso deseu_carro 
deseu_carro também 
também será 
será modificado 
modificado para 
para 2500 
2500 . 
. Não 
Não há 
há dois 
dois objetos 
objetos independentes 
independentes , 
, mas 
mas dois 
dois nomes 
nomes diferentes 
diferentes para 
para o 
o mesmo 
mesmo objeto 
objeto na 
na memória 
memória ( 
( só 
só um 
um objeto 
objeto existe 
existe na 
na memória 
memória do 
do computador 
computador ) 
) . 
. 3.6 
3.6 Copiando 
Copiando Objetos 
Objetos Supondo 
Supondo que 
que nos 
nos desejássemos 
desejássemos que 
que o 
o objetoseu_carroda 
objetoseu_carroda seção 
seção anterior 
anterior tivesse 
tivesse os 
os mesmos 
mesmos valores 
valores de 
de atributos 
atributos demeu_carro 
demeu_carro , 
, sendo 
sendo um 
um objeto 
objeto independente 
independente que 
que não 
não é 
é ligado 
ligado à 
à mesma 
mesma região 
região de 
de memória 
memória demeu_carro 
demeu_carro . 
. Suponha 
Suponha quemeu_carrotivesse 
quemeu_carrotivesse sido 
sido criado 
criado e 
e inicializado 
inicializado . 
. Isto 
Isto pode 
pode ser 
ser feito 
feito assim 
assim : 
: ( 
( 1 
1 ) 
) Crie 
Crie o 
o objetoseu_carroe 
objetoseu_carroe ( 
( 2 
2 ) 
) Use 
Use a 
a rotinacopy 
rotinacopy que 
que é 
é disponível 
disponível para 
para todos 
todos objetos 
objetos em 
em Eiffel 
Eiffel . 
. seu_carro.copy 
seu_carro.copy ( 
( meu_carro 
meu_carro ) 
) -- 
-- assume 
assume que 
que seu_carro 
seu_carro foi 
foi criado 
criado # 
# pg048 
pg048 # 
# nt050 
nt050 # 
# cm00 
cm00 # 
# É 
É essencial 
essencial que 
que o 
o objetoseu_carrojá 
objetoseu_carrojá tenha 
tenha sido 
sido associado 
associado à 
à uma 
uma região 
região de 
de memória 
memória para 
para a 
a rotinacopy 
rotinacopy trabalhar 
trabalhar . 
. Um 
Um erro 
erro de 
de tempo 
tempo de 
de execução 
execução será 
será criada 
criada e 
e um 
um erro 
erro será 
será relatado 
relatado se 
se você 
você invocar 
invocar a 
a rotinacopysobre 
rotinacopysobre um 
um objeto 
objeto vazio 
vazio ( 
( com 
com o 
o valorVoid 
valorVoid ) 
) . 
. A 
A semântica 
semântica da 
da rotinacopyé 
rotinacopyé mostrada 
mostrada na 
na figura 
figura 3.4 
3.4 . 
. Figura 
Figura 3.4 
3.4 . 
. Semântica 
Semântica da 
da cópia 
cópia . 
. 3.7 
3.7 Clonagem 
Clonagem Suponha 
Suponha que 
que você 
você deseja 
deseja alocar 
alocar memória 
memória paraseu_carroe 
paraseu_carroe ao 
ao mesmo 
mesmo tempo 
tempo você 
você pretende 
pretende copiar 
copiar os 
os valores 
valores dos 
dos atributos 
atributos demeu_carro 
demeu_carro para 
para seu_carro 
seu_carro . 
. Isto 
Isto pode 
pode ser 
ser realizado 
realizado usando 
usando a 
a rotinaclone 
rotinaclone disponível 
disponível para 
para todos 
todos objetos 
objetos Eiffel 
Eiffel . 
. Isto 
Isto pode 
pode ser 
ser feito 
feito da 
da seguinte 
seguinte maneira 
maneira : 
: seu_carro 
seu_carro : 
: =clone 
=clone ( 
( meu_carro 
meu_carro ) 
) A 
A semântica 
semântica da 
da rotinacloneestá 
rotinacloneestá mostrada 
mostrada na 
na figura 
figura 3.5 
3.5 . 
. # 
# pg049 
pg049 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# Semântica 
Semântica da 
da clonagem 
clonagem 3.8 
3.8 Operadores 
Operadores básicos 
básicos com 
com exemplos 
exemplos Operador 
Operador de 
de igualdade 
igualdade ( 
( = 
= ) 
) : 
: Dois 
Dois objetos 
objetos são 
são iguais 
iguais se 
se eles 
eles estão 
estão ligados 
ligados à 
à uma 
uma mesma 
mesma seção 
seção de 
de memória 
memória . 
. Se 
Se alguém 
alguém quiser 
quiser testar 
testar se 
se os 
os objetosx 
objetosx e 
e y 
y são 
são iguais 
iguais , 
, uma 
uma expressão 
expressão do 
do tipo 
tipo x=y 
x=y poderia 
poderia ser 
ser usada 
usada . 
. Exemplo 
Exemplo : 
: meu_valor 
meu_valor , 
, seu_valor 
seu_valor : 
: REAL 
REAL if 
if meu_valor=seu_valor 
meu_valor=seu_valor then 
then –- 
–- se 
se os 
os valores 
valores são 
são os 
os mesmos 
mesmos tome 
tome alguma 
alguma atitude 
atitude -- 
-- alguma 
alguma atitude 
atitude end 
end Operador 
Operador de 
de desigualdade 
desigualdade ( 
( /= 
/= ) 
) : 
: Para 
Para testar 
testar se 
se os 
os objetosx 
objetosx e 
e y 
y não 
não são 
são iguais 
iguais , 
, uma 
uma expressão 
expressão do 
do tipoif 
tipoif x/=y 
x/=y poderia 
poderia ser 
ser usada 
usada . 
. Exemplo 
Exemplo : 
: meu_valor 
meu_valor , 
, seu_valor 
seu_valor : 
: INTEGER 
INTEGER if 
if meu_valor/=seu_valor 
meu_valor/=seu_valor then 
then –- 
–- se 
se os 
os valores 
valores não 
não são 
são iguais 
iguais tome 
tome alguma 
alguma atitude 
atitude -- 
-- alguma 
alguma atitude 
atitude end 
end # 
# pg050 
pg050 # 
# ntnnn 
ntnnn # 
# cm00 
cm00 # 
# # 
# pg051 
pg051 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# \\ 
\\ ( 
( Operador 
Operador binário 
binário para 
para resto 
resto ) 
) Exemplo 
Exemplo : 
: a 
a , 
, b 
b , 
, c 
c : 
: INTEGER 
INTEGER b 
b : 
: =11 
=11 c 
c : 
: =4 
=4 a 
a : 
: =b\\c 
=b\\c -- 
-- valor 
valor é 
é 3 
3 < 
< ( 
( Operador 
Operador binário 
binário para 
para menor 
menor que 
que ) 
) Exemplo 
Exemplo : 
: b 
b , 
, c 
c : 
: INTEGER 
INTEGER b 
b : 
: =10 
=10 c 
c : 
: =4 
=4 if 
if b 
b < 
< c 
c then 
then -- 
-- realiza 
realiza alguma 
alguma ação 
ação apenas 
apenas se 
se b 
b é 
é menor 
menor que 
que c 
c -- 
-- alguma 
alguma ação 
ação end 
end < 
< = 
= ( 
( Operador 
Operador binário 
binário para 
para menor 
menor ou 
ou igual 
igual ) 
) > 
> ( 
( Operador 
Operador binário 
binário para 
para maior 
maior que 
que ) 
) > 
> = 
= ( 
( Operador 
Operador binário 
binário para 
para maior 
maior ou 
ou igual 
igual ) 
) Operadores 
Operadores do 
do tipo 
tipo REAL 
REAL : 
: + 
+ ( 
( Operador 
Operador binário 
binário para 
para adição 
adição ) 
) - 
- ( 
( Operador 
Operador binário 
binário para 
para subtração 
subtração ) 
) * 
* ( 
( Operador 
Operador binário 
binário para 
para multiplicação 
multiplicação ) 
) / 
/ ( 
( Operador 
Operador binário 
binário para 
para divisão 
divisão ) 
) ^ 
^ ( 
( Operador 
Operador binário 
binário para 
para exponenciação 
exponenciação ) 
) < 
< ( 
( Operador 
Operador binário 
binário para 
para menor 
menor que 
que ) 
) < 
< = 
= ( 
( Operador 
Operador binário 
binário para 
para menor 
menor ou 
ou igual 
igual ) 
) > 
> ( 
( Operador 
Operador binário 
binário para 
para maior 
maior que 
que ) 
) > 
> = 
= ( 
( Operador 
Operador binário 
binário para 
para maior 
maior ou 
ou igual 
igual ) 
) Operadores 
Operadores do 
do tipo 
tipo BOOLEAN 
BOOLEAN : 
: not 
not ( 
( operador 
operador unário 
unário para 
para negação 
negação lógica 
lógica ) 
) Exemplo 
Exemplo : 
: b 
b , 
, c 
c : 
: INTEGER 
INTEGER b 
b : 
: =10 
=10 c 
c : 
: =4 
=4 if 
if not 
not ( 
( b 
b < 
< c 
c ) 
) then 
then -- 
-- realiza 
realiza alguma 
alguma ação 
ação apenas 
apenas se 
se c 
c é 
é -- 
-- menor 
menor ou 
ou igual 
igual a 
a b 
b -- 
-- alguma 
alguma ação 
ação end 
end # 
# pg052 
pg052 # 
# nt065 
nt065 # 
# cm 
cm layout 
layout errado 
errado # 
# or 
or ( 
( operador 
operador lógico 
lógico binário 
binário “ 
“ ou 
ou ” 
” ) 
) Exemplo 
Exemplo : 
: b 
b , 
, c 
c : 
: INTEGER 
INTEGER b 
b : 
: =10 
=10 c 
c : 
: =4 
=4 if 
if b 
b > 
> 0 
0 or 
or c 
c > 
> 2 
2 then 
then -- 
-- toma 
toma a 
a ação 
ação abaixo 
abaixo se 
se b 
b é 
é positivo 
positivo ou 
ou c 
c é 
é maior 
maior que 
que 2 
2 . 
. -- 
-- alguma 
alguma ação 
ação end 
end and 
and ( 
( operador 
operador lógico 
lógico “ 
“ e 
e ” 
” ) 
) Exemplo 
Exemplo : 
: b 
b , 
, c 
c : 
: INTEGER 
INTEGER b 
b : 
: = 
= 10 
10 c 
c : 
: = 
= 4 
4 if 
if b 
b > 
> 0 
0 and 
and c 
c > 
> 2 
2 then 
then -- 
-- toma 
toma a 
a ação 
ação abaixo 
abaixo se 
se b 
b é 
é positivo 
positivo e 
e c 
c é 
é maior 
maior que 
que 2 
2 . 
. -- 
-- alguma 
alguma ação 
ação end 
end implies 
implies ( 
( usada 
usada em 
em assertivas 
assertivas ) 
) or 
or else 
else ( 
( operador 
operador lógico 
lógico binário 
binário para 
para “ 
“ ou 
ou ” 
” em 
em “ 
“ curto-circuito 
curto-circuito ” 
” ) 
) Exemplo 
Exemplo : 
: b 
b , 
, c 
c : 
: INTEGER 
INTEGER a 
a : 
: =12 
=12 b 
b : 
: = 
= 10 
10 c 
c : 
: = 
= 40 
40 if 
if b=0 
b=0 or 
or else 
else c//b 
c//b > 
> 2 
2 then 
then -- 
-- toma 
toma a 
a ação 
ação abaixo 
abaixo se 
se b 
b é 
é zero 
zero ou 
ou c//b 
c//b é 
é maior 
maior que 
que 2 
2 -- 
-- avalia 
avalia a 
a expressão 
expressão c//b 
c//b apenas 
apenas se 
se b 
b não 
não é 
é igual 
igual a 
a 0 
0 -- 
-- alguma 
alguma ação 
ação end 
end and 
and then 
then ( 
( operador 
operador lógico 
lógico binário 
binário para 
para “ 
“ e 
e ” 
” em 
em “ 
“ curto-circuito 
curto-circuito ” 
” ) 
) Exemplo 
Exemplo : 
: b 
b , 
, c 
c : 
: INTEGER 
INTEGER a 
a : 
: =12 
=12 b 
b : 
: =10 
=10 c 
c : 
: =40 
=40 # 
# pg053 
pg053 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# if 
if b 
b > 
> 0 
0 and 
and then 
then c//b 
c//b > 
> 2 
2 then 
then -- 
-- execute 
execute a 
a ação 
ação apenas 
apenas se 
se b 
b é 
é positivo 
positivo e 
e c//b 
c//b é 
é maior 
maior que 
que 2 
2 -- 
-- calcule 
calcule a 
a expressão 
expressão c//b 
c//b apenas 
apenas se 
se b 
b é 
é positivo 
positivo -- 
-- alguma 
alguma ação 
ação end 
end Os 
Os últimos 
últimos dois 
dois operadores 
operadores , 
, “ 
“ or 
or else 
else ” 
” e 
e “ 
“ and 
and then 
then ” 
” , 
, às 
às vezes 
vezes são 
são chamados 
chamados operadores 
operadores de 
de curto 
curto circuito 
circuito . 
. Para 
Para o 
o operador 
operador `` 
`` or 
or else 
else '' 
'' , 
, se 
se a 
a primeira 
primeira expressão 
expressão é 
é verdade 
verdade , 
, a 
a segunda 
segunda expressão 
expressão nunca 
nunca é 
é calculada 
calculada . 
. Para 
Para o 
o operador 
operador `` 
`` and 
and then 
then '' 
'' , 
, se 
se a 
a primeira 
primeira expressão 
expressão é 
é falsa 
falsa , 
, a 
a segunda 
segunda expressão 
expressão nunca 
nunca é 
é calculada 
calculada . 
. 3.9 
3.9 Ramificação 
Ramificação O 
O tipo 
tipo mais 
mais simples 
simples de 
de ramificação 
ramificação é 
é a 
a cláusulaif 
cláusulaif . 
. Esta 
Esta estrutura 
estrutura de 
de controle 
controle é 
é usada 
usada quando 
quando a 
a execução 
execução de 
de uma 
uma ou 
ou mais 
mais linhas 
linhas de 
de um 
um código 
código , 
, um 
um bloco 
bloco de 
de código 
código , 
, é 
é baseada 
baseada no 
no resultado 
resultado de 
de um 
um teste 
teste lógico 
lógico que 
que é 
é executado 
executado antes 
antes de 
de entrar 
entrar no 
no bloco 
bloco de 
de código 
código . 
. O 
O teste 
teste lógico 
lógico requer 
requer a 
a avaliação 
avaliação de 
de uma 
uma expressão 
expressão do 
do tipoboolean 
tipoboolean . 
. Tal 
Tal expressão 
expressão pode 
pode ser 
ser verdadeira 
verdadeira ( 
( TRUE 
TRUE ) 
) ou 
ou falsa 
falsa ( 
( FALSE 
FALSE ) 
) . 
. A 
A forma 
forma desta 
desta estrutura 
estrutura é 
é : 
: if 
if uma_expressão_booleana 
uma_expressão_booleana then 
then comando 
comando ( 
( s 
s ) 
) end 
end Exemplo 
Exemplo : 
: if 
if velocidade_no_solo 
velocidade_no_solo > 
> 160 
160 then 
then -- 
-- o 
o avião 
avião decola 
decola end 
end Outra 
Outra estrutura 
estrutura simples 
simples de 
de controle 
controle é 
é a 
a estruturaif-then-else 
estruturaif-then-else . 
. É 
É usada 
usada quando 
quando uma 
uma escolha 
escolha deve 
deve ser 
ser feita 
feita entre 
entre dois 
dois blocos 
blocos de 
de código 
código . 
. A 
A escolha 
escolha está 
está baseada 
baseada na 
na avaliação 
avaliação de 
de uma 
uma expressão 
expressão do 
do tipoboolean 
tipoboolean . 
. Esta 
Esta estrutura 
estrutura de 
de controle 
controle é 
é construída 
construída como 
como segue 
segue : 
: if 
if expressão_booleana 
expressão_booleana then 
then bloco_1 
bloco_1 else 
else bloco_2 
bloco_2 end 
end Aqui 
Aqui , 
, bloco_1 
bloco_1 e 
e bloco_2 
bloco_2 representam 
representam uma 
uma ou 
ou mais 
mais linhas 
linhas de 
de código 
código . 
. # 
# pg054 
pg054 # 
# nt040 
nt040 # 
# cm00 
cm00 # 
# Exemplo 
Exemplo : 
: if 
if velocidade_em_terra 
velocidade_em_terra > 
> 160 
160 then 
then -- 
-- o 
o avião 
avião decola 
decola else 
else -- 
-- o 
o avião 
avião para 
para e 
e a 
a decolagem 
decolagem é 
é interrompida 
interrompida end 
end O 
O comandoif-then-else 
comandoif-then-else podem 
podem ser 
ser “ 
“ aninhado 
aninhado ” 
” . 
. Considere 
Considere o 
o segmento 
segmento de 
de código 
código seguinte 
seguinte : 
: if 
if expressão1 
expressão1 then 
then comando1 
comando1 else 
else if 
if expressão2 
expressão2 then 
then comando2 
comando2 else 
else comando3 
comando3 end 
end end 
end Se 
Se expressão1 
expressão1 for 
for verdadeira 
verdadeira , 
, então 
então comando1 
comando1 será 
será executado 
executado . 
. Caso 
Caso contrário 
contrário , 
, se 
se expressão2 
expressão2 for 
for verdadeira 
verdadeira será 
será executado 
executado o 
o comando2 
comando2 ; 
; caso 
caso contrário 
contrário será 
será executado 
executado o 
o comando3 
comando3 . 
. Suponha 
Suponha que 
que um 
um entre 
entre vários 
vários “ 
“ ramos 
ramos ” 
” devesse 
devesse ser 
ser executado 
executado baseado 
baseado na 
na avaliação 
avaliação de 
de expressões 
expressões que 
que podem 
podem ser 
ser falsas 
falsas ou 
ou verdadeiras 
verdadeiras . 
. Ocomando 
Ocomando if-elseif-elsepode 
if-elseif-elsepode ser 
ser adequado 
adequado . 
. Esta 
Esta construção 
construção é 
é a 
a seguinte 
seguinte : 
: if 
if expressão1 
expressão1 then 
then comando1 
comando1 elseif 
elseif expressão2 
expressão2 then 
then comando2 
comando2 elseif 
elseif expressão3 
expressão3 then 
then comando3 
comando3 else 
else comando4 
comando4 end 
end A 
A expressãoelse 
expressãoelse na 
na construção 
construção acima 
acima é 
é opcional 
opcional . 
. Não 
Não existe 
existe um 
um limite 
limite para 
para o 
o número 
número de 
de expressões 
expressões deelseif 
deelseif . 
. Exemplo 
Exemplo : 
: if 
if velocidade_em_terra 
velocidade_em_terra > 
> 220 
220 then 
then -- 
-- diminuir 
diminuir a 
a velocidade 
velocidade # 
# pg055 
pg055 # 
# nt000 
nt000 # 
# cm00 
cm00 # 
# # 
# pg056 
pg056 # 
# nt050 
nt050 # 
# cm 
cm layout 
layout errado 
errado # 
# 3.10 
3.10 Iteração 
Iteração ( 
( loop 
loop ) 
) Iteração 
Iteração ou 
ou loop 
loop é 
é uma 
uma operação 
operação lógica 
lógica fundamental 
fundamental da 
da computação 
computação . 
. Um 
Um único 
único comando 
comando ou 
ou , 
, mais 
mais tipicamente 
tipicamente , 
, um 
um bloco 
bloco de 
de comandos 
comandos são 
são executados 
executados repetidamente 
repetidamente , 
, até 
até que 
que alguma 
alguma condição 
condição de 
de parada 
parada seja 
seja satisfeita 
satisfeita . 
. Se 
Se a 
a condição 
condição de 
de parada 
parada nunca 
nunca for 
for satisfeita 
satisfeita , 
, a 
a execução 
execução das 
das declarações 
declarações dentro 
dentro do 
do loop 
loop continuará 
continuará indefinidamente 
indefinidamente e 
e o 
o programa 
programa tipicamente 
tipicamente parece 
parece “ 
“ travar 
travar ” 
” ( 
( jargão 
jargão que 
que significa 
significa que 
que o 
o programa 
programa parece 
parece não 
não estar 
estar fazendo 
fazendo qualquer 
qualquer coisa 
coisa de 
de útil 
útil uma 
uma vez 
vez que 
que ele 
ele não 
não exibe 
exibe resultados 
resultados ) 
) . 
. Num 
Num loop 
loop corretamente 
corretamente construído 
construído , 
, a 
a condição 
condição de 
de parada 
parada é 
é eventualmente 
eventualmente encontrada 
encontrada . 
. A 
A forma 
forma geral 
geral das 
das construções 
construções de 
de iteração 
iteração é 
é : 
: From 
From instruções_de_inicialização 
instruções_de_inicialização Until 
Until condições_de_saída_do_loop 
condições_de_saída_do_loop loop 
loop corpo_do_loop 
corpo_do_loop end 
end O 
O comando 
comando ( 
( ou 
ou comandos 
comandos ) 
) que 
que compreendem 
compreendem asinstruções_de_inicializaçãosão 
asinstruções_de_inicializaçãosão executados 
executados exatamente 
exatamente uma 
uma vez 
vez . 
. Ascondições_de_saída_do_loopsão 
Ascondições_de_saída_do_loopsão testadas 
testadas antes 
antes de 
de cada 
cada execução 
execução do 
do loop 
loop . 
. Se 
Se a 
a expressão 
expressão for 
for avaliada 
avaliada como 
como falsa 
falsa , 
, o 
o loopé 
loopé executado 
executado ; 
; de 
de outra 
outra maneira 
maneira o 
o loop 
loop é 
é terminado 
terminado e 
e o 
o controle 
controle é 
é transferido 
transferido para 
para a 
a linha 
linha abaixo 
abaixo da 
da declaração 
declaração end 
end . 
. Claramente 
Claramente , 
, algumas 
algumas ações 
ações são 
são encontradas 
encontradas no 
no corpo 
corpo do 
do loop 
loop ( 
( os 
os comandos 
comandos entre 
entre palavras 
palavras loop 
loop e 
e end 
end ) 
) que 
que eventualmente 
eventualmente tornarão 
tornarão ascondições_de_saída_do_loop 
ascondições_de_saída_do_loop verdadeiras 
verdadeiras . 
. Por 
Por exemplo 
exemplo , 
, imagine 
imagine que 
que queremos 
queremos mostrar 
mostrar todos 
todos os 
os inteiros 
inteiros que 
que são 
são potência 
potência de 
de 2 
2 até 
até 65536 
65536 . 
. O 
O segmento 
segmento do 
do código 
código que 
que realiza 
realiza isto 
isto usando 
usando o 
o comando 
comando loop 
loop é 
é assim 
assim construído 
construído : 
: from 
from index 
index : 
: =1 
=1 until 
until index=65536 
index=65536 loop 
loop index 
index : 
: =index 
=index * 
* 2 
2 io.put_int 
io.put_int ( 
( index 
index ) 
) io.new_line 
io.new_line end 
end A 
A instrução 
instrução index 
index : 
: =1 
=1 representa 
representa asinstruções_de_inicialização 
asinstruções_de_inicialização . 
. Ela 
Ela faz 
faz com 
com que 
que index 
index assuma 
assuma o 
o valor 
valor inicial 
inicial de 
de 1 
1 . 
. A 
A declaração 
declaração index=65536 
index=65536 representa 
representa as 
as condições_de_saída_do_loope 
condições_de_saída_do_loope as 
as três 
três linhas 
linhas do 
do código 
código logo 
logo abaixo 
abaixo de 
de loop 
loop representam 
representam o 
o corpo_do_loop. 
corpo_do_loop. # 
# pg057 
pg057 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# O 
O comandoindex 
comandoindex : 
: = 
= index 
index * 
* 2substitui 
2substitui o 
o valor 
valor antigo 
antigo deindex 
deindex por 
por um 
um valor 
valor duas 
duas vezes 
vezes maior 
maior . 
. O 
O comando 
comando deve 
deve ser 
ser lido 
lido assim 
assim : 
: “ 
“ index 
index recebe 
recebe index 
index vezes 
vezes 2 
2 ” 
” . 
. Nós 
Nós examinaremos 
examinaremos outros 
outros exemplos 
exemplos para 
para ilustrar 
ilustrar o 
o uso 
uso doloop 
doloop . 
. No 
No próximo 
próximo exemplo 
exemplo suponha 
suponha que 
que nós 
nós queiramos 
queiramos computar 
computar a 
a soma 
soma de 
de uma 
uma série 
série . 
. 1+2+3+4+5+6+ 
1+2+3+4+5+6+ .... 
.... +1,000,000 
+1,000,000 Um 
Um segmento 
segmento de 
de código 
código do 
do Eiffel 
Eiffel para 
para computar 
computar essa 
essa soma 
soma é 
é dado 
dado abaixo 
abaixo . 
. As 
As várias 
várias partes 
partes da 
da construção 
construção doloop 
doloop são 
são mostradas 
mostradas e 
e comentadas 
comentadas . 
. indice 
indice , 
, soma 
soma : 
: INTEGER 
INTEGER from 
from -- 
-- comandos 
comandos de 
de inicialização 
inicialização do 
do loop 
loop soma 
soma : 
: =0 
=0 indice 
indice : 
: =0 
=0 until 
until indice=1000000 
indice=1000000 -- 
-- condição 
condição que 
que encerra 
encerra o 
o loop 
loop loop 
loop -- 
-- corpo 
corpo do 
do loop 
loop indice 
indice : 
: =indice+1 
=indice+1 soma 
soma : 
: =soma+indice 
=soma+indice end 
end io.put_string 
io.put_string ( 
( “ 
“ Soma 
Soma = 
= “ 
“ ) 
) io.put_int 
io.put_int ( 
( soma 
soma ) 
) io.new_line 
io.new_line A 
A instrução 
instrução indice 
indice : 
: =indice+1 
=indice+1 é 
é lida 
lida como 
como “ 
“ índice 
índice recebe 
recebe índice 
índice mais 
mais 1 
1 ” 
” As 
As instruções 
instruções de 
de inicialização 
inicialização , 
, soma 
soma : 
: =0 
=0 e 
e indice 
indice : 
: =0 
=0 , 
, é 
é correta 
correta porém 
porém desnecessária 
desnecessária . 
. Ambos 
Ambos os 
os objetos 
objetos assumem 
assumem o 
o valor 
valor 0 
0 em 
em virtude 
virtude de 
de sua 
sua declaração 
declaração . 
. Incidentalmente 
Incidentalmente , 
, para 
para aqueles 
aqueles que 
que estão 
estão interessados 
interessados , 
, a 
a soma 
soma mostrada 
mostrada na 
na tela 
tela é 
é 1784293664 
1784293664 . 
. Em 
Em uma 
uma outra 
outra aplicação 
aplicação vamos 
vamos aproximar 
aproximar a 
a bem 
bem conhecida 
conhecida série 
série geométrica 
geométrica : 
: 1 
1 + 
+ 1/2 
1/2 + 
+ 1/4 
1/4 + 
+ 1/8 
1/8 + 
+ ... 
... + 
+ ( 
( 1/2 
1/2 ) 
) n 
n cujo 
cujo valor 
valor teórico 
teórico equivale 
equivale a 
a 2 
2 . 
. Nós 
Nós queremos 
queremos continuar 
continuar adicionando 
adicionando números 
números até 
até que 
que o 
o próximo 
próximo número 
número da 
da série 
série seja 
seja equivalente 
equivalente ou 
ou menor 
menor que 
que 10-9 
10-9 . 
. O 
O segmento 
segmento de 
de código 
código a 
a seguir 
seguir usa 
usa uma 
uma construção 
construção deloop 
deloop para 
para aproximar 
aproximar a 
a soma 
soma . 
. proximo_termo 
proximo_termo , 
, soma 
soma : 
: REAL 
REAL from 
from soma 
soma : 
: =1.0 
=1.0 # 
# pg058 
pg058 # 
# nt080 
nt080 # 
# cm 
cm layout 
layout errado 
errado # 
# proximo_termo 
proximo_termo : 
: =0.5 
=0.5 until 
until proximo_termo 
proximo_termo < 
< 0.000000001 
0.000000001 loop 
loop soma 
soma : 
: =soma 
=soma + 
+ proximo_termo 
proximo_termo proximo_termo 
proximo_termo : 
: =proximo_termo/2.0 
=proximo_termo/2.0 end 
end A 
A parte 
parte de 
de inicialização 
inicialização do 
do loop 
loop altera 
altera o 
o valor 
valor de 
de soma 
soma para 
para 1.0 
1.0 eproximo_termo 
eproximo_termo para 
para 0,5 
0,5 . 
. No 
No corpo 
corpo doloop 
doloop , 
, somaé 
somaé aumentada 
aumentada pelo 
pelo valor 
valor corrente 
corrente deproximo_termo 
deproximo_termo . 
. A 
A seguir 
seguir , 
, o 
o valor 
valor deproximo_termoé 
deproximo_termoé alterado 
alterado para 
para metade 
metade de 
de seu 
seu valor 
valor anterior 
anterior . 
. A 
A soma 
soma realizada 
realizada pelo 
pelo código 
código acima 
acima é 
é igual 
igual a 
a 2 
2 . 
. Muitos 
Muitos exemplos 
exemplos adicionais 
adicionais de 
de construções 
construções comloop 
comloop aparecerão 
aparecerão mais 
mais tarde 
tarde em 
em listagens 
listagens de 
de programa 
programa . 
. 3.11 
3.11 Rotinas 
Rotinas Rotinas 
Rotinas existem 
existem em 
em duas 
duas formas 
formas : 
: comandos 
comandos e 
e consultas 
consultas . 
. Rotinas 
Rotinas são 
são utilizadas 
utilizadas quando 
quando um 
um objeto 
objeto recebe 
recebe um 
um comando 
comando ou 
ou consulta 
consulta . 
. Por 
Por exemplo 
exemplo , 
, o 
o comando 
comando meu_ponto.alterar_coordenada_x 
meu_ponto.alterar_coordenada_x ( 
( 50 
50 ) 
) troca 
troca o 
o atributox 
atributox demeu_pontopara 
demeu_pontopara um 
um valor 
valor igual 
igual a 
a 50 
50 . 
. A 
A consultameu_ponto.angulocomputa 
consultameu_ponto.angulocomputa a 
a coordenada 
coordenada polar 
polar doangulodemeu_ponto 
doangulodemeu_ponto . 
. Comandos 
Comandos tipicamente 
tipicamente mudam 
mudam o 
o estado 
estado interno 
interno do 
do objeto 
objeto que 
que eles 
eles estão 
estão utilizando 
utilizando . 
. Consultas 
Consultas nunca 
nunca mudam 
mudam o 
o estado 
estado interno 
interno do 
do objeto 
objeto que 
que eles 
eles estão 
estão utilizando 
utilizando . 
. Uma 
Uma consulta 
consulta corretamente 
corretamente construída 
construída retorna 
retorna informações 
informações do 
do objeto 
objeto , 
, sem 
sem modificar 
modificar seu 
seu estado 
estado . 
. Embora 
Embora a 
a linguagem 
linguagem Eiffel 
Eiffel permita 
permita alguém 
alguém definir 
definir uma 
uma rotina 
rotina que 
que mude 
mude o 
o estado 
estado interno 
interno e 
e também 
também retorne 
retorne as 
as informações 
informações de 
de um 
um objeto 
objeto , 
, esta 
esta prática 
prática é 
é totalmente 
totalmente desaconselhável 
desaconselhável . 
. Comandos 
Comandos e 
e consultas 
consultas são 
são especificados 
especificados em 
em uma 
uma seção 
seção de 
de características 
características de 
de uma 
uma classe 
classe ( 
( feature 
feature ) 
) . 
. Tanto 
Tanto a 
a informação 
informação de 
de interface 
interface quanto 
quanto os 
os detalhes 
detalhes de 
de implementação 
implementação são 
são dados 
dados . 
. O 
O usuário 
usuário de 
de uma 
uma classe 
classe ( 
( consumidor 
consumidor ) 
) precisa 
precisa acessar 
acessar somente 
somente a 
a parte 
parte de 
de interface 
interface da 
da rotina 
rotina . 
. O 
O criador 
criador da 
da classe 
classe precisa 
precisa acessar 
acessar os 
os detalhes 
detalhes de 
de implementação 
implementação quando 
quando realiza 
realiza manutenção 
manutenção de 
de rotina 
rotina . 
. ( 
( Manutenção 
Manutenção é 
é uma 
uma atividade 
atividade que 
que ocorre 
ocorre quando 
quando ( 
( 1 
1 ) 
) erros 
erros são 
são apresentados 
apresentados e 
e corrigidos 
corrigidos , 
, ( 
( 2 
2 ) 
) melhoramentos 
melhoramentos em 
em capacidade 
capacidade são 
são desejados 
desejados , 
, ( 
( 3 
3 ) 
) melhorias 
melhorias em 
em eficiência 
eficiência são 
são procuradas 
procuradas ) 
) . 
. Nós 
Nós consideraremos 
consideraremos somente 
somente a 
a mais 
mais simples 
simples estrutura 
estrutura para 
para uma 
uma rotina 
rotina neste 
neste capítulo 
capítulo . 
. Em 
Em capítulos 
capítulos mais 
mais avançados 
avançados outros 
outros componentes 
componentes de 
de uma 
uma rotina 
rotina , 
, comopré 
comopré e 
e pós- 
pós- condições 
condições , 
, serão 
serão discutidos. 
discutidos. # 
# pg059 
pg059 # 
# nt075 
nt075 # 
# cm 
cm layout 
layout errado 
errado # 
# A 
A estrutura 
estrutura de 
de sintaxe 
sintaxe de 
de uma 
uma simples 
simples rotina 
rotina é 
é a 
a seguinte 
seguinte : 
: nome_rotina 
nome_rotina [ 
[ ( 
( lista_opcional_de_parâmetros 
lista_opcional_de_parâmetros ) 
) ] 
] [ 
[ : 
: tipo_opcional_de_retorno 
tipo_opcional_de_retorno ] 
] is 
is local 
local declaração_de_objetos 
declaração_de_objetos do 
do -- 
-- corpo 
corpo da 
da rotina 
rotina end 
end –- 
–- nome_rotina 
nome_rotina O 
O nome 
nome da 
da rotina 
rotina ( 
( o 
o mesmonome_rotina 
mesmonome_rotina ) 
) deve 
deve ser 
ser cuidadosamente 
cuidadosamente escolhido 
escolhido . 
. Ele 
Ele deve 
deve descrever 
descrever o 
o propósito 
propósito da 
da rotina 
rotina . 
. Para 
Para uma 
uma rotina 
rotina comando 
comando , 
, deve 
deve ser 
ser usado 
usado um 
um verbo 
verbo . 
. Para 
Para uma 
uma rotina 
rotina consulta 
consulta , 
, deve-se 
deve-se usar 
usar um 
um substantivo 
substantivo que 
que descreve 
descreve aquilo 
aquilo que 
que é 
é retornado 
retornado . 
. Por 
Por exemplo 
exemplo : 
: uma 
uma rotina 
rotina comando 
comando para 
para alterar 
alterar o 
o peso 
peso de 
de um 
um carro 
carro pode 
pode ter 
ter o 
o nome 
nome mudar_peso 
mudar_peso . 
. Se 
Se outra 
outra rotina 
rotina tem 
tem como 
como função 
função calcular 
calcular o 
o volume 
volume de 
de um 
um carro 
carro , 
, seu 
seu nome 
nome pode 
pode servolume 
servolume . 
. A 
A lista 
lista de 
de parâmetros 
parâmetros , 
, se 
se presente 
presente , 
, contem 
contem as 
as informações 
informações que 
que deve 
deve ser 
ser colocadas 
colocadas para 
para usar 
usar esta 
esta rotina 
rotina . 
. O 
O tipo 
tipo de 
de retorno 
retorno , 
, se 
se presente 
presente , 
, indica 
indica o 
o tipo 
tipo de 
de informação 
informação que 
que é 
é computada 
computada e 
e retornada 
retornada para 
para quem 
quem chamou 
chamou a 
a rotina 
rotina ( 
( a 
a rotina 
rotina que 
que chamou 
chamou a 
a função 
função ) 
) . 
. A 
A declaração 
declaração de 
de objetos 
objetos , 
, é 
é uma 
uma lista 
lista de 
de nomes 
nomes de 
de objetos 
objetos seguidos 
seguidos de 
de seus 
seus respectivos 
respectivos tipos 
tipos de 
de classe 
classe . 
. Lembre-se 
Lembre-se que 
que a 
a criação 
criação ou 
ou inicialização 
inicialização de 
de um 
um objeto 
objeto não 
não resulta 
resulta de 
de sua 
sua declaração 
declaração ( 
( exceto 
exceto para 
para seus 
seus tipos 
tipos básicos 
básicos INTEGER 
INTEGER , 
, CHARACTER 
CHARACTER , 
, REAL 
REAL e 
e BOOLEAN 
BOOLEAN ) 
) . 
. Cada 
Cada objeto 
objeto assume 
assume um 
um “ 
“ valor 
valor ” 
” padrão 
padrão de 
de Void 
Void até 
até que 
que o 
o objeto 
objeto seja 
seja criado 
criado explicitamente 
explicitamente por 
por um 
um programador 
programador a 
a não 
não ser 
ser que 
que seja 
seja de 
de um 
um tipo 
tipo básico 
básico . 
. As 
As instruções 
instruções contidas 
contidas entre 
entre os 
os delimitadoresdo 
delimitadoresdo e 
e end 
end representam 
representam o 
o corpo 
corpo ou 
ou detalhes 
detalhes de 
de implementação 
implementação da 
da rotina 
rotina . 
. Para 
Para ilustrar 
ilustrar o 
o conceito 
conceito de 
de comando 
comando e 
e consulta 
consulta , 
, nós 
nós construiremos 
construiremos uma 
uma classe 
classe simplificada 
simplificada IMPOSTO 
IMPOSTO cujos 
cujos detalhes 
detalhes são 
são mostrados 
mostrados na 
na listagem 
listagem 3.4 
3.4 . 
. O 
O atributo 
atributo renda_dedutivelpode 
renda_dedutivelpode ser 
ser consultado 
consultado mas 
mas não 
não modificado 
modificado . 
. Ele 
Ele tem 
tem semântica 
semântica “ 
“ read-only 
read-only ” 
” . 
. Se 
Se alguém 
alguém quiser 
quiser mudar 
mudar o 
o valor 
valor deste 
deste atributo 
atributo , 
, somente 
somente o 
o comando 
comando criar 
criar pode 
pode ser 
ser usado 
usado para 
para este 
este propósito 
propósito . 
. Listagem 
Listagem 3.4 
3.4 Classe 
Classe IMPOSTO 
IMPOSTO para 
para ilustrar 
ilustrar os 
os comandos 
comandos e 
e constultas 
constultas class 
class IMPOSTO 
IMPOSTO creation 
creation criar 
criar feature 
feature # 
# pg060 
pg060 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# -- 
-- Atributo 
Atributo de 
de consulta 
consulta renda_dedutivel 
renda_dedutivel ; 
; REAL 
REAL -- 
-- Criação 
Criação e 
e comando 
comando ordinário 
ordinário criar 
criar ( 
( quantia 
quantia : 
: REAL 
REAL ) 
) is 
is do 
do renda_dedutivel 
renda_dedutivel : 
: = 
= quantia 
quantia end 
end -- 
-- Função 
Função consulta 
consulta imposto_devido 
imposto_devido : 
: REAL 
REAL is 
is -- 
-- Computação 
Computação do 
do imposto 
imposto baseada 
baseada no 
no atributo 
atributo renda_dedutivel 
renda_dedutivel do 
do if 
if renda_dedutivel 
renda_dedutivel < 
< 6000.0 
6000.0 then 
then Result 
Result : 
: = 
= 0.0 
0.0 elseif 
elseif renda_dedutivel 
renda_dedutivel < 
< 22000.0 
22000.0 then 
then Result 
Result : 
: = 
= 0.15 
0.15 * 
* renda_dedutivel 
renda_dedutivel else 
else Result 
Result : 
: = 
= 3300.0 
3300.0 + 
+ 0.28 
0.28 * 
* ( 
( renda_dedutivel 
renda_dedutivel -22000.0 
-22000.0 ) 
) end 
end end 
end end 
end -- 
-- class 
class IMPOSTO 
IMPOSTO Na 
Na funçãoimposto_devido 
funçãoimposto_devido , 
, o 
o imposto 
imposto devido 
devido é 
é $ 
$ 0 
0 se 
se arenda_dedutivelé 
arenda_dedutivelé menor 
menor que 
que $ 
$ 6000 
6000 , 
, é 
é 15 
15 % 
% darenda_dedutivelse 
darenda_dedutivelse o 
o rendimento 
rendimento está 
está entre 
entre $ 
$ 6000 
6000 e 
e $ 
$ 22000 
22000 e 
e é 
é $ 
$ 3300 
3300 mais 
mais 28 
28 % 
% do 
do excesso 
excesso de 
de 22000 
22000 darenda_dedutivel 
darenda_dedutivel , 
, quando 
quando a 
a renda 
renda ultrapassa 
ultrapassa 22000 
22000 . 
. O 
O comandocriar 
comandocriar pode 
pode ser 
ser usado 
usado com 
com uma 
uma rotina 
rotina de 
de criação 
criação ou 
ou como 
como um 
um comando 
comando ordinário 
ordinário . 
. O 
O valor 
valor passado 
passado altera 
altera o 
o valor 
valor corrente 
corrente do 
do atributorenda_dedutivel 
atributorenda_dedutivel . 
. A 
A listagem 
listagem 3.5 
3.5 exibe 
exibe uma 
uma simples 
simples aplicação 
aplicação que 
que exercita 
exercita a 
a classe 
classe IMPOSTO 
IMPOSTO . 
. Programa 
Programa teste 
teste simples 
simples para 
para classe 
classe IMPOSTO 
IMPOSTO . 
. class 
class APLICAÇÃO 
APLICAÇÃO creation 
creation comece 
comece feature 
feature # 
# pg061 
pg061 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# comece 
comece is 
is local 
local meu_imposto 
meu_imposto : 
: IMPOSTO 
IMPOSTO do 
do -- 
-- use 
use o 
o comando 
comando criar 
criar para 
para criar 
criar e 
e inicializar 
inicializar o 
o objeto 
objeto meu_imposto 
meu_imposto ! 
! ! 
! meu_imposto.criar 
meu_imposto.criar ( 
( 40000.0 
40000.0 ) 
) io.put_string 
io.put_string ( 
( “ 
“ Os 
Os impostos 
impostos a 
a pagar 
pagar por 
por $ 
$ ” 
” ) 
) -- 
-- use 
use o 
o atributo 
atributo renda_dedutivel 
renda_dedutivel para 
para retornar 
retornar informação 
informação io.put_real 
io.put_real ( 
( meus_impostos.renda_dedutivel 
meus_impostos.renda_dedutivel ) 
) io.put_string 
io.put_string ( 
( “ 
“ = 
= $ 
$ ” 
” ) 
) -- 
-- use 
use a 
a rotina 
rotina imposto_devido 
imposto_devido para 
para retornar 
retornar informação 
informação io.put_real 
io.put_real ( 
( meu_imposto.imposto_devido 
meu_imposto.imposto_devido ) 
) io.new_line 
io.new_line meu_imposto.make 
meu_imposto.make ( 
( 200000.0 
200000.0 ) 
) io.put_string 
io.put_string ( 
( “ 
“ Os 
Os impostos 
impostos a 
a pagar 
pagar por 
por $ 
$ ” 
” ) 
) io.put_real 
io.put_real ( 
( meu_imposto.renda_dedutivel 
meu_imposto.renda_dedutivel ) 
) io.put_string 
io.put_string ( 
( “ 
“ = 
= $ 
$ ” 
” ) 
) io.put_real 
io.put_real ( 
( meu_imposto.imposto_devido 
meu_imposto.imposto_devido ) 
) io.new_line 
io.new_line end 
end end 
end –- 
–- classe 
classe APLICAÇÃO 
APLICAÇÃO As 
As duas 
duas classes 
classes IMPOSTO 
IMPOSTO eAPLICAÇÃO 
eAPLICAÇÃO constituem 
constituem uma 
uma aplicação 
aplicação completa 
completa . 
. O 
O objeto 
objeto meu_imposto 
meu_imposto é 
é criado 
criado e 
e inicializado 
inicializado com 
com o 
o valor 
valor 40000 
40000 usando 
usando o 
o comando 
comando de 
de criaçãocriar 
criaçãocriar com 
com parâmetro 
parâmetro 40000 
40000 . 
. A 
A renda 
renda dedutível 
dedutível atual 
atual é 
é acessada 
acessada diretamente 
diretamente usando 
usando o 
o atributo 
atributo de 
de consultarenda_dedutivel 
consultarenda_dedutivel . 
. Esse 
Esse valor 
valor pode 
pode ser 
ser lido 
lido mas 
mas não 
não alterado 
alterado diretamente 
diretamente . 
. A 
A função 
função de 
de consultaimposto_devidoé 
consultaimposto_devidoé usada 
usada para 
para acessar 
acessar o 
o imposto 
imposto devido 
devido para 
para a 
a renda 
renda dedutível 
dedutível atual 
atual . 
. O 
O valor 
valor da 
da renda 
renda dedutível 
dedutível é 
é alterado 
alterado para 
para 200000 
200000 usando 
usando o 
o comandocriar 
comandocriar com 
com o 
o parâmetro 
parâmetro 200000 
200000 . 
. Então 
Então o 
o atributo 
atributo e 
e a 
a função 
função de 
de consulta 
consulta são 
são usados 
usados para 
para mostrar 
mostrar novos 
novos dados 
dados sobre 
sobre o 
o imposto 
imposto . 
. 3.12 
3.12 Vetores 
Vetores ( 
( Arrays 
Arrays ) 
) Vetores 
Vetores são 
são usados 
usados para 
para armazenar 
armazenar uma 
uma coleção 
coleção de 
de elementos 
elementos “ 
“ similares 
similares ” 
” . 
. O 
O significado 
significado de 
de “ 
“ similar 
similar ” 
” será 
será mostrado 
mostrado brevemente 
brevemente . 
. Cada 
Cada elemento 
elemento do 
do vetor 
vetor tem 
tem um 
um endereço 
endereço único 
único dito 
dito ser 
ser seu 
seu índice 
índice , 
, um 
um valor 
valor inteiro 
inteiro . 
. Através 
Através do 
do índice 
índice alguém 
alguém pode 
pode inserir 
inserir um 
um elemento 
elemento em 
em um 
um local 
local único 
único ou 
ou acessar 
acessar um 
um elemento 
elemento de 
de um 
um local 
local único 
único no 
no vetor 
vetor . 
. # 
# pg062 
pg062 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# Algumas 
Algumas linguagens 
linguagens fornecem 
fornecem o 
o vetor 
vetor como 
como um 
um tipo 
tipo básico 
básico enquanto 
enquanto outras 
outras linguagens 
linguagens , 
, tal 
tal como 
como Eiffel 
Eiffel , 
, fornecem 
fornecem uma 
uma biblioteca 
biblioteca externa 
externa como 
como suporte 
suporte para 
para vetores 
vetores . 
. Os 
Os vetores 
vetores em 
em Eiffel 
Eiffel são 
são fornecidos 
fornecidos , 
, através 
através de 
de uma 
uma classe 
classe padrão 
padrão chamada 
chamada ARRAY 
ARRAY . 
. A 
A figura 
figura 3.6 
3.6 mostra 
mostra um 
um vetor 
vetor de 
de elementos 
elementos com 
com um 
um índice 
índice que 
que varia 
varia de 
de 1 
1 a 
a 5 
5 . 
. Um 
Um vetor 
vetor de 
de elementos 
elementos . 
. Qual 
Qual a 
a natureza 
natureza dos 
dos objetos 
objetos em 
em um 
um vetor 
vetor como 
como o 
o representado 
representado na 
na figura 
figura ? 
? No 
No contexto 
contexto , 
, programação 
programação orientada 
orientada por 
por objeto 
objeto ( 
( nosso 
nosso contexto 
contexto ) 
) os 
os elementos 
elementos são 
são objetos 
objetos . 
. Cada 
Cada objeto 
objeto é 
é uma 
uma instância 
instância de 
de uma 
uma classe 
classe “ 
“ base 
base ” 
” ou 
ou uma 
uma de 
de suas 
suas classe 
classe descendentes 
descendentes . 
. Nesse 
Nesse sentido 
sentido os 
os objetos 
objetos são 
são “ 
“ semelhantes 
semelhantes ” 
” em 
em relação 
relação à 
à seu 
seu tipo 
tipo . 
. Muitas 
Muitas vezes 
vezes os 
os elementos 
elementos nos 
nos vetores 
vetores são 
são do 
do mesmo 
mesmo tipo 
tipo . 
. Uma 
Uma típica 
típica declaração 
declaração de 
de um 
um vetor 
vetor é 
é : 
: meu_vetor 
meu_vetor : 
: ARRAY 
ARRAY [ 
[ ALGUM_TIPO 
ALGUM_TIPO ] 
] onde 
onde ALGUM_TIPO 
ALGUM_TIPO é 
é o 
o tipo 
tipo “ 
“ base 
base ” 
” ao 
ao qual 
qual pertencem 
pertencem todas 
todas as 
as instâncias 
instâncias de 
de objetos 
objetos . 
. O 
O comandoput 
comandoput da 
da classe 
classe ARRAY 
ARRAY , 
, para 
para inserir 
inserir um 
um objeto 
objeto , 
, meu_objeto 
meu_objeto , 
, num 
num índice 
índice especificadoé 
especificadoé : 
: meu_vetor.put 
meu_vetor.put ( 
( meu_objeto 
meu_objeto , 
, índice 
índice ) 
) Na 
Na expressão 
expressão acimameu_vetoré 
acimameu_vetoré o 
o nome 
nome do 
do vetor 
vetor ondemeu_objetoé 
ondemeu_objetoé inserido 
inserido . 
. Logicamente 
Logicamente , 
, índiceé 
índiceé um 
um determinado 
determinado inteiro 
inteiro . 
. A 
A figura 
figura 3.7 
3.7 retrata 
retrata uma 
uma introdução 
introdução domeu_ojetocomo 
domeu_ojetocomo o 
o quarto 
quarto dos 
dos cinco 
cinco elementos 
elementos do 
do vetore 
vetore mostrado 
mostrado na 
na figura 
figura . 
. # 
# pg063 
pg063 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# meu_vetor.put 
meu_vetor.put ( 
( meu_object,4 
meu_object,4 ) 
) O 
O comandoput 
comandoput . 
. A 
A função 
função de 
de consulta 
consulta da 
da classe 
classe ARRAY 
ARRAY , 
, item 
item , 
, que 
que acessa 
acessa um 
um objeto 
objeto em 
em uma 
uma posição 
posição específica 
específica é 
é : 
: meu_vetor.item 
meu_vetor.item ( 
( indice 
indice ) 
) É 
É claro 
claro queindicedeve 
queindicedeve ser 
ser um 
um valor 
valor inteiro 
inteiro dentro 
dentro dos 
dos limites 
limites legais 
legais para 
para um 
um dado 
dado vetor 
vetor . 
. O 
O vetor 
vetor na 
na figura 
figura 3.7 
3.7 tem 
tem um 
um limite 
limite legal 
legal de 
de 1 
1 até 
até 5 
5 . 
. A 
A figura 
figura 3.8 
3.8 mostra 
mostra o 
o elemento 
elemento na 
na posição 
posição 4 
4 sendo 
sendo acessado 
acessado com 
com a 
a consultaitem 
consultaitem . 
. meu_vetor.item 
meu_vetor.item ( 
( 4 
4 ) 
) A 
A consultaitem 
consultaitem . 
. A 
A rotina 
rotina de 
de criação 
criação da 
da classe 
classe ARRAY 
ARRAY , 
, make 
make , 
, para 
para a 
a construção 
construção de 
de uma 
uma instância 
instância da 
da classe 
classe ARRAY 
ARRAY é 
é : 
: ! 
! ! 
! meu_vetor.make 
meu_vetor.make ( 
( limite_inferior 
limite_inferior , 
, limite_superior 
limite_superior ) 
) Os 
Os valores 
valores inteiroslimite_inferior 
inteiroslimite_inferior e 
e limite_superiorespecificam 
limite_superiorespecificam a 
a variação 
variação legal 
legal do 
do índice 
índice do 
do vetor 
vetor . 
. Após 
Após criar 
criar o 
o vetor 
vetor , 
, meu_vetor 
meu_vetor , 
, os 
os elementos 
elementos em 
em cada 
cada posição 
posição assumem 
assumem seus 
seus valores 
valores padrão 
padrão ( 
( provavelmenteVoid 
provavelmenteVoid ) 
) . 
. # 
# pg064 
pg064 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# Nós 
Nós ilustraremos 
ilustraremos todas 
todas as 
as idéias 
idéias anteriores 
anteriores construindo 
construindo um 
um vetor 
vetor de 
de veículos 
veículos . 
. Haverá 
Haverá três 
três tipos 
tipos de 
de veículos 
veículos no 
no vetor 
vetor : 
: CARRO 
CARRO , 
, AVIÃO 
AVIÃO , 
, e 
e BARCO 
BARCO . 
. Nenhum 
Nenhum dos 
dos detalhes 
detalhes das 
das três 
três classes 
classes será 
será mostrado 
mostrado com 
com exceção 
exceção de 
de que 
que todos 
todos as 
as três 
três são 
são subclasses 
subclasses da 
da classe 
classe VEÍCULO 
VEÍCULO . 
. class 
class VEÍCULO 
VEÍCULO -- 
-- Classe 
Classe básica 
básica . 
. Nenhum 
Nenhum detalhe 
detalhe mostrado 
mostrado . 
. end 
end -- 
-- classe 
classe VEÍCULO 
VEÍCULO class 
class CARRO 
CARRO inherit 
inherit VEÍCULO 
VEÍCULO -- 
-- Nenhum 
Nenhum detalhe 
detalhe mostrado 
mostrado . 
. end 
end -- 
-- classe 
classe CARRO 
CARRO class 
class AVIÃO 
AVIÃO inherit 
inherit VEÍCULO 
VEÍCULO -- 
-- Nenhum 
Nenhum detalhe 
detalhe mostrado 
mostrado . 
. end 
end -- 
-- classe 
classe AVIÃO 
AVIÃO class 
class BARCO 
BARCO inherit 
inherit VEÍCULO 
VEÍCULO -- 
-- Nenhum 
Nenhum detalhe 
detalhe mostrado 
mostrado . 
. end 
end –- 
–- classe 
classe BARCO 
BARCO class 
class APLICAÇÃO 
APLICAÇÃO creation 
creation inicio 
inicio feature 
feature inicio 
inicio is 
is local 
local meu_vetor 
meu_vetor : 
: ARRAY 
ARRAY [ 
[ VEÍCULO 
VEÍCULO ] 
] -- 
-- Tipo 
Tipo básico 
básico é 
é VEÍCULO 
VEÍCULO meu_carro 
meu_carro : 
: CARRO 
CARRO meu_barco 
meu_barco : 
: BARCO 
BARCO meu_avião 
meu_avião : 
: AVIÃO 
AVIÃO do 
do ! 
! ! 
! meu_vetor.make 
meu_vetor.make ( 
( 1,3 
1,3 ) 
) ! 
! ! 
! meu_carro 
meu_carro # 
# pg065 
pg065 # 
# nt090 
nt090 # 
# cm00 
cm00 # 
# ! 
! ! 
! meu_barco 
meu_barco ! 
! ! 
! meu_avião 
meu_avião meu_vetor.put 
meu_vetor.put ( 
( meu_carro 
meu_carro , 
, 1 
1 ) 
) meu_vetor.put 
meu_vetor.put ( 
( meu_barco 
meu_barco , 
, 2 
2 ) 
) meu_vetor.put 
meu_vetor.put ( 
( meu_avião 
meu_avião , 
, 3 
3 ) 
) end 
end end 
end -- 
-- classe 
classe Aplicação 
Aplicação A 
A figura 
figura 3.9 
3.9 descreve 
descreve a 
a construção 
construção demeu_vetorcontendo 
demeu_vetorcontendo três 
três veículos 
veículos . 
. Depois 
Depois de 
de : 
: ! 
! ! 
! meu_vetor.make 
meu_vetor.make ( 
( 1,3 
1,3 ) 
) Depois 
Depois de 
de : 
: ! 
! ! 
! meu_vetor.put 
meu_vetor.put ( 
( meu_avião 
meu_avião , 
, 3 
3 ) 
) Vetor 
Vetor de 
de três 
três veículos 
veículos # 
# pg066 
pg066 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Nós 
Nós depois 
depois consideraremos 
consideraremos o 
o problema 
problema da 
da ordenação 
ordenação de 
de um 
um vetor 
vetor de 
de números 
números inteiros 
inteiros de 
de tamanho 
tamanho 3 
3 . 
. Nós 
Nós retornaremos 
retornaremos o 
o assunto 
assunto da 
da ordenação 
ordenação no 
no Capítulo 
Capítulo 4 
4 quando 
quando nós 
nós o 
o apresentaremos 
apresentaremos de 
de uma 
uma maneira 
maneira mais 
mais séria 
séria e 
e discutiremos 
discutiremos diversos 
diversos métodos 
métodos importantes 
importantes de 
de ordenação 
ordenação . 
. Esta 
Esta simples 
simples aplicação 
aplicação nos 
nos permitirá 
permitirá rever 
rever o 
o assunto 
assunto das 
das rotinas 
rotinas de 
de ramificação 
ramificação e 
e seus 
seus parâmetros 
parâmetros assim 
assim como 
como vetores 
vetores . 
. Suponha 
Suponha que 
que nós 
nós declaremos 
declaremos uma 
uma vetor 
vetor como 
como a 
a seguir 
seguir . 
. local 
local dados 
dados : 
: array 
array [ 
[ INTEGER 
INTEGER ] 
] do 
do ! 
! ! 
! dados.make 
dados.make ( 
( 1,3 
1,3 ) 
) Agora 
Agora nós 
nós queremos 
queremos inserir 
inserir valores 
valores inteiros 
inteiros nas 
nas posições 
posições 1 
1 , 
, 2 
2 e 
e 3 
3 . 
. Finalmente 
Finalmente nós 
nós queremos 
queremos reordenar 
reordenar os 
os números 
números no 
no vetor 
vetor colocando 
colocando o 
o menor 
menor na 
na posição 
posição 1 
1 , 
, o 
o segundo 
segundo menor 
menor na 
na posição 
posição 2 
2 e 
e o 
o maior 
maior na 
na posição 
posição 3 
3 . 
. Este 
Este processo 
processo é 
é chamado 
chamado ordenação 
ordenação . 
. A 
A listagem 
listagem 3.6 
3.6 nos 
nos apresenta 
apresenta uma 
uma rotina 
rotina de 
de ordenação 
ordenação que 
que executa 
executa esta 
esta missão 
missão . 
. Ordenação 
Ordenação uma 
uma vetor 
vetor de 
de 3 
3 números 
números inteiros 
inteiros . 
. class 
class APLICAÇÃO_ORDENACAO 
APLICAÇÃO_ORDENACAO creation 
creation comece 
comece feature 
feature comece 
comece is 
is local 
local dados 
dados : 
: array 
array [ 
[ INTEGER 
INTEGER ] 
] do 
do ! 
! ! 
! dados.make 
dados.make ( 
( 1,3 
1,3 ) 
) dados.put 
dados.put ( 
( 30,1 
30,1 ) 
) dados.put 
dados.put ( 
( 5,2 
5,2 ) 
) dados.put 
dados.put ( 
( 25,3 
25,3 ) 
) ordene_3 
ordene_3 ( 
( dados 
dados ) 
) mostre 
mostre ( 
( dados 
dados ) 
) end 
end ordene_3 
ordene_3 ( 
( dados 
dados : 
: array 
array [ 
[ INTEGER 
INTEGER ] 
] ) 
) is 
is require 
require vetor_de_tamanho_certo 
vetor_de_tamanho_certo : 
: dados.count=3 
dados.count=3 # 
# pg067 
pg067 # 
# nt090 
nt090 # 
# cm 
cm layout 
layout errado 
errado # 
# local 
local temporário 
temporário : 
: INTEGER 
INTEGER do 
do if 
if dados.item 
dados.item ( 
( 1 
1 ) 
) > 
> dados.item 
dados.item ( 
( 2 
2 ) 
) and 
and dados.item 
dados.item ( 
( 1 
1 ) 
) > 
> dados.item 
dados.item ( 
( 3 
3 ) 
) then 
then temporário 
temporário : 
: = 
= dados.item 
dados.item ( 
( 3 
3 ) 
) dados.put 
dados.put ( 
( dados.item 
dados.item ( 
( 1 
1 ) 
) ,3 
,3 ) 
) dados.put 
dados.put ( 
( temp,1 
temp,1 ) 
) elseif 
elseif dados.item 
dados.item ( 
( 2 
2 ) 
) > 
> dados.item 
dados.item ( 
( 1 
1 ) 
) and 
and dados.item 
dados.item ( 
( 2 
2 ) 
) > 
> dados.item 
dados.item ( 
( 3 
3 ) 
) then 
then temporário 
temporário : 
: = 
= dados.item 
dados.item ( 
( 3 
3 ) 
) dados.put 
dados.put ( 
( dados.item 
dados.item ( 
( 2 
2 ) 
) ,3 
,3 ) 
) dados.put 
dados.put ( 
( temp,2 
temp,2 ) 
) end 
end if 
if dados.item 
dados.item ( 
( 1 
1 ) 
) > 
> dados.item 
dados.item ( 
( 2 
2 ) 
) then 
then temporário 
temporário : 
: = 
= dados.item 
dados.item ( 
( 2 
2 ) 
) dados.put 
dados.put ( 
( data.item 
data.item ( 
( 1 
1 ) 
) ,2 
,2 ) 
) dados.put 
dados.put ( 
( temp,1 
temp,1 ) 
) end 
end end 
end imprimir 
imprimir ( 
( os_dados 
os_dados : 
: ARRAY 
ARRAY [ 
[ INTEGER 
INTEGER ] 
] ) 
) is 
is local 
local índice 
índice : 
: INTEGER 
INTEGER do 
do from 
from índice 
índice : 
: = 
= 0 
0 until 
until índice 
índice = 
= os_dados.count 
os_dados.count loop 
loop índice 
índice : 
: = 
= índice 
índice + 
+ 1 
1 io.put_int 
io.put_int ( 
( os_dados.item 
os_dados.item ( 
( índice 
índice ) 
) ) 
) io.put_string 
io.put_string ( 
( “ 
“ ” 
” ) 
) end 
end io.new_line 
io.new_line end 
end end 
end -- 
-- classe 
classe APLICACAO_ORDENACAO 
APLICACAO_ORDENACAO A 
A primeira 
primeira ordem 
ordem de 
de execução 
execução da 
da rotinacomeceé 
rotinacomeceé a 
a criação 
criação do 
do vetordadoscom 
vetordadoscom índice 
índice inferior 
inferior igual 
igual a 
a 1 
1 e 
e superior 
superior igual 
igual a 
a 3 
3 ( 
( índice 
índice entre 
entre 1 
1 e 
e 3 
3 ) 
) . 
. A 
A seguir 
seguir , 
, os 
os valores 
valores 30 
30 , 
, 5 
5 , 
, e 
e 25 
25 são 
são inseridos 
inseridos no 
no vetor 
vetor . 
. A 
A figura 
figura 3.10 
3.10 descreve 
descreve o 
o vetordadosdepois 
vetordadosdepois desse 
desse passo 
passo . 
. # 
# pg068 
pg068 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Vetor 
Vetor inicial 
inicial de 
de três 
três inteiros 
inteiros que 
que serão 
serão ordenados 
ordenados . 
. A 
A rotina 
rotina ordene_3é 
ordene_3é a 
a próxima 
próxima a 
a ser 
ser solicitada 
solicitada comdadosenviado 
comdadosenviado como 
como parâmetro 
parâmetro . 
. A 
A cláusularequirerepresenta 
cláusularequirerepresenta uma 
uma pré-condição 
pré-condição que 
que deve 
deve ser 
ser satisfeita 
satisfeita no 
no momento 
momento em 
em que 
que a 
a rotina 
rotina for 
for solicitada 
solicitada . 
. Pré 
Pré condições 
condições serão 
serão discutidas 
discutidas com 
com mais 
mais detalhes 
detalhes no 
no capítulo 
capítulo 6 
6 . 
. O 
O primeiro 
primeiro teste 
teste que 
que é 
é realizado 
realizado determina 
determina se 
se , 
, o 
o inteiro 
inteiro do 
do índice 
índice 1 
1 é 
é maior 
maior do 
do que 
que o 
o inteiro 
inteiro do 
do índice 
índice 2 
2 e 
e do 
do índice 
índice 3 
3 ( 
( em 
em outras 
outras palavras 
palavras , 
, o 
o inteiro 
inteiro do 
do índice 
índice 1 
1 é 
é o 
o maior 
maior entre 
entre os 
os três 
três inteiros 
inteiros ) 
) . 
. Se 
Se isso 
isso ocorrer 
ocorrer , 
, como 
como ocorre 
ocorre neste 
neste caso 
caso , 
, o 
o inteiro 
inteiro do 
do índice 
índice 1 
1 e 
e o 
o do 
do índice 
índice 3 
3 são 
são trocados 
trocados , 
, colocando 
colocando então 
então o 
o maior 
maior dos 
dos três 
três inteiros 
inteiros no 
no índice 
índice 3 
3 . 
. A 
A figura 
figura 3.11 
3.11 mostra 
mostra como 
como ficou 
ficou o 
o vetor 
vetor depois 
depois dessa 
dessa operação 
operação de 
de troca 
troca . 
. Vetor 
Vetor de 
de três 
três inteiros 
inteiros depois 
depois da 
da primeira 
primeira troca 
troca . 
. Finalmente 
Finalmente os 
os inteiros 
inteiros do 
do índice 
índice 1 
1 e 
e do 
do índice 
índice 2 
2 são 
são comparados 
comparados . 
. Se 
Se o 
o inteiro 
inteiro do 
do índice 
índice 1 
1 for 
for maior 
maior que 
que o 
o inteiro 
inteiro do 
do índice 
índice 2 
2 eles 
eles serão 
serão trocados 
trocados . 
. É 
É o 
o que 
que ocorre 
ocorre neste 
neste caso 
caso . 
. A 
A figura 
figura 3.12 
3.12 mostra 
mostra como 
como ficou 
ficou o 
o vetor 
vetor depois 
depois dessa 
dessa última 
última operação 
operação de 
de troca 
troca . 
. Vetor 
Vetor de 
de três 
três inteiros 
inteiros depois 
depois da 
da última 
última operação 
operação de 
de troca 
troca . 
. # 
# pg069 
pg069 # 
# nt085 
nt085 # 
# cm 
cm layout 
layout errado 
errado # 
# Agora 
Agora os 
os números 
números estão 
estão sortidos 
sortidos . 
. Você 
Você pode 
pode provar 
provar que 
que maneira 
maneira deste 
deste “ 
“ algoritmo 
algoritmo ” 
” ( 
( uma 
uma série 
série de 
de operações 
operações que 
que realizam 
realizam uma 
uma série 
série de 
de serviços 
serviços ) 
) sempre 
sempre armazenarão 
armazenarão os 
os três 
três números 
números conforme 
conforme as 
as condições 
condições ? 
? A 
A rotina 
rotina displaymostra 
displaymostra os 
os valores 
valores dos 
dos números 
números crescentes 
crescentes nas 
nas posições 
posições 1 
1 , 
, 2 
2 e 
e 3 
3 . 
. A 
A consultacounté 
consultacounté usada 
usada para 
para adquirir 
adquirir o 
o maior 
maior número 
número do 
do array 
array os_dados 
os_dados . 
. 3.13 
3.13 Cadeias 
Cadeias de 
de caracteres 
caracteres ( 
( Strings 
Strings ) 
) Em 
Em programação 
programação , 
, umastring 
umastring é 
é um 
um vetor 
vetor de 
de caracteres 
caracteres , 
, não 
não é 
é algo 
algo com 
com que 
que você 
você amarra 
amarra seus 
seus sapatos 
sapatos . 
. Estes 
Estes caracteres 
caracteres podem 
podem ser 
ser letras 
letras maiúsculas 
maiúsculas ou 
ou minúsculas 
minúsculas , 
, números 
números ou 
ou símbolos 
símbolos do 
do teclado 
teclado como 
como ‘ 
‘ $ 
$ ’ 
’ , 
, ‘ 
‘ % 
% ’ 
’ ou 
ou ‘ 
‘ & 
& ’ 
’ . 
. Até 
Até um 
um espaço 
espaço em 
em branco 
branco é 
é um 
um caracter 
caracter . 
. Por 
Por causa 
causa dos 
dos vetores 
vetores baseados 
baseados em 
em caracter 
caracter , 
, asstrings 
asstrings , 
, serem 
serem tão 
tão importante 
importante em 
em programação 
programação , 
, nós 
nós os 
os estudamos 
estudamos como 
como um 
um tipo 
tipo especial 
especial de 
de vetor 
vetor . 
. Em 
Em Eiffel 
Eiffel a 
a classe 
classe STRING 
STRING armazena 
armazena as 
as propriedades 
propriedades deste 
deste importante 
importante tipo 
tipo de 
de dados 
dados . 
. Em 
Em programas 
programas nós 
nós usamosstrings 
usamosstrings para 
para nomes 
nomes de 
de pessoas 
pessoas ou 
ou coisas 
coisas . 
. Nós 
Nós , 
, tipicamente 
tipicamente , 
, tratamos 
tratamos umastring 
umastring como 
como uma 
uma simples 
simples entidade 
entidade única 
única apesar 
apesar dela 
dela ser 
ser constituída 
constituída de 
de vários 
vários caracteres 
caracteres . 
. Então 
Então , 
, astring 
astring com 
com a 
a sequência 
sequência de 
de caracteres 
caracteres ‘ 
‘ M 
M ’ 
’ , 
, ‘ 
‘ a 
a ’ 
’ , 
, ‘ 
‘ r 
r ’ 
’ , 
, ‘ 
‘ i 
i ’ 
’ e 
e ‘ 
‘ a 
a ’ 
’ geralmente 
geralmente será 
será vista 
vista como 
como uma 
uma única 
única entidade 
entidade “ 
“ Maria 
Maria ” 
” mais 
mais propriamente 
propriamente do 
do que 
que os 
os caracteres 
caracteres individuais 
individuais . 
. É 
É claro 
claro que 
que os 
os caracteres 
caracteres individuais 
individuais de 
de umastring 
umastring podem 
podem ser 
ser acessados 
acessados usando 
usando a 
a consultaitemdearray 
consultaitemdearray discutido 
discutido na 
na sessão 
sessão anterior 
anterior . 
. Umastring 
Umastring é 
é uma 
uma seqüência 
seqüência de 
de caracteres 
caracteres delimitados 
delimitados por 
por um 
um par 
par de 
de aspas 
aspas . 
. Alguns 
Alguns exemplos 
exemplos destringssão 
destringssão fornecidos 
fornecidos abaixo 
abaixo . 
. Exemplos 
Exemplos deStrings 
deStrings “ 
“ Meu 
Meu nome 
nome é 
é Richard 
Richard Wiener. 
Wiener. ” 
” “ 
“ Testando 
Testando , 
, testando 
testando , 
, 1 
1 , 
, 2 
2 , 
, 3 
3 ” 
” “ 
“ ! 
! @ 
@ # 
# $ 
$ % 
% ^ 
^ & 
& * 
* ( 
( ) 
) -+ 
-+ ” 
” “ 
“ ” 
” O 
O leitor 
leitor pode 
pode desejar 
desejar parar 
parar e 
e considerar 
considerar as 
as operações 
operações que 
que poderiam 
poderiam ser 
ser desejáveis 
desejáveis em 
em umastring 
umastring . 
. Certamente 
Certamente as 
as operações 
operações mais 
mais básicas 
básicas poderiam 
poderiam incluir 
incluir ( 
( 1 
1 ) 
) criação 
criação de 
de uma 
uma string 
string de 
de um 
um determinado 
determinado tamanho 
tamanho – 
– um 
um vetor 
vetor de 
de caracteres 
caracteres que 
que pode 
pode suportar 
suportar um 
um número 
número pré-determinado 
pré-determinado de 
de caracteres 
caracteres , 
, ( 
( 2 
2 ) 
) inserir 
inserir caracteres 
caracteres nastring 
nastring em 
em diferentes 
diferentes locais 
locais , 
, ( 
( 3 
3 ) 
) preencher 
preencher toda 
toda astring 
astring usando 
usando uma 
uma atribuição 
atribuição de 
de outrastring 
outrastring ( 
( uma 
uma seqüência 
seqüência de 
de caracteres 
caracteres limitada 
limitada por 
por aspas 
aspas , 
, como 
como “ 
“ oi 
oi ” 
” ou 
ou “ 
“ tchau 
tchau ” 
” ) 
) , 
, ( 
( 4 
4 ) 
) acessar 
acessar caracteres 
caracteres de 
de uma 
uma posição 
posição específica 
específica , 
, ( 
( 5 
5 ) 
) copiar 
copiar umastring 
umastring para 
para outra 
outra ( 
( a 
a que 
que vai 
vai ser 
ser copiada 
copiada já 
já deve 
deve ter 
ter sido 
sido iniciada 
iniciada ) 
) e 
e ( 
( 6 
6 ) 
) retornar 
retornar o 
o tamanho 
tamanho de 
de umastring 
umastring – 
– o 
o número 
número de 
de caracteres 
caracteres atuais 
atuais dastring 
dastring , 
, não 
não o 
o seu 
seu total 
total . 
. # 
# pg070 
pg070 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# Existem 
Existem operações 
operações adicionais 
adicionais que 
que você 
você pode 
pode desejar 
desejar acrescentar 
acrescentar a 
a essa 
essa lista 
lista relativamente 
relativamente pequena 
pequena ? 
? Essa 
Essa é 
é a 
a questão 
questão que 
que o 
o desenvolvedor 
desenvolvedor da 
da classe 
classe STRING 
STRING deve 
deve se 
se perguntar 
perguntar quando 
quando está 
está construindo 
construindo esse 
esse componente 
componente de 
de software 
software reutilizável 
reutilizável . 
. Surpreender-te-ia 
Surpreender-te-ia saber 
saber que 
que a 
a classe 
classe STRING 
STRING contida 
contida na 
na biblioteca 
biblioteca do 
do Eiffel 
Eiffel contém 
contém aproximadamente 
aproximadamente 60 
60 rotinas 
rotinas que 
que definem 
definem o 
o comportamento 
comportamento ( 
( comandos 
comandos e 
e consultas 
consultas ) 
) de 
de um 
um objeto 
objeto STRING 
STRING ? 
? A 
A fim 
fim de 
de apreciar 
apreciar o 
o trabalho 
trabalho realizado 
realizado no 
no desenvolvimento 
desenvolvimento de 
de um 
um importante 
importante componente 
componente de 
de software 
software reutilizável 
reutilizável como 
como esse 
esse , 
, vamos 
vamos examinar 
examinar a 
a funcionalidade 
funcionalidade da 
da classe 
classe STRING 
STRING um 
um pouco 
pouco antes 
antes de 
de olhar 
olhar a 
a sua 
sua interface 
interface formal 
formal e 
e demonstrar 
demonstrar seu 
seu uso 
uso em 
em uma 
uma aplicação 
aplicação . 
. A 
A classe 
classe STRING 
STRING é 
é dividida 
dividida em 
em várias 
várias seçõesfeature 
seçõesfeature , 
, cada 
cada uma 
uma contendo 
contendo um 
um conjunto 
conjunto logicamente 
logicamente relacionado 
relacionado de 
de operações 
operações . 
. Na 
Na tabela 
tabela 3.1 
3.1 , 
, as 
as várias 
várias seçõesfeaturesão 
seçõesfeaturesão mostradas 
mostradas com 
com seus 
seus propósitos 
propósitos e 
e uma 
uma lista 
lista de 
de algumas 
algumas das 
das rotinas 
rotinas nas 
nas seçõesfeaturesão 
seçõesfeaturesão listadas 
listadas com 
com uma 
uma breve 
breve descrição 
descrição de 
de seus 
seus propósitos 
propósitos . 
. Tabela 
Tabela 3.1 
3.1 Análise 
Análise da 
da classe 
classe STRING 
STRING ( 
( 1 
1 ) 
) Acesso– 
Acesso– Usado 
Usado para 
para obter 
obter várias 
várias partes 
partes do 
do objeto 
objeto STRING 
STRING has– 
has– astring 
astring inclui 
inclui um 
um caracter 
caracter em 
em particular 
particular ? 
? index_of 
index_of – 
– posição 
posição da 
da primeira 
primeira ocorrência 
ocorrência de 
de um 
um caracter 
caracter item 
item – 
– caracter 
caracter em 
em índice 
índice específico 
específico item_code– 
item_code– código 
código numérico 
numérico de 
de caracter 
caracter em 
em índice 
índice específico 
específico substring_index– 
substring_index– posição 
posição de 
de ocorrência 
ocorrência de 
de outrastring 
outrastring contida 
contida nastring 
nastring dada 
dada . 
. operador 
operador “ 
“ @ 
@ ” 
” – 
– caracter 
caracter em 
em índice 
índice específico 
específico ( 
( alternativo 
alternativo à 
à item 
item ) 
) ( 
( 2 
2 ) 
) Comparação 
Comparação – 
– Usado 
Usado para 
para comparar 
comparar duasstrings 
duasstrings is_equal– 
is_equal– as 
as duasstringscontém 
duasstringscontém a 
a mesma 
mesma seqüência 
seqüência de 
de caracteres 
caracteres ? 
? operador 
operador “ 
“ < 
< ” 
” – 
– umastring 
umastring é 
é lexicograficamente 
lexicograficamente menor 
menor que 
que outra 
outra ? 
? ( 
( 3 
3 ) 
) Conversão 
Conversão – 
– Usado 
Usado para 
para converterstring 
converterstring de 
de uma 
uma forma 
forma para 
para outra 
outra mirror 
mirror – 
– inverte 
inverte a 
a ordem 
ordem dos 
dos caracteres 
caracteres nastring 
nastring mirrored 
mirrored – 
– teste 
teste para 
para ver 
ver se 
se outrastring 
outrastring é 
é espelho 
espelho da 
da primeira 
primeira to_double– 
to_double– converte 
converte para 
para o 
o tipo 
tipo DOUBLE 
DOUBLE , 
, se 
se possível 
possível to_integer 
to_integer – 
– converte 
converte para 
para o 
o tipo 
tipo INTEGER 
INTEGER , 
, se 
se possível 
possível to_lower 
to_lower - 
- converte 
converte todos 
todos os 
os caracteres 
caracteres maiúsculos 
maiúsculos em 
em minúsculos 
minúsculos to_real 
to_real – 
– converte 
converte para 
para o 
o tipo 
tipo REAL 
REAL , 
, se 
se possível 
possível to_upper 
to_upper – 
– converte 
converte todos 
todos os 
os caracteres 
caracteres minúsculos 
minúsculos em 
em maiúsculos 
maiúsculos # 
# pg071 
pg071 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# ( 
( 4 
4 ) 
) Duplicação– 
Duplicação– usada 
usada para 
para copiar 
copiar partes 
partes de 
de umastring 
umastring para 
para outra 
outra substring 
substring – 
– cópia 
cópia de 
de umasubstring 
umasubstring ( 
( string 
string contida 
contida em 
em uma 
uma outrastring 
outrastring ) 
) contendo 
contendo caracteres 
caracteres entre 
entre um 
um índice 
índice e 
e outro 
outro ( 
( 5 
5 ) 
) Mudança 
Mudança de 
de elementos– 
elementos– usada 
usada para 
para modificar 
modificar partes 
partes de 
de umastring 
umastring append 
append –adiciona 
–adiciona uma 
uma cópia 
cópia de 
de umastring 
umastring para 
para o 
o final 
final de 
de outra 
outra copy 
copy –transfere 
–transfere caracteres 
caracteres dastring 
dastring fonte 
fonte para 
para astring 
astring destino 
destino extend 
extend –adiciona 
–adiciona um 
um caracter 
caracter no 
no fim 
fim de 
de uma 
uma determinadastring 
determinadastring fill_blank 
fill_blank – 
– preenche 
preenche umastring 
umastring com 
com caracteres 
caracteres em 
em branco 
branco head 
head –remove 
–remove todos 
todos , 
, menos 
menos osn 
osn primeiros 
primeiros caracteres 
caracteres insert 
insert – 
– adiciona 
adiciona umastring 
umastring à 
à esquerda 
esquerda do 
do índice 
índice especificado 
especificado em 
em uma 
uma determinadastring 
determinadastring left_adjust 
left_adjust – 
– remove 
remove todos 
todos os 
os espaços 
espaços iniciais 
iniciais em 
em umastring 
umastring precede 
precede –adiciona 
–adiciona um 
um caracter 
caracter na 
na frente 
frente de 
de uma 
uma determinadastring 
determinadastring prepend 
prepend –adiciona 
–adiciona umastring 
umastring na 
na frente 
frente de 
de uma 
uma determinadastring 
determinadastring put 
put – 
– substitui 
substitui um 
um caracter 
caracter em 
em um 
um índice 
índice especificado 
especificado por 
por um 
um determinado 
determinado caracter 
caracter replace_substring 
replace_substring –copia 
–copia caracteres 
caracteres de 
de uma 
uma outrastring 
outrastring para 
para posições 
posições específicas 
específicas dastring 
dastring dada 
dada replace_substring_all 
replace_substring_all –substitui 
–substitui todas 
todas as 
as ocorrências 
ocorrências de 
de certastring 
certastring por 
por novas 
novas right_adjust 
right_adjust – 
– remove 
remove todos 
todos os 
os espaços 
espaços finais 
finais de 
de uma 
uma determinadastring 
determinadastring set 
set –impróprio 
–impróprio para 
para discutir 
discutir aqui 
aqui share 
share –faz 
–faz com 
com que 
que astring 
astring atual 
atual compartilhe 
compartilhe o 
o texto 
texto de 
de outrastring 
outrastring ; 
; qualquer 
qualquer mudança 
mudança no 
no texto 
texto da 
da outrastring 
outrastring afetará 
afetará o 
o original 
original tail 
tail – 
– remove 
remove todos 
todos os 
os caracteres 
caracteres , 
, exceto 
exceto osn 
osn últimos 
últimos de 
de uma 
uma determinadastring 
determinadastring ( 
( 6 
6 ) 
) Inicialização– 
Inicialização– usada 
usada para 
para criar 
criar um 
um objeto 
objeto da 
da classe 
classe STRING 
STRING make 
make –aloca 
–aloca espaço 
espaço para 
para no 
no mínimon 
mínimon caracteres 
caracteres ( 
( 7 
7 ) 
) Medição 
Medição –usada 
–usada para 
para obter 
obter aspectos 
aspectos numéricos 
numéricos de 
de umastring 
umastring capacity 
capacity –espaço 
–espaço alocado 
alocado count 
count – 
– número 
número atual 
atual de 
de caracteres 
caracteres em 
em umastring 
umastring occurrences 
occurrences –número 
–número de 
de vezes 
vezes que 
que um 
um caracter 
caracter específico 
específico aparece 
aparece em 
em umastring 
umastring ( 
( 8 
8 ) 
) Saída 
Saída de 
de dados– 
dados– usada 
usada para 
para escrever 
escrever umastring 
umastring out 
out – 
– cria 
cria uma 
uma representação 
representação que 
que pode 
pode ser 
ser impressa 
impressa ( 
( 9 
9 ) 
) Remoção– 
Remoção– usada 
usada para 
para remover 
remover partes 
partes de 
de umastring 
umastring prune 
prune – 
– remove 
remove a 
a primeira 
primeira ocorrência 
ocorrência de 
de um 
um caracter 
caracter específico 
específico prune_all 
prune_all – 
– remove 
remove todas 
todas as 
as ocorrências 
ocorrências de 
de um 
um caracter 
caracter específico 
específico remove 
remove –remove 
–remove oi-ésimo 
oi-ésimo caracter 
caracter wipe_out 
wipe_out –remove 
–remove todos 
todos os 
os caracteres 
caracteres ( 
( 10 
10 ) 
) Redimensionamento– 
Redimensionamento– usada 
usada para 
para mudar 
mudar dinamicamente 
dinamicamente o 
o tamanho 
tamanho de 
de umastring 
umastring adapt_size 
adapt_size –muda 
–muda o 
o tamanho 
tamanho para 
para acomodar 
acomodar o 
o número 
número atual 
atual de 
de caracteres 
caracteres grow 
grow – 
– garante 
garante que 
que a 
a capacidade 
capacidade é 
é pelo 
pelo menos 
menos o 
o número 
número especificado 
especificado resize 
resize –realoca 
–realoca espaço 
espaço para 
para acomodar 
acomodar um 
um número 
número específico 
específico de 
de caracteres 
caracteres ( 
( 11 
11 ) 
) Relato 
Relato de 
de Status– 
Status– usada 
usada para 
para obter 
obter algumas 
algumas características 
características importantes 
importantes de 
de uma 
uma string 
string consistent 
consistent –a 
–a string 
string dada 
dada pode 
pode ser 
ser o 
o “ 
“ destino 
destino ” 
” de 
de uma 
uma operação 
operação de 
de cópia 
cópia ? 
? # 
# pg072 
pg072 # 
# nt000 
nt000 # 
# cm00 
cm00 # 
# # 
# pg073 
pg073 # 
# nt070 
nt070 # 
# cm00 
cm00 # 
# to_real 
to_real : 
: REAL 
REAL -- 
-- valor 
valor real 
real ; 
; -- 
-- por 
por exemplo 
exemplo , 
, quando 
quando aplicado 
aplicado à 
à “ 
“ 123.0 
123.0 ” 
” , 
, produzirá 
produzirá 123.0 
123.0 to_upper 
to_upper -- 
-- converte 
converte para 
para letras 
letras maiúsculas 
maiúsculas substring 
substring ( 
( n1 
n1 , 
, n2 
n2 : 
: INTEGER 
INTEGER ) 
) : 
: like 
like Current 
Current -- 
-- copia 
copia uma 
uma substring 
substring contento 
contento todos 
todos os 
os caracteres 
caracteres do 
do índice 
índice n1 
n1 ao 
ao n2 
n2 append 
append ( 
( s 
s : 
: STRING 
STRING ) 
) -- 
-- junta 
junta uma 
uma cópia 
cópia de 
de ‘ 
‘ s 
s ’ 
’ no 
no fim 
fim . 
. copy 
copy ( 
( outro 
outro : 
: like 
like Current 
Current ) 
) -- 
-- reinicializa 
reinicializa copiando 
copiando os 
os caracteres 
caracteres de 
de outro 
outro -- 
-- ( 
( isto 
isto é 
é usado 
usado também 
também pelo 
pelo ‘ 
‘ clone 
clone ’ 
’ ) 
) fill_blank 
fill_blank -- 
-- preenche 
preenche com 
com espaços 
espaços insert 
insert ( 
( s 
s : 
: like 
like Current 
Current ; 
; i 
i : 
: INTEGER 
INTEGER ) 
) -- 
-- adiciona 
adiciona ‘ 
‘ s 
s ’ 
’ à 
à esquerda 
esquerda da 
da posição 
posição ‘ 
‘ i 
i ’ 
’ na 
na string 
string atual 
atual put 
put ( 
( c 
c : 
: CHARACTER 
CHARACTER ; 
; i 
i : 
: INTEGER 
INTEGER ) 
) -- 
-- Substitui 
Substitui um 
um caractere 
caractere da 
da posição 
posição ‘ 
‘ i 
i ’ 
’ por 
por ‘ 
‘ c 
c ’ 
’ capacity 
capacity : 
: INTEGER 
INTEGER -- 
-- quantidade 
quantidade de 
de memória 
memória alocada 
alocada count 
count : 
: INTEGER 
INTEGER -- 
-- número 
número de 
de caracteres 
caracteres de 
de uma 
uma string 
string occurences 
occurences ( 
( c 
c : 
: CHARACTER 
CHARACTER ) 
) : 
: INTEGER 
INTEGER -- 
-- numera 
numera quantas 
quantas vezes 
vezes que 
que ‘ 
‘ c 
c ’ 
’ aparece 
aparece na 
na string 
string wipe_out 
wipe_out -- 
-- remove 
remove todos 
todos caracteres 
caracteres end 
end -- 
-- classe 
classe STRING 
STRING O 
O apêndice 
apêndice 1 
1 fornece 
fornece todas 
todas as 
as informações 
informações que 
que são 
são requeridas 
requeridas para 
para o 
o uso 
uso da 
da classe 
classe STRING 
STRING numa 
numa dada 
dada aplicação 
aplicação . 
. Como 
Como parte 
parte do 
do processo 
processo de 
de aprendizagem 
aprendizagem para 
para se 
se tornar 
tornar um 
um consumidor 
consumidor competente 
competente , 
, e 
e o 
o leitor 
leitor deve 
deve estudar 
estudar cuidadosamente 
cuidadosamente as 
as informações 
informações da 
da interface 
interface deste 
deste apêndice 
apêndice . 
. Uma 
Uma estratégia 
estratégia altamente 
altamente recomendável 
recomendável para 
para se 
se tornar 
tornar familiar 
familiar e 
e confortável 
confortável com 
com o 
o uso 
uso de 
de uma 
uma classe 
classe tal 
tal como 
como STRING 
STRING é 
é criar 
criar um 
um programa 
programa teste 
teste que 
que exercite 
exercite algumas 
algumas destas 
destas funções 
funções . 
. Apesar 
Apesar disto 
disto poder 
poder tomar 
tomar algum 
algum tempo 
tempo e 
e mesmo 
mesmo parecer 
parecer tedioso 
tedioso , 
, a 
a recompensa 
recompensa será 
será grande. 
grande. # 
# pg074 
pg074 # 
# nt000 
nt000 # 
# cm00 
cm00 # 
# # 
# pg075 
pg075 # 
# nt080 
nt080 # 
# cm00 
cm00 # 
# else 
else io.put_string 
io.put_string ( 
( “ 
“ str1/=mensagem 
str1/=mensagem ” 
” ) 
) end 
end io.new_line 
io.new_line -- 
-- Muda 
Muda o 
o primeiro 
primeiro caracter 
caracter da 
da string 
string str1 
str1 e 
e então 
então compara 
compara -- 
-- str1 
str1 e 
e mensagem 
mensagem novamente 
novamente str1.mirror 
str1.mirror io.put_string 
io.put_string ( 
( “ 
“ str1= 
str1= “ 
“ ) 
) io.put_string 
io.put_string ( 
( str1 
str1 ) 
) io.new_line 
io.new_line -- 
-- Inverte 
Inverte a 
a seqüência 
seqüência de 
de caracteres 
caracteres na 
na string 
string str1 
str1 str1.mirror 
str1.mirror str1.to_upper 
str1.to_upper io.put_string 
io.put_string ( 
( “ 
“ str1= 
str1= “ 
“ ) 
) io.put_string 
io.put_string ( 
( str1 
str1 ) 
) io.new_line 
io.new_line -- 
-- Obtém 
Obtém a 
a primeira 
primeira ocorrência 
ocorrência da 
da letra 
letra ‘ 
‘ G 
G ’ 
’ io.put_string 
io.put_string ( 
( “ 
“ Primeira 
Primeira ocorência 
ocorência de 
de ‘ 
‘ G 
G % 
% ’ 
’ = 
= ” 
” ) 
) io.put_int 
io.put_int ( 
( str1.index_of 
str1.index_of ( 
( ‘ 
‘ G 
G ’ 
’ ,1 
,1 ) 
) ) 
) io.new_line 
io.new_line -- 
-- Obtém 
Obtém a 
a primeira 
primeira ocorrência 
ocorrência da 
da substring 
substring “ 
“ ING 
ING ” 
” io.put_string 
io.put_string ( 
( “ 
“ Primeira 
Primeira ocorência 
ocorência de 
de ‘ 
‘ ING 
ING % 
% ’ 
’ = 
= ” 
” ) 
) io.put_int 
io.put_int ( 
( str1.substring_index 
str1.substring_index of 
of ( 
( ‘ 
‘ ING 
ING ’ 
’ ,1 
,1 ) 
) ) 
) io.new_line 
io.new_line -- 
-- Escreve 
Escreve o 
o valor 
valor da 
da string 
string true_constant 
true_constant io.put_string 
io.put_string ( 
( str1.true_constant 
str1.true_constant ) 
) io.new_line 
io.new_line -- 
-- Atribui 
Atribui a 
a substring 
substring de 
de str1 
str1 entre 
entre os 
os índices 
índices -- 
-- 24 
24 até 
até 27 
27 para 
para a 
a string 
string str2 
str2 str2 
str2 : 
: = 
= str1.substring 
str1.substring ( 
( 24,27 
24,27 ) 
) io.put_string 
io.put_string ( 
( “ 
“ str2= 
str2= ” 
” ) 
) io.put_string 
io.put_string ( 
( str2 
str2 ) 
) io.new_line 
io.new_line -- 
-- Atribui 
Atribui str2 
str2 ao 
ao valor 
valor real 
real r 
r depois 
depois de 
de converter 
converter a 
a string 
string para 
para real 
real r 
r : 
: = 
= str2.to_real 
str2.to_real io.put_string 
io.put_string ( 
( “ 
“ r= 
r= ” 
” ) 
) # 
# pg076 
pg076 # 
# nt000 
nt000 # 
# cm00 
cm00 # 
# # 
# pg077 
pg077 # 
# nt000 
nt000 # 
# cm00 
cm00 # 
# # 
# pg078 
pg078 # 
# nt065 
nt065 # 
# cm00 
cm00 # 
# Como 
Como a 
a entrada 
entrada de 
de dados 
dados é 
é obtida 
obtida no 
no programa 
programa ? 
? A 
A dispositivo 
dispositivo de 
de entrada 
entrada padrão 
padrão é 
é o 
o teclado 
teclado . 
. O 
O segmento 
segmento seguinte 
seguinte de 
de código 
código ilustra 
ilustra como 
como se 
se poderia 
poderia entrar 
entrar com 
com um 
um valor 
valor real 
real , 
, um 
um valor 
valor inteiro 
inteiro , 
, e 
e um 
um valor 
valor de 
de caracter 
caracter . 
. meu_inteiro 
meu_inteiro : 
: INTEGER 
INTEGER meu_caracter 
meu_caracter : 
: CHARACTER 
CHARACTER meu_real 
meu_real : 
: REAL 
REAL io.readint 
io.readint -- 
-- comando 
comando de 
de leitura 
leitura io.readchar 
io.readchar -- 
-- comando 
comando de 
de leitura 
leitura io.readreal 
io.readreal -- 
-- comando 
comando de 
de leitura 
leitura meu_inteiro 
meu_inteiro : 
: =io.lastint 
=io.lastint -- 
-- consulta 
consulta meu_caracter 
meu_caracter : 
: =io.lastchar 
=io.lastchar -- 
-- consulta 
consulta meu_real 
meu_real : 
: =io.lastreal 
=io.lastreal –- 
–- consulta 
consulta Os 
Os comandos 
comandos de 
de entrada 
entrada usados 
usados sãoreadint 
sãoreadint , 
, readchar 
readchar , 
, e 
e readreal 
readreal . 
. Cada 
Cada um 
um é 
é transmitido 
transmitido através 
através do 
do objeto 
objeto padrão 
padrão de 
de entrada 
entrada e 
e saída 
saída ( 
( io 
io ) 
) . 
. Os 
Os valores 
valores que 
que de 
de entrada 
entrada ( 
( informação 
informação datilografada 
datilografada no 
no teclado 
teclado ) 
) são 
são obtidos 
obtidos pelas 
pelas consultaslastint 
consultaslastint , 
, lastchar 
lastchar e 
e lastreal 
lastreal , 
, novamente 
novamente , 
, transmitidos 
transmitidos pelo 
pelo objeto 
objeto padrão 
padrão de 
de entrada 
entrada e 
e saída 
saída ( 
( io 
io ) 
) . 
. O 
O protocolo 
protocolo rigoroso 
rigoroso de 
de separação 
separação entre 
entre comados 
comados e 
e consultas 
consultas é 
é observado 
observado aqui 
aqui . 
. Embora 
Embora possa 
possa ser 
ser tentador 
tentador fazerreadint 
fazerreadint retornar 
retornar um 
um inteiro 
inteiro , 
, o 
o ponto 
ponto de 
de vista 
vista examinado 
examinado aqui 
aqui é 
é que 
que o 
o comandoreadintmuda 
comandoreadintmuda o 
o estado 
estado da 
da situação 
situação interna 
interna do 
do objetoio 
objetoio e 
e a 
a consultalastint 
consultalastint , 
, retorna 
retorna parte 
parte de 
de seu 
seu estado 
estado interno 
interno . 
. Existem 
Existem muitos 
muitos comandos 
comandos de 
de entrada 
entrada e 
e saída 
saída de 
de comandos 
comandos além 
além de 
de consultas 
consultas definidas 
definidas na 
na classe 
classe STD_FILES 
STD_FILES de 
de Eiffel 
Eiffel que 
que padronizam 
padronizam as 
as entradas 
entradas e 
e saídas 
saídas . 
. Uma 
Uma porção 
porção da 
da interface 
interface desta 
desta classe 
classe é 
é dada 
dada na 
na listagem 
listagem 3.9 
3.9 . 
. Porção 
Porção da 
da interfase 
interfase para 
para classe 
classe STD_FILES 
STD_FILES class 
class interface 
interface STD_FILES 
STD_FILES feature 
feature -- 
-- muda 
muda elemento 
elemento new_line 
new_line -- 
-- Escreve 
Escreve uma 
uma mudança 
mudança de 
de linha 
linha na 
na saída 
saída padrão 
padrão put_char 
put_char ( 
( c 
c : 
: CHARACTER 
CHARACTER ) 
) -- 
-- Escreve 
Escreve ´c´ 
´c´ no 
no final 
final da 
da saída 
saída padrão 
padrão . 
. # 
# pg079 
pg079 # 
# nt095 
nt095 # 
# cm00 
cm00 # 
# put_double 
put_double ( 
( d 
d : 
: DOUBLE 
DOUBLE ) 
) -- 
-- escreve 
escreve ‘ 
‘ d 
d ’ 
’ no 
no final 
final da 
da saída 
saída default 
default put_int 
put_int ( 
( i 
i : 
: INTEGER 
INTEGER ) 
) -- 
-- escreve 
escreve ‘ 
‘ i 
i ’ 
’ no 
no final 
final de 
de saída 
saída default 
default put_real 
put_real ( 
( r 
r : 
: REAL 
REAL ) 
) -- 
-- escreve 
escreve ‘ 
‘ r 
r ’ 
’ no 
no final 
final de 
de saída 
saída default 
default put_string 
put_string ( 
( s 
s : 
: STRING 
STRING ) 
) -- 
-- escreve 
escreve ‘ 
‘ s 
s ’ 
’ no 
no final 
final de 
de saída 
saída default 
default feature 
feature -- 
-- entrada 
entrada de 
de dados 
dados next_line 
next_line -- 
-- move 
move para 
para a 
a próxima 
próxima linha 
linha na 
na entrada 
entrada padrão 
padrão readchar 
readchar -- 
-- lê 
lê um 
um novo 
novo caracter 
caracter da 
da entrada 
entrada padrão 
padrão -- 
-- Disponibiliza 
Disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ lastchar 
lastchar ’ 
’ readdouble 
readdouble -- 
-- lê 
lê um 
um novo 
novo double 
double da 
da entrada 
entrada padrão 
padrão -- 
-- Disponibiliza 
Disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ lastdouble 
lastdouble ’ 
’ readint 
readint -- 
-- lê 
lê um 
um novo 
novo inteiro 
inteiro da 
da entrada 
entrada padrão 
padrão -- 
-- disponibiliza 
disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ lastint 
lastint ’ 
’ readline 
readline -- 
-- lê 
lê uma 
uma linha 
linha da 
da entrada 
entrada padrão 
padrão -- 
-- disponibiliza 
disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ laststring 
laststring ’ 
’ readreal 
readreal -- 
-- lê 
lê um 
um novo 
novo real 
real da 
da entrada 
entrada padrão 
padrão -- 
-- disponibiliza 
disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ lastreal 
lastreal ’ 
’ readstream 
readstream ( 
( nb_char 
nb_char : 
: INTEGER 
INTEGER ) 
) -- 
-- lê 
lê uma 
uma string 
string de 
de no 
no máximo 
máximo ‘ 
‘ nb_char 
nb_char ’ 
’ caracteres 
caracteres da 
da entrada 
entrada padrão 
padrão -- 
-- disponibiliza 
disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ laststring 
laststring ’ 
’ readword 
readword -- 
-- lê 
lê uma 
uma nova 
nova palavra 
palavra da 
da entrada 
entrada padrão 
padrão -- 
-- disponibiliza 
disponibiliza o 
o resultado 
resultado em 
em ‘ 
‘ laststring 
laststring ’ 
’ feature 
feature – 
– relatório 
relatório de 
de status 
status https 
https : 
: //outline.com/YnEMGA 

