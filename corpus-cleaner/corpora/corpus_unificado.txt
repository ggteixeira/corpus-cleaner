                Android  Angular  Delphi  Docker  Engenharia de Software  Flutter  HTML e CSS  Java  JavaScript  Kotlin  Nodejs  Net  PHP  Python  React  React Native  Spring  SQL e Banco de dados Ver todos Exercite  Cursos Vagas de programação Contrate um programador Artigos Vídeos Projetos Revistas Fórum Ranking teste grátis Empresarial Esqueceu o login ou a senha Cadastrese                 Invista em você Saiba como a DevMedia pode ajudar sua carreira
                        
                 Este Artigo faz parte da Revista
                        Artigos Neste
 contexto neste artigo apresentaremos alguns modelos de ciclo de vida quais
 sejam Cascata Modelo em V
 Incremental Evolutivo RAD Prototipagem
 Espiral Modelo de Ciclo de Vida Associado ao RUP O ciclo de vida é a estrutura contendo processos atividades e tarefas envolvidas no
 desenvolvimento operação e manutenção de um produto de software abrangendo a
 vida do sistema desde a definição de seus requisitos até o término de seu uso O modelo de ciclo de vida é a primeira escolha a ser feita no processo de software A
 partir desta escolha definirseá desde a maneira mais adequada de obter as
 necessidades do cliente até quando e como o cliente receberá sua primeira
 versão operacional do sistema  Processo de software é o conjunto de atividades que
 constituem o desenvolvimento de um sistema computacional Estas atividades são agrupadas
 em fases como definição de requisitos análise projeto desenvolvimento
 teste e implantação  Em cada fase são definidas além das suas atividades
 as funções e responsabilidades de cada membro da equipe e como produto
 resultante os artefatos O que diferencia um processo de software do outro é a
 ordem em que as fases vão ocorrer o tempo e a ênfase dados a cada fase as atividades
 presentes e os produtos entregues  Com o crescimento do mercado de software houve uma
 tendência a repetiremse os passos e as práticas que deram certo A etapa
 seguinte foi a formalização em modelos de ciclo de vida  Em outras palavras os modelos de ciclo de vida são o esqueleto
 ou as estruturas prédefinidas nas quais encaixamos as fases do processo De
 acordo com a   o ciclo de vida é a Estrutura contendo
 processos atividades e tarefas envolvidas no desenvolvimento operação e
 manutenção de um produto de software abrangendo a vida do sistema desde a
 definição de seus requisitos até o término de seu uso O modelo de ciclo de vida é a primeira escolha a ser
 feita no processo de software A partir desta escolha definirseá desde a
 maneira mais adequada de obter as necessidades do cliente até quando e como o
 cliente receberá sua primeira versão operacional do sistema Não existe um modelo ideal O perfil e complexidade do
 negócio do cliente o tempo disponível o custo a equipe o ambiente
 operacional são fatores que influenciarão diretamente na escolha do ciclo de
 vida de software a ser adotado  Da mesma forma também é difícil uma empresa adotar um
 único ciclo de vida Na maior parte dos casos vêse a presença de mais de um
 ciclo de vida no processo Os ciclos de vida se comportam de maneira sequencial
 fases seguem determinada ordem eou incremental divisão de escopo eou iterativa
 retroalimentação de fases eou evolutiva software é aprimorado  Neste contexto neste artigo apresentaremos alguns modelos
 de ciclo de vida quais sejam Formalizado por Royce em 1970 é o modelo mais antigo
 Suas atividades fundamentais são O modelo em cascata tem o grande mérito de ser o
 primeiro a impor o planejamento e o  gerenciamento ao processo de software  que
 antes era casual O nome cascata foi atribuído em razão da
 sequência das fases onde cada fase só começa quando a anterior termina e da
 transmissão do resultado da fase anterior como entrada para a fase atual o fim
 de cada fase resulta em um documento aprovado Nesse modelo portanto é dada
 muita ênfase às fases de análise e projeto antes de partir para a programação a
 fim de que o objetivo do software esteja bem definido e que sejam evitados
 retrabalhos conforme podemos observar na   Devido à sua simplicidade o modelo em cascata é fácil
 de ser entendido pelo cliente É um modelo que supõe um início e fim claro e
 determinado assim como uma estimativa precisa de custo logo no início fatores
 importantes na conquista do cliente O problema se dá depois quando o cliente após esperar
 até o fim do processo para receber a primeira versão do sistema pode não
 concordar com ela Apesar de cada fase terminar com uma documentação aprovada
 certamente haverá lacunas devido a requisitos mal descritos pelo cliente mal
 entendido pelo analista ou por mudança de cenário na organização que exija
 adaptação de requisitos O modelo em cascata não prevê revisão de fases Assim o risco é muito alto principalmente para
 sistemas complexos de grande porte afinal o modelo em cascata pressupõe uma
 realidade estática e bem conhecida comparado a uma linha de produção fabril
 Mas a rotina do negócio do cliente não reflete isso Manipulação de usuários
 com diferentes habilidades ambientes operacionais distintos tecnologia em
 crescente evolução necessidade de integração com outros sistemas em
 plataformas antigas ou mais novas mudanças organizacionais até mudanças na
 legislação do municípioestadopaís pedem um modelo mais flexível Por outro lado o modelo em cascata adéquase bem como
 um submodelo para outros modelos Por exemplo no modelo cascata
 com realimentação permitese que a cada descoberta da fase posterior
 haja uma correção da fase anterior Neste modelo do Ministério de Defesa da Alemanha
 1992 o modelo em cascata é colocado em forma de V Do lado
 esquerdo do V ficam da análise de requisitos até o projeto a codificação fica no
 vértice e os testes desenvolvimento implantação e manutenção à direita conforme
    A característica principal desse modelo que o
 diferencia do modelo em cascata é a ênfase dada à verificação e validação
 cada fase do lado esquerdo gera um plano de teste a ser executado no lado
 direito  Mais tarde o código fonte será testado do mais baixo
 nível ao nível sistêmico para confirmar os resultados seguindo os respectivos
 planos de teste o teste de unidade valida o projeto do programa o  teste de
 sistema  valida o projeto de sistema e o teste de aceitação do cliente valida a
 análise de requisitos  Da mesma forma que o modelo em cascata o cliente só
 recebe a primeira  versão do software  no final do ciclo mas apresenta menos
 risco devido ao planejamento prévio dos testes nas fases de análise e projeto Neste modelo de Mills em 1980 os requisitos do
 cliente são obtidos e de acordo com a funcionalidade são agrupados em
 módulos Após este agrupamento a equipe junto ao cliente define a prioridade
 em que cada módulo será desenvolvido escolha baseada na importância daquela
 funcionalidade ao negócio do cliente Cada módulo passará por todas as fases
 cascata de projeto conforme se observa na   e será entregue ao cliente um software operacional
 Assim o cliente receberá parte do produto final em menos tempo Como o cliente já trabalhará no primeiro incremento ou
 módulo é muito importante que haja uma especial atenção na integração dos
 incrementos o que exige muito planejamento afinal não é aceitável que o
 cliente se depare com muitos erros de software a cada incremento tampouco que
 a cada incremento ele precise se readaptar a grandes mudanças Uma atenção
 especial deve ser dada ao agrupamento dos requisitos e à qualidade no
 desenvolvimento das funções comuns a todo o sistema que inevitavelmente deverão
 ser entregues no primeiro incremento Desta forma além de atender as necessidades mais
 críticas do cliente mais cedo as partes mais importantes serão também as
 partes mais testadas no ambiente real Será mais difícil gastar recursos em
 conceitos errados ou que um mau entendimento dos requisitos alcance uma escala
 difícil de ser ajustada visto que durante todo o projeto haverá o feedback do
 cliente a opinião do cliente realimenta o sistema Esse ciclo de vida não exige uma equipe muito grande
 pois a modularização diminui o escopo de cada incremento e não há um
 paralelismo nas atividades Haverá por outro lado uma dificuldade em manter a
 documentação de cada fase atualizada devido às melhorias no sistema e aos
 ajustes de requisitos solicitados pelos clientes Neste modelo os requisitos são adquiridos em paralelo à evolução do sistema O
 modelo evolutivo parte do princípio que o cliente não expõe todos os
 requisitos ou os requisitos não são tão bem conhecidos ou os requisitos ainda
 estão sofrendo mudanças Desta forma a análise é feita em cima dos requisitos
 conseguidos até então e a primeira versão é entregue ao cliente O cliente usa
 o software no seu ambiente operacional e como feedback esclarece o que não
 foi bem entendido e dá mais informações sobre o que precisa e sobre o que
 deseja ou seja mais requisitos   A
 partir deste feedback nova análise projeto e desenvolvimento são realizados
 e uma segunda versão do software é entregue ao cliente que novamente retorna
 com mais feedbacks Assim o software vai evoluindo se tornando mais completo
 até atender todas as necessidades do cliente dentro do escopo estabelecido Temse
 assim a versão final pelo menos até novos requisitos aparecerem ver   A participação constante do cliente é uma grande
 vantagem desse modelo o que diminui o risco de má interpretação de requisitos
 dos modelos que só oferecem a primeira versão do software no final do processo
 Da mesma forma o software já atende algumas necessidades do cliente muito mais
 cedo no processo Não é dada muita ênfase à documentação pois a geração
 de versões torna este trabalho muito árduo Além disso como a análise de
 requisitos e desenvolvimento estão sempre acontecendo a preocupação em
 documentar todo o processo pode fazer com que haja atrasos na entrega Há uma alta necessidade de gerenciamento nesse tipo de
 modelo pois a falta de documentação adequada o escopo de requisitos não
 determinado o software crescendo e estando ao mesmo tempo em produção podem
 ter consequências negativas Seguem alguns exemplos o sistema nunca terminar
 pois o cliente sempre pede uma alteração o sistema não ter uma estrutura
 robusta a falhas nem propícia a uma fácil manutenção pelas constantes alterações
 o cliente mudar de ideia radicalmente entre uma versão e outra ou revelar um
 requisito que exija uma versão bem diferente da anterior fazendo com que toda
 a base de dados ou de programação precise ser revista Os citados problemas podem
 implicar em um grande ônus financeiro e de tempo É muito importante que o cliente esteja ciente do que
 se trata este ciclo de vida e que sejam esclarecidos os limites de escopo e de
 tempo para que não haja frustrações de expectativas Este modelo formalizado por James Martin em 1991 como
 uma evolução da prototipagem rápida destacase pelo desenvolvimento rápido
 da aplicação O ciclo de vida é extremamente comprimido de forma a encontraremse
 exemplos na literatura de duração de 60 e 90 dias É ideal para clientes
 buscando lançar soluções pioneiras no mercado É um ciclo de vida incremental iterativo onde é
 preferível que os requisitos tenham escopo restrito A diferença principal do
 ciclo anterior é o forte paralelismo das atividades requerendo assim módulos
 bastante independentes Aqui os incrementos são desenvolvidos ao mesmo tempo
 por equipes diferentes Além do paralelismo a conquista do baixo tempo se dá
 graças à compressão da fase de requisitos e da fase de implantação Isso
 significa que na obtenção dos requisitos costumamse optar por metodologias
 mais dinâmicas e rápidas como workshops ao invés de entrevistas Permitese
 também um desenvolvimento inicial no nível mais alto de abstração dos
 requisitos visto o envolvimento maior do usuário e visibilidade mais cedo dos
 protótipos ver   As fábricas de software que resolvem por adotar este
 modelo devem ter uma estrutura prévia diferencial de pessoas e ferramentas
 tais como Os sistemas desenvolvidos no ciclo RAD tendem a ter
 uma padronização de telas muito forte devido a bibliotecas reutilizáveis e
 templates porém tendem a perder em desempenho do sistema e na análise de risco
 atividades estas que demandam tempo em qualquer projeto Assim é preferível
 seu uso para softwares de distribuição pequena Prototipagem é a construção de um exemplar do que foi
 entendido dos requisitos capturados do cliente Pode ser considerado um ciclo
 de vida ou pode ser usado como ferramenta em outros ciclos de vida Um protótipo em engenharia de software pode ser o
 desenho de uma tela um software contendo algumas funcionalidades do sistema
 São considerados operacionais quando já podem ser utilizados pelo cliente no
 ambiente real ou seja em produção ou não operacionais não estão aptos para
 serem utilizados em produção Os protótipos podem ser descartados ou
 reaproveitados para evoluírem até a versão final No ciclo de vida de prototipagem não é exigido um
 conhecimento aprofundado dos requisitos num primeiro momento Isso é bastante
 útil quando os requisitos não são totalmente conhecidos são muitos complexos
 ou confusos Desta forma se o cliente não sabe expressar o que deseja o que
 ocorre bastante quando não é um sistema legado a melhor maneira de evitar que
 se perca tempo e recursos com uma má interpretação é a construção de modelos
 ou seja de protótipos do que o software faria Assim o cliente experimentará na prática como o
 sistema ou parte dele funcionará A partir desse primeiro contato o cliente
 esclarece o que não foi bem interpretado aprofunda alguns conceitos e até
 descobre um pouco mais sobre o que realmente precisa A partir deste feedback
 novos requisitos são colhidos e o projeto ganha maior profundidade Outro
 protótipo é gerado e apresentado ao cliente que retorna com mais feedbacks Ou
 seja o cliente participa ativamente do início ao fim do processo ver   A geração de protótipos pode ser facilitada por
 ferramentas geradoras de telas de relatórios poupando esforço de programação
 e diminuindo o tempo de entrega Cada protótipo tem uma finalidade diferente Um
 protótipo pode servir para esclarecer dúvidas sobre uma rotina demonstrar a
 aparência das telas conteúdo de tabelas formato de relatórios Os protótipos
 podem também ser utilizados para apresentar opções ao cliente para que ele escolha
 a que mais lhe agrade como opções de navegação de fluxo de telas entre
 outras Por isso é muito importante explicar previamente ao
 cliente que protótipos são apenas modelos para melhorar a comunicação Caso
 contrário pode causar uma frustração por não funcionar corretamente ter
 funções limitadas ter resposta lenta ou a aparência ruim Certamente um
 protótipo construído para esclarecer uma rotina provavelmente terá uma cara
 feia para demonstrar a aparência das telas não terá funcionalidade para apresentar
 o formato dos relatórios os dados não serão coerentes  O cliente fará comparações entre o sistema final e o
 que foi prometido através do protótipo e pode ficar insatisfeito Por
 exemplo geralmente o protótipo não acessa rede ou banco de dados pois as
 informações são desenhadas com a tela fazendo com que tudo fique muito
 rápido Já no ambiente operacional haverá uma degradação de desempenho e o
 cliente pode se decepcionar Faz parte de um bom gerenciamento no modelo de
 prototipagem planejar se quais e que funções dos protótipos não operacionais
 serão reaproveitadas na versão operacional para que sua confecção siga as  boas
 práticas de engenharia de software  Os protótipos não operacionais são construídos
 com pouca qualidade em prol da velocidade Ou seja não há preocupação na
 programação em refinar o código em usar comentários em aproveitar eficientemente
 os recursos de hardware e software na manutenção no reuso de componentes e na
 integração com outras funções ou sistemas Com certeza será um problema se a
 equipe sucumbir à pressão do cliente cada vez mais ansioso para ver a versão
 final daquele trabalho e transformar à revelia protótipos não operacionais em
 operacionais O gerente também deve se preocupar com o escopo do projeto
 versus a quantidade de protótipos para que não se perca muito tempo nesse
 processo tampouco se transforme num processo de tentativa e erro  Não é uma tarefa fácil documentar o modelo de ciclo de
 vida baseado na prototipagem devido aos requisitos não serem totalmente
 conhecidos no primeiro momento e a consequente quantidade de mudanças
 ocorridas  O modelo proposto por Boehm em 1988 trata de uma
 abordagem cíclica das fases do processo onde a cada volta ou iteração temos
 versões evolucionárias do sistema Este é um modelo guiado por risco suporta sistemas
 complexos eou de grande porte onde falhas não são toleráveis Para isso a
 cada iteração há uma atividade dedicada à análise de riscos e apoiada através
 de geração de protótipos não necessariamente operacionais desenhos de tela
 por exemplo para que haja um envolvimento constante do cliente nas decisões Cada iteração ou volta é dedicada a uma fase do
 processo de vida de um software viabilidade do projeto definição de requisitos
 desenvolvimento e teste Ao mesmo tempo cada volta é seccionada em 4 setores
 da seguinte forma Ou na representação gráfica deste modelo conforme   Os quatro setores são explicados da seguinte forma Ou seja cada volta ou iteração do processo é vista por
 quatro ângulos  No final da Viabilidade do Projeto teremos como
 resultado a Concepção das Operações da Definição de Requisitos o produto serão
 os requisitos no final do Desenvolvimento e Testes o projeto é criado e os testes
 habilitados Podese parar por aí podese incluir mais fases pode a espiral
 ficar adormecida até uma nova alteração do sistema se requisitada e desta
 forma estender até o fim de vida do sistema Neste modelo apenas o início é definido A evolução e
 amadurecimento dos requisitos demandam tempo ajustável assim como custo Isto
 torna o sistema difícil de ser vender ao cliente e exige um alto nível de
 gerenciamento em todo o processo Derivado  da UML  e do Processo Unificado de
 Desenvolvimento de Software o RUP Rational Unified Process é um modelo de
 processo iterativo e incremental dividido em fases orientado a casos de uso Possui
 framework esqueleto de processo e manuais que guiam na utilização das melhores
 práticas de especificação de projeto Vídeo Aula sobre Ciclo de Vida de
 Software parte 3 revista Engenharia de Software Magazine  O objetivo do RUP é produzir software com qualidade
 melhores práticas de engenharia de software que satisfaça as necessidades dos
 clientes dentro de um prazo e orçamento estabelecidos Este modelo foi desenvolvido pela Rational Software
 Corporation e adquirido pela IBM que o define da seguinte maneira IBM
 Rational Unified Process® ou RUP é uma plataforma de processo de
 desenvolvimento de software configurável que oferece melhores práticas
 comprovadas e uma arquitetura configurável ver   O RUP possui quatro fases de negócio O nome de cada fase revela o que será entregue por ela ver   modelo de requisitos desenvolvimento para o software A iteração no RUP tem por objetivo minimizar os riscos
 Como pode ser visto na   a
 iteração pode acontecer dentro de cada fase gerando incrementos ou em todo o
 processo Por exemplo dentro da concepção a iteração pode ocorrer até que
 todos os requisitos sejam perfeitamente entendidos O plano de iterações
 identificará quais e quantas iterações são necessárias durante o processo Em geral essas fases demandam esforço e programação
 diferentes Para um projeto de médio porte de acordo com o fabricante será
 seguida a distribuição apresentada na   O RUP usa templates que descrevem o que é esperado no resultado
 de cada fase ou cada iteração IBM 2004 identificando as competências e
 responsabilidades arquiteto analista testador as atividades e os
 artefatos  Para descrever as atividades codificação de uma
 classe integração de sistemas o RUP faz o uso de manuais guidelines
 que descrevem técnicas e heurísticas e de Mentores de Ferramentas que
 explicam o uso da ferramenta para executar a atividade Os artefatos de cada fase
 documentos modelos códigos etc são criados juntamente com templates e exemplos
 para melhor entendimento da equipe e do cliente ver   Os templates também ajudam no gerenciamento pois
 definem o que precisa ser executado Servem também como guia para que as boas
 práticas de especificação de projeto não sejam esquecidas no processo de
 desenvolvimento daquele software Assim toda a preocupação dada pelo RUP em disciplinar
 o processo através de frameworks guias templates faz com que haja uma melhor
 alocação de pessoas na equipe padronização do sistema visão concreta do
 andamento do projeto A escolha do RUP deve ser feita por empresas de
 software com prévia experiência pois a definição de framework templates
 guias métodos entre outros demandam tempo e exigem aderência às boas
 práticas de processo de software Finalizando este artigo sobre os   segue uma tabela comparativa das principais características
 que devem ser observadas antes de escolher o ciclo ou os ciclos de vida a serem
 adotados ver   Vale ressaltar que conforme já mencionado
 anteriormente não existe um modelo ideal e na maioria dos softwares
 desenvolvidos são utilizados mais de um modelo de ciclo de vida Entre de cabeça no REST Devmedia 
                             Cadastrese
                          
                         Conheça agora
                      
                                 Cadastrese
                              Plataforma para Programadores 
 					Hospedagem web por Porta 80 Web Hosting
 				 Menu Revistas Fale conosco Trabalhe conosco Assinatura para empresas 
 					Tecnologias
 				 FrontEnd NET PHP Java Delphi JavaScript Python Mobile Banco de Dados Eng de Software                             
             Hospedagem web por Porta 80 Web Hosting
            Av Ayrton Senna 3000 Shopping Via Parque grupo 3087  Barra da Tijuca  Rio de Janeiro  RJ Utilizamos cookies para fornecer uma melhor experiência para nossos usuários Para saber mais sobre o uso de cookies  consulte nossa  política de privacidade  Ao continuar navegando em nosso site você concorda com a nossa política 

Open in app Sign in Bárbara Scarambone Rafa Spoladore Ψ Jan 8 2015 Em certa reunião sobre as novidades da nova versão de determinado software em uma grande empresa qualquer o diretor da área de desenvolvimento apresentou a correção de um antigo problema — que prejudicou por um período considerável a produtividade dos usuários desse software ao não lhes dar toda a comodidade para se executar um trabalho — como uma nova feature ou seja como um recurso inédito e não um ajuste óbvio e premente desde sempre a partir de um equívoco anterior Interpelado por um dos presentes com “ ” o diretor ficou meio um tanto sem jeito fez alguma piada para quebrar o gelo e passou para o próximo item da apresentação sem qualquer reflexão maior sobre essa brecha na lógica da questão É o caso contado por um amigo já escolado pelos meandros das  do universo corporativo da TI e do qual podemos extrair um importante ensinamento   A aplicação dessa ideia — de que a correção de um determinado  bug  num software não pode ser apresentado como uma nova feature — impactaria diretamente até nossa política por exemplo Bugs corrigidos mas erroneamente rotulados como novidades vindas de pseudoinovação são frutos da mentalidade tacanha de ambientes corporativos que não conseguem ou nem ao menos tentam o uso do bom senso entre seus profissionais A competitividade interpessoal em ritmo e nível de vestibular comum mas estranhamente ditada pelo RH — o departamento menos humano nas grandes empresas —  implanta nos envolvidos uma percepção de luta pela sobrevivência fazendoos trabalhar na defensiva sem a premissa de usar o bom senso que nos guia para a beleza da simplicidade como é preciso aprender com os erros para melhorar ao longo do tempo é preciso assumir e corrigir “bugs” para entregar melhores resultados Outro caso parecido contado por esse mesmo amigo exemplifica essas desnecessárias atitudes defensivas o desenvolvedor não queria reconhecer o problema como um bug do software pois a seu ver o projeto não contemplou determinada “condição inicial” entre outras justificativas pseudoretóricofilosóficas O diretor usando de bom senso interrompeuo dizendo “Qualquer novo desenvolvimento do software que frustra a experiência do nosso usuário é um bug” Trabalhando próximo ao pessoal de TI há mais de 15 anos sei que muitos episódios assim ainda se repetem em várias empresas com departamentos de desenvolvimento de software Basicamente o que acontece é que nas interações intradepartamentais necessárias para se desenvolver um software em meio a centenas ou mesmo milhares de reuniões que ocupam horas e mais horas com discussão e perda de tempo a maior ausência sentida ao longo de todo o processo afinal de contas é sempre a do usuário desse software Mas quem é o “usuário” do software Em TI é bem provável que seja o ser humano que vai operar alguma interface Nas ruas das cidades ou no interior do país são os cidadãos os “usuários” do ambiente público e que carregam por aí todas as expectativas de não verem frustrados seus desejos e necessidades quando instados a viver a própria vida na cadência disponível no andar da carruagem da história da civilização humana Assim para os meros mortais distantes das complexidades de TI e suas exatidões nos é dada a oportunidade de melhorar decisões atitudes e motivações na prática da rotina de trabalho ou na particular ao lembrar que somos nós os usuários das decisões políticas E que grande parte dos atos dos políticos brasileiros têm sido a correção de muitos equívocos causados por eles próprios E que se corrigidos ainda nos são vendidas obviedades como se fossem avanços importantes Quer ver Candidatos ao governo do Estado de São Paulo anunciavam entre suas propostas na recente eleição o benefício da unificação dos bilhetes de transporte metropolitano Assim pretendiam introduzir a seguinte “novidade” a comodidade de se usar um único bilhete para ônibus metrô trem e também todo o transporte público no Grande ABCD etc Um bilhete unificado entre sistemas de transporte público não é um novo recurso mas só a correção de bug Transporte público unificado não é inovação é obviedade quando se pensa no usuário quando você se coloca no lugar de quem vai usar o “sistema” Quer ver mais A Anatel divulgou  o seguinte como uma grande novidade aprovou uma “resolução conjunta com a Agência Nacional de Energia Elétrica Aneel que estabelece o preço de referência para o compartilhamento de postes entre distribuidoras de energia elétrica e prestadoras de serviços de telecomunicações” Essa “inovação” de otimizar o uso de um poste — o que a agência chamou de “uso racional dos insumos” impacta diretamente sobre o custo final de alguns serviços como os de internet e sobre a própria disponibilidade e tempo de instalação destes pelas prestadoras Quem inventou o poste Há quanto tempo existem postes nas ruas Código Morse começou a usar postes no século XIX Wikipédia Ultrapassar as burocracias que sempre impedem qualquer “uso racional de insumos” não pode ser divulgado como uma “nova feature” muito menos como inovação É correção de bug quando for apenas mais uma obrigação a ferir a boa relação com o usuário final de um serviço que não pode pagar a mais por um problema existente por barreira de mera burocracia decisória Espero que essas agências já tenham também pensando e discutido e decidido e “avançado” sobre as diretrizes para o compartilhamento e “uso racional de insumos”   no subsolo das nossas calçadas para quando os postes forem eliminados da paisagem urbana não dependermos de mais uma nova resolução para o compartilhamento de nãopostes… Uncyclopedia Outro caso recente carteira de trabalho que pode ser retirada na hora sem espera Ora passa a ser um bug da feature “tirar carteira de trabalho” o prazo de conclusão que é maior do que 0 Ou seja aproximar esse prazo de zero não pode ser uma novidade mas a correção do bug que causa demora na expedição do documento Isso ainda me lembra da “correção de bug” colocado no pacote de promessas da reeleita Dilma e que a prefeitura do Haddad está implementando conseguir abrir um CNPJ em até 5 dias Mas e para fechar uma empresa Vai ser como com a carteira de trabalho no mesmo dia Será que já pensaram nisso tudo ao se colocar no lugar de quem precisa de uma carteira de trabalho ou da abertura ou fechamento de uma empresa Tem também a “melhoria” que foi passar a informar na nota fiscal a distribuição de impostos pagos por um item — correção de bug — em lugar de diminuírem ou eliminarem impostos — nova feature Os exemplos mais patéticos da venda de correção de bug como inovação são as campanhas e parte da comunicação do Governo do Estado de São Paulo — que até domínio próprio tem o   No canal de vídeos do YouTube podemos ver as  “inovações”  A mais ultrajante foi tucanar “aerotrem” para “monotrilho”  e vender como a melhor opção pois é a mais barata Ninguém aprendeu nada com o Minhocão “Roubar” a ideia do Levy Fidelix e gastar na intervenção e repaginação de um bom trajeto da superfície da cidade para mais uma opção suspensa de transporte é mesmo se colocar no lugar do usuário os cidadãos que habitam a cidade na busca da solução do problema Não terem construído o mínimo necessário de metrô que acompanhasse o aumento de demanda é um bug  e agora querem corrigilo com o aerotrem que pode até ser mais rápido e barato de se construir sim mas impacta e degrada muito mais a superfície onde vivem os “usuários” da cidade A inanição do Estado de São Paulo no metrô nos últimos 20 anos encareceu tanto essa opção de transporte a melhor numa cidade gigante como São Paulo que hoje a cidade se vê obrigada a fazer qualquer coisa apressada e “barata” para tapar o sol com a peneira e tentar dar conta de uma demanda que cresce numa velocidade muito maior que a capacidade de reação da burocracia estatal Haja inovação A campanha com os  “diferenciais” das iniciativas de habitação  diz que “inovar é” regularizar documentos investir em condomínios promover educação profissional e recuperação ambiental de áreas degradadas Ou seja tudo bug corrigido Não fazer essas coisas é simplesmente não atender as mínimas razões de existência de uma Secretaria de Habitação… Como cidadãos e eleitores precisamos resgatar e reabilitar o significado real da inovação É importante porque impacta no nosso cotidiano Já não se pode confundir inovação com correção de problemas com ajustes de bugs por melhor que seja a maquiagem a publicidade e a cara de pau de seus manipuladores O mau uso da palavra “inovação” deteriorou nossa percepção e não nos deixa enxergar no dia a dia a quantidade quase infinita de oportunidades para corrigir problemas e imperfeições que nos cercam Ao nos livrar dessa insensibilidade poderemos exigir as soluções mais óbvias o que automaticamente abre espaço para inovações reais significativas e que vão pavimentar um futuro melhor se não para nós no curto prazo ao menos para nossos filhos e netos no médio e longo prazo É o que podemos aprender com a TI Politica Sociologia Tecnologia Written by Rafa Spoladore Ψ Robert Roy Britt Elemental Apr 9 Julio Vincent Gambuto Forge Apr 10 Eric J Scholl The Startup Apr 9 Watch Explore Upgrade About Help Legal 

Skip to content contatogaeacombr    standard logo          Nada mais é do que entender uma necessidade e criar uma solução para ela através da criação de um software ou app que segue instruções básicas de código através de uma linguagem de programação De acordo com estudos da Forrester 25 dos investimentos em TI em 2013 foram destinados a softwares — incluindo o desenvolvimento de software Estimase que esse investimento tenha sido de aproximadamente US 542 bilhões quinhentos e quarenta bilhões de dólares americanos Esse montante de investimentos reforça o quanto o mercado está atento e cada vez mais direcionado aos avanços da tecnologia Com os softwares representando ¼ dos investimentos naturalmente a demanda por profissionais bem qualificados para a área de desenvolvimento também é muito grande Prova disso é que existem cerca de 9 milhões de desenvolvedores Java no planeta desenvolvendo softwares em diversas plataformas para mais de 3 bilhões de dispositivos capazes de usufruir dos recursos da linguagem — segundo estudos da Oracle junto à Plumbr E junto à demanda das empresas por soluções e também por profissionais existem os problemas e desafios acerca do setor Esses desafios podem ser representados pelas estatísticas abaixo Neste post nos aprofundaremos mais em todos os aspectos do desenvolvimento de software que você precisa tomar conhecimento Além disso daremos algumas dicas para aplicar práticas de otimização dentro de sua empresa Fique de olho Rock Convert Atualmente a área de desenvolvimento de software — com profissionais formados nos mais diversos cursos de Tecnologia como Análise e Desenvolvimento de Sistemas e Ciências da Computação — está sendo marcada por um grande número de pessoas que compreendem múltiplas linguagens e seus respectivos conceitosfundamentos mas que ainda não sabem utilizar dessas qualidades para solucionar problemas em curto espaço de tempo Esse é somente um exemplo das dificuldades que podemos encontrar em boa parte dos desenvolvedores de software Há também os recorrentes problemas com prazos de   e com o nível de complexidade e eficiência — devido às exigências cada vez maiores dos clientes Por essas e outras que tomar medidas para o aprimoramento das   skills dos programadores é imprescindível para otimizar o desenvolvimento de software Afinal a evolução técnica faz parte da carreira de todo profissional de TI do contrário todos aqueles que permanecem na zona de conforto terão muitas dificuldades para entregar resultados às corporações E o que pode aprimorar um desenvolvedor Veja a seguir algumas práticas que fazem toda a diferença para o crescimento desse profissional Por mais que as universidades batam — e muito — na tecla de que a leitura é mais que necessária para uma boa formação a verdade é que a maioria dos estudantes de TI deixam a desejar nesse aspecto — muitas vezes por culpa das próprias instituições que não oferecem uma biblioteca apropriada e atualizada para essa área Limitação de recursos didáticos à parte o que queremos dizer aqui é que por “N” razões a leitura não representa a devida parcela na formação de programadores Com isso uma ótima iniciativa é apresentar à equipe os melhores autores e livros da atualidade de forma a qualificálos tanto em quesitos técnicos — com livros pertinentes às suas atividades na empresa —  quanto para o crescimento pessoal e profissional No mais inserir profissionais à literatura significa mostrar a eles que os livros existem para descomplicar suas vidas Ou seja a solução para muitas de suas dificuldades com programação estão nos livros Uma excelente atividade que promove o crescimento de todo e qualquer desenvolvedor de sistemas é sem dúvidas colaborar para o desenvolvimento de sistemas Open Source código aberto Alguns projetos do Google Apache e Unix por exemplo estabelecem alguns meios de interação entre especialistas ao redor do mundo Ou seja os programadores podem contribuir na prática com algum projeto ou simplesmente acompanhar as atualizações e discussões nos fóruns Em outras palavras devido às várias possibilidades — discussões interatividade e colaborações — essa prática tem como resultado uma excelente fonte de soluções Embora a teoria seja importante para tudo é inegável que um programador só consegue evoluir para atuar na área com excelência conforme a prática constante de todos os fundamentos — até mesmo os considerados “básicos” Mas quais tipos de atividades contribuem diretamente para o aprimoramento Simplesmente tudo que estiver relacionado ao campo de atuação Por exemplo quanto mais treinamos algoritmos e estrutura de dados através da resolução de problemas bem adaptados à realidade mais bem preparados ficamos para encarar os problemas reais no dia a dia dentro da empresa Os efeitos que um programador obtém ao leracompanharseguir um blog de qualidade preferencialmente de uma autora referência na área de TI são basicamente os mesmos que a leitura de livros só que em outras proporções — já que livros são frutos de um trabalho muito mais árduo e embasado em conhecimento e pesquisas do que um blog post Acompanhar um blog é uma atitude muito positiva pelo fato de que é possível interagir dentro de um post Se as publicações são de fato feitas por uma grande especialista na área podese tirar dúvidas e iniciar um debate saudável sobre o assunto sem quaisquer barreiras Isso com certeza colabora para que um programador evolua ao longo do tempo Porém como procuramos enfatizar tanto para blog quanto para livros é essencial que o conteúdo seja autêntico e escrito por bons autores — do contrário ocorrerá um verdadeiro retrocesso De certa forma essa prática também não passa de uma leitura — o que só ressalta a importância de ler Entretanto agora estamos falando de uma leitura muito mais “pesada” que envolve as linguagens de programação Um exemplo de como fazer isso é lendo o código de um projeto Open Source — de qualidade é claro Ao se deparar com a sua estrutura embora pareça uma tarefa muito complexa é possível entender a maneira com o desenvolvedor trabalhou o que está sendo feito e por qual razão e conforme descobrir seus métodos parâmetros e raciocínio receberá um grande aprendizado de um desenvolvedor mais consolidado no mercado Caso a questão fosse única e exclusivamente a redução de custos certamente muitas empresas não enxergariam dificuldades em fazer isso Acontece que há um grande desafio por traz dessa redução que é fazer com que ela não interfira no desenvolvimento do produto e na sua qualidade final Você sabia que um bom planejamento de contrato por exemplo pode gerar uma redução de custos inicial de 25 a 45 Segundo o diretor da consultoria Pace Harmon Steven Kirz em uma   além dessa redução inicial há uma estimativa de que a diminuição alcance a margem de 50 a 75 após cinco anos Ainda de acordo com Kirz os custos ainda podem ser mais reduzidos se as corporações deixassem de lado o método mais comum de contratação que é a por tempo de projeto e trabalhassem com um valor préfixado de desenvolvimento Entretanto o especialista ainda ressalta outros fatores muito importantes para a redução de custos com TI no geral mas que aplicamse perfeitamente aos desenvolvedores de software Acompanhe logo abaixo quais são esses fatores No mercado de TI tanto os empreendedores como os próprios profissionais da área percebem que há nomenclaturas diferentes para um mesmo tipo de cargo Além de gerar certa confusão a maior consequência da falta de padronização nos nomes é a própria falta de um teto salarial A solução para eliminar os custos adicionais por conta de algo simples como uma nomenclatura é fazer com que a empresa de Outsourcing contratada esteja de pleno acordo com a nomenclatura proposta e sobretudo com as responsabilidades requisitos e certificações correspondentes ao cargo São vários os detalhes envolvidos na contratação de profissionais no desenvolvimento de software Afinal cada posição exige diferentes níveis de conhecimento em diferentes tipos de ferramentas linguagens plataformas e infraestruturas Como os profissionais de nível mais elevado de conhecimento tendem a exigir remunerações diferenciadas é fundamental que ao fazer uma proposta a empresa tenha ciência de que os valores cobrem os requisitos “adicionais” que possam ser necessários na função Uma das maiores finalidades em contratar profissionais experientes é a segurança oferecida pelos mesmos A garantia de que o colaborador sofrerá com obstáculos que ofereceriam riscos a profissionais com menos bagagem no mercado O revés disso tudo é que muitas vezes os profissionais experientes — e mais caros — assumem funções que poderiam ser facilmente exercidas por outros profissionais com menores níveis de experiência Ou seja acabase contanto com uma experiência “desnecessária” Portanto a sugestão para todas as empresas é a atribuição de diferentes níveis de conhecimentoexperiência para todos os cargos Assim além de delegar tarefas correspondentes a cada nível haverá uma considerável redução de custos por conta dos salários menores Agora falando sobre o que não foi mencionado na entrevista de Steven Kirz temos como sugestão o investimento em eficientes sistemas de monitoramento Trabalhar com monitoramento é uma tarefa que impõe desafios mas que agrega muitos valores ao desempenho do departamento de TI No setor de desenvolvimento por exemplo uma possível indisponibilidade de sistema pode fazer com que a empresa perca muito dinheiro — fora os esclarecimentos que deverá prestar aos clientes que por sua vez são muito rigorosos com o cumprimento dos prazos Com um bom monitoramento da infraestrutura e processos de TI é possível detectar a raiz dos problemas com indisponibilidade e todos os outros problemas que possam comprometer o desempenho da equipe de desenvolvimento de software A   antes era vista como um meio de diferenciar as empresas do mercado Se por exemplo uma sorveteria produzisse sorvetes mais gostosos esta seria uma referência para o público — mas não necessariamente dominaria o mercado já que haveriam sorvetes mais baratos que seriam a referência do público pertencente às classes menos afortunadas Hoje em dia uma empresa seja qual for o segmento não sobrevive sem cumprir com certo nível de qualidade do produto É a qualidade que define a existência de novas empresas se consolidando e também a permanência das veteranas no mercado Os clientes não querem pagar por uma solução que não resolva efetivamente todos os seus problemas Mas existe algum segredo para que a qualidade do software seja otimizada Felizmente existem alguns “segredos” que devem chegar ao seu conhecimento — acompanhe a seguir Com o crescimento da complexidade das tecnologias para realizar o desenvolvimento de softwares a aplicação de técnicas processos e ferramentas para a realização de testes de software se tornou necessária para garantir a qualidade do software A razão pela qual os testes devem ser realizados é explicada em um artigo da revista Engenharia de Software edição 10 do qual explica que “a abordagem RBT permite justamente fazer melhor uso dos recursos disponíveis priorizando os requisitos do software que necessitam ser testados prioritariamente” Dessa forma seguindo o raciocínio acima o número de testes a serem feitos serão proporcionais ao grau de risco em questão Quanto mais riscos maior o número de testes a serem realizados Enquanto os menores riscos acabam por demandar menos testes — evitando o desperdício de tempo Os erros são recorrentes e inevitáveis em qualquer ambiente de desenvolvimento de software Sendo os erros inevitáveis o que fazer para evitar que eles comprometam o andamento do projeto Esse segredo está em agir preventivamente A atitude preventiva consiste em corrigir os problemas em um estágio do qual o mesmo seja simples de se resolver Isto é ao invés de corrigir erros durante a produção onde a burocracia entraria em ação e assim geraria atrasos na entrega procurase detectar e corrigir os erros em um estágio que não seja oneroso para a empresa A disciplina de Qualidade de Software como bem sabemos passa diretamente pela engenharia de software Portanto a qualidade do produto — assim como a qualidade e gerenciamento dos processos — depende de um bom planejamento tarefa que deve ser delegada a um Engenheiro de Software eficaz Mas quais as características formam um grande Engenheiro de Software Além disso é fundamental que o Engenheiro de Software tenha um bom conhecimento técnico — suficiente para fazer boa parte das avaliações com autonomia De certa forma isso passa pela paixão por códigos do contrário será muito pouco provável que o profissional consiga cumprir com seu papel com excelência Rock Convert De acordo com o dicionário prototipagem significa o desenvolvimento de um protótipo ou seja um modelo que dará origem a várias outras réplicas Mas não só isso esse protótipo funcionaria como uma fonte de experimentos para tentativas e erros objetivando o aperfeiçoamento de uma determinada ferramenta para que haja um processo evolutivo das suas estruturas e mecanismos essenciais Quando se trata do desenvolvimento de softwares essa   tradicional tem como objetivo especificar a sua utilidade capacidades funções estabelecer sua conformidade com os interesses do contratante realizar melhorias em suas estruturas Esse protótipo possui geralmente diferentes níveis de fidelidade com relação ao que será entregue ao cliente sendo que quanto mais assemelharse ao que será entregue mais complexo e demorado será o seu desenvolvimento Já que exigirá a utilização de diversas ferramentas o envolvimento de um maior número de profissionais a aplicação de alta tecnologia além da necessidade de testes bem mais abrangentes e sofisticados Além disso o que esses especialistas em desenvolvimento de softwares também recomendam é que essa prototipagem ocorra com total integração da equipe sempre com a participação da empresa contratante de acordo com um planejamento bem estruturado e através do uso das principais tendências para o desenvolvimento de softwares existentes Pois é dessa participação que depende a qualidade do software ou aplicativo a certeza de que estará de acordo com o que foi pedido pelo cliente e o seu potencial para comercialização Já quando nos referimos ao desenvolvimento do protótipo de um software ou de um aplicativo na nuvem estamos falando de uma prototipagem que não se dará mais em um ambiente físico O software não será testado em um desktop por exemplo e sim na própria web estabelecendo com isso algumas vantagens É necessário também se atentar para detalhes como por exemplo saber que a prototipagem virtual pode resultar em pequenas diferenças entre o software obtido localmente e o que será entregue já que o ambiente na nuvem não possui as mesmas características do meio físico Realizar testes mais aprofundados conscientizar o cliente sobre o fato de que aquele protótipo deverá passar por uma série de atualizações posteriores É igualmente importante não esquecer dos cuidados com a segurança já que o desenvolvimento de softwares na nuvem nesse caso um protótipo é realizado em servidores contratados e que portanto deverão possuir sistemas de segurança eficientes contra possíveis invasões ou tentativas de roubo de dados Definitivamente a Tecnologia da Informação é o setor que mais promete   e em um curtíssimo espaço de tempo Pois segundo afirmou Marc Andreessen um dos fundadores da Netscape a “tendência é que os softwares engulam o mundo” Porém para que essa “profecia” se concretize é necessário que surjam novas tendências para o desenvolvimento desses softwares Essas tendências devem dar vazão à criatividade diminuírem os riscos aumentarem a satisfação dos clientes e ajudarem a economizar tempo Seja na forma de armazenamento de dados onde o sistema na nuvem não possui rival na aquisição correlação cruzamento e manipulação de informações por intermédio do Big Data com relação aos   o setor de TI a cada dia traz novidades que impactam diretamente a forma como se processam as informações em todos os segmentos da sociedade Logo não poderia ocorrer de forma diferente com relação ao desenvolvimento de softwares que vem apontando entre outras tendências Pois de acordo com a Gartner 75 das organizações serão obrigadas a implementar uma visão  em seu setor de Tecnologia da Informação até 2017 — devido ao simples fato de que precisarão descentralizar para ganhar em agilidade praticidade e resultados objetivos Esse investimento que abrange não apenas o armazenamento de dados como também o desenvolvimento de softwares Através de um incentivo cada vez maior para que os seus protótipos sejam testados e desenvolvidos nesse ambiente virtual Muitas empresas estão apostando na formação de equipes que não ultrapassem 10 ou 12 membros — todos interconectados na nuvem — e pelo sistema builtin cujo objetivo principal é diminuir os ruídos de comunicação tornar mais ágeis as decisões e determinar resultados mais próximos dos preestabelecidos Ao longo do artigo você conheceu de forma abrangente a diversos aspectos do desenvolvimento de software que foram do aprimoramento das habilidades dos profissionais às tendências do segmento passando também pela importância da prototipagem na nuvem da redução de custos — e meios para isso — e do papel da Engenharia de Software para otimizar a qualidade do software E você deseja contar com uma verdadeira transformação no setor de TI da sua empresa   e conheça nossas soluções   rockauto Artigos Desenvolvimento Cloud computing devops engenharia de software prototipagem em nuvem sistemas de monitoramento TI Bimodal 0 Comentários Descubra tudo sobre a utilização do PMBOK  						Galeria					 Descubra tudo sobre a utilização do PMBOK 0 Comentários TDD BDD e DDD entenda o que são essas siglas  						Galeria					 TDD BDD e DDD entenda o que são essas siglas 2 Comentários Multicloud saiba tudo sobre a estratégia e como começar  						Galeria					 Multicloud saiba tudo sobre a estratégia e como começar 0 Comentários O que é User Experience UX  						Galeria					 O que é User Experience UX 0 Comentários Treinamento de equipe de desenvolvimento de TI como realizar  						Galeria					 Treinamento de equipe de desenvolvimento de TI como realizar 0 Comentários Cancelar resposta       Rock Convert Rock Convert     Popular DevOps Você conhece bem as principais áreas de TI Artigos Desenvolvimento DevOps Ebook ITIL Segurança Descubra tudo sobre a utilização do PMBOK TDD BDD e DDD entenda o que são essas siglas Multicloud saiba tudo sobre a estratégia e como começar Cadastre Aqui Gaea Consulting
Skip to content contatogaeacombr    standard logo          Usar frameworks é algo que já faz parte do dia a dia da maioria dos desenvolvedores especialmente de quem trabalha com um grande número de  projetos  que usam funções similares Afinal a possibilidade de reutilizar códigos com poucas alterações ajuda a poupar tempo Isso porque o framework dá uma caixa de ferramentas para o programador que vai além do que é oferecido pela linguagem Seu conceito porém pode ser confuso em relação a outras formas de aproveitar códigos em vários projetos como a orientação a objetos e às classes A grande diferença é que o método opera de forma muito mais profunda com vantagens e desvantagens Por isso neste post explicaremos o que é framework e qual é seu impacto no desenvolvimento de projetos Acompanhe Basicamente é um template com diversas funções que podem ser usadas pelo desenvolvedor Com ele é desnecessário gastar tempo para reproduzir a mesma função em diferentes projetos auxiliando em um  gerenciamento ágil de projetos  Em outras palavras ele é uma estrutura base uma plataforma de desenvolvimento como uma espécie de arcabouço Ele contém ferramentas guias sistemas e componentes que agilizem o processo de  desenvolvimento de soluções  auxiliando os especialistas de TI em seus trabalhos Possui também um conjunto de bibliotecas que permitem aos desenvolvedores trabalharem sobre eles para operações maiores Além disso é o responsável por “tomar conta” da solução criada por assim dizer Assim para que seu aplicativo ou solução dê certo é preciso escolher um bom framework de trabalho principalmente por gerar todo o fluxo de controle da aplicação Isso também é importante pois os frameworks fazem com que você não tenha que se preocupar em ficar reescrevendo códigos podendo focar somente na resolução de problemas ou seja direcionando seus esforços para o objetivo final Uma boa comparação é a da caixa de ferramentas só que em vez de chaves de fenda e martelos há bases para formulários de login validação de campos e conexão com bancos de dados Nesse sentido como parte da tendência de buscar  reduzir custos  e aumentar a produtividade o uso desse recurso tem se tornado cada vez mais popular Hoje já existe uma grande variedade de soluções disponíveis para as mais diversas linguagens com comunidades que testam e criam diferentes funções Rock Convert     As funções do framework têm uma grande variedade de parâmetros garantindo ao desenvolvedor a possibilidade de fazer personalizações de acordo com as necessidades do projeto Para isso são usados princípios de orientação a objeto como a abstração o polimorfismo e a herança   Aliás vale ressaltar que a integração entre as diferentes funções dessa ferramenta é uma de suas principais características Isso significa que as ferramentas são feitas de forma aberta para que se adaptem a uma grande quantidade de situações Os pontos providos pelo framework são chamados de frozen spots ou hook points Já a instanciação e a personalização criadas pelo desenvolvedor são denominadas de host spots     A criação de funções e a modularização também existem fora dos frameworks o que pode causar certa confusão Bibliotecas de classes por exemplo são uma implementação em que as funções podem ser importadas para uso em diversos projetos A grande diferença do framework é a integração entre suas diferentes funções Enquanto em bibliotecas de classes as funções operam de forma relativamente independente em um framework há relações já embutidas de dependência entre os componentes   Outro diferencial é a forma como o programa flui No caso das bibliotecas por exemplo é o programa que controla o fluxo e faz as importações Já quando se usa um framework é ele quem acessa as funções criadas pelo usuário     Alguns cuidados devem ser tomados quando falamos de uso de frameworks Por exemplo há algumas perguntas que devem ser respondidas de antemão tais como     Também é importante considerar a possibilidade de os frameworks existentes não suprirem a necessidade das suas aplicações ou em alguns casos ele apresente uma complexidade muito maior do que as soluções necessitam     Para escolher o modelo de framework ideal para as soluções desenvolvidas é essencial que você saiba um pouco mais sobre cada um dos existentes Leia um pouco mais sobre as principais opções disponíveis     Criado em 2005 alcançou fama rapidamente principalmente pelo apoio dado por empresas como Google e Microsoft É um dos frameworks mais atualizados e consistentes do mercado Não é um modelo simples de forma que tende a ser mais indicado para os projetos mais robustos     É considerado um dos frameworks PHP mais utilizados no mercado atualmente Isso se deve principalmente por ter um caráter robusto e extremamente versátil Lançado em 2011 tem se tornado extremamente popular ao longo dos últimos anos   Há diversos tutoriais e vídeos o que ajuda os programadores iniciantes a aprenderem a trabalhar com esse framework Conta também com o Laracasts que ensina aqueles que não estão habituados com as peculiaridades da plataforma auxiliando tanto os que estejam começando quanto os mais experientes Ele é adaptável para os mais diferentes tipos de projeto facilitando desde os mais simples como os mais robustos atendendo aos mais diferentes processos     Esse modelo foi lançado em 2005 e utiliza a arquitetura MVC O Symfony foi arquitetado justamente para trabalhar de forma colaborativa com outras metodologias ágeis de desenvolvimento de soluções Ele foca essencialmente em regras de negócio da aplicação Normalmente é indicado em trabalhos de grande escala e mais robustos     Foi criado em 2012 e tem crescido exponencialmente na área de desenvolvimento Isso traz uma vantagem importante sua comunidade ativa auxilia a encontrar os erros e bugs disponíveis no  código  do framework bem como tirar dúvidas dos demais programadores   Outro ponto é a facilidade em ter versões traduzidas para diversos idiomas logo depois de serem lançadas já que a própria comunidade realiza esse trabalho Uma de suas principais vantagens é ser um dos frameworks mais ágeis atualmente bem como é escrito em C diferentemente dos demais cuja maioria é criada em PHP     Foi lançado em 2005 e seu objetivo é simplificar o processo de desenvolvimento para quem utiliza a linguagem PHP facilitando o trabalho tanto para os iniciantes quanto para os avançados Também contém mecanismos para trabalhar com JavaScript Ajax entre outros É bastante útil pois trabalha em cima da arquitetura MVC o que também possibilita a criação de projetos dos mais diversos portes     O principal benefício desse recurso é sua capacidade de economizar tempo no  desenvolvimento de softwares  Isso é possível porque há a reutilização de códigos já testados que se mostraram eficazes Apresentamos a seguir outros motivos para usálo em projetos de desenvolvimento     Como já passou por diversos testes o código de um framework geralmente já está sem bugs graves E isso se aplica principalmente aos de maior porte que têm uma comunidade voltada para reportar erros e corrigilos Com isso ao aplicar uma estrutura como essa ao projeto há menor preocupação com erros de implementação Isso naturalmente representa um aumento na  qualidade de código  do sistema     A maioria dos frameworks de grande porte tem um registro extenso de documentação o que facilita muito o aprendizado por parte dos desenvolvedores Esse material ajuda os profissionais a conhecerem melhor as funções e a forma de utilizálas Além disso praticamente todos os frameworks têm uma comunidade específica que trabalha quase que exclusivamente com a solução de problemas e cria fóruns de suporte para auxiliar os usuários     Para que haja compatibilidade o desenvolvedor deve seguir o mesmo padrão de codificação usado pelo framework Isso contribui para que o código seja mais legível e assim torna a manutenção mais fácil Com isso garantese que todos os desenvolvedores envolvidos no projeto utilizarão o mesmo padrão Então qualquer profissional que trabalhe posteriormente nos códigos vai entender a lógica do sistema para fazer manutenções e alterações     Uma das principais vantagens da adoção de frameworks em projetos de desenvolvimento de software é a  redução significativa de custos  com relação ao tempo de produção Como todas as bases já são providas pela ferramenta a equipe só precisa se concentrar na camada de negócio Isso facilita o desenvolvimento de software e diminui o tempo das entregas     Um problema comum da produção de software é a falta de consistência de algumas partes do projeto em relação a outras O padrão exigido quando se trabalha com um framework garante que a aplicação tenha menos falhas do que quando é produzida integralmente desde o início Isso permite que os desenvolvedores se concentrem no que realmente interessa Assim as regras de negócio e os requisitos apresentados pelo cliente além de sua satisfação com o sistema têm prioridade     Os frameworks são ferramentas e quanto mais se trabalha com eles maiores são os conhecimentos adquiridos acerca de seu funcionamento A cada projeto podese aproveitar diferentes funcionalidades do recurso para melhorar o resultado final E como essas estruturas estão em constante evolução o aprendizado é natural     Os benefícios de se usar um framework são muito maiores do que as desvantagens — desde que se saiba escolher a melhor alternativa e usea bem Por isso veja a seguir algumas práticas negativas ligadas ao uso desse tipo de ferramenta que devem ser evitadas     É importante ressaltar que o framework é diferente da linguagem de programação usada para escrevêlo Por isso o desenvolvedor precisa  conhecer bem a linguagem  com a qual trabalha Afinal a ideia é que ele aprenda mais sobre as funções do recurso e não a linguagem em si Quando se usa essa ferramenta o projeto passa a estar ligado a ela o que causa a necessidade de retrabalho em caso de migrações     O framework é uma estrutura complexa com várias funções interligadas Por isso um desenvolvedor precisa conhecer muito bem tanto sua linguagem quanto sua estrutura se quiser fazer alterações em qualquer de suas funções     Há frameworks de todos os tipos com as mais variadas funções e diferentes tamanhos Por isso o desenvolvedor deve encontrar aquele que tenha só as funções que são necessárias para seu projeto — ou o mínimo possível de componentes extras   Lembrese de que há diversas opções mais robustas mas que essas ferramentas vêm com uma gama de funções que têm poucas chances de serem usadas pela  aplicação  Com isso vão representar um peso desnecessário no programa     Existem diversos frameworks disponíveis no mercado e é comum que grandes projetos utilizem mais de um deles no desenvolvimento de software Isso porque cada uma dessas estruturas pode ser usada em uma parte distinta da programação Conheça alguns deles a seguir     O Bootstrap é a alternativa mais conhecida para o desenvolvimento de código de folhas de estilo Cascading Style Sheets — CSS Ele é responsável pelo estilo visual das páginas e pela criação de um resultado incrível Uma das principais vantagens de utilizálo em um projeto está ligada à responsividade É ela que dá às telas e aos elementos que as formam a capacidade de se adequar ao tamanho do dispositivo do usuário — seja um desktop seja um smartphone     Framework de desenvolvimento de aplicações híbridas o Ionic utiliza linguagens não nativas para criar aplicativos que possam ser executados em dispositivos móveis Ele fornece diversas ferramentas que facilitam a criação de aplicações híbridas possíveis de serem instaladas a partir das principais lojas de aplicativos do mercado Além disso essa ferramenta suporta linguagens web como linguagem de marcação de hipertexto HyperText Markup Language — HTML CSS e JavaScript     O Angular é um framework criado especialmente para auxiliar na interação entre o front e o back end É muito utilizado em projetos de página única para possibilitar a comunicação entre o computador local e o servidor Esse recurso permite que muitas interações e tarefas sejam realizadas diretamente na máquina do usuário Isso poupa processamento e desafoga o link de internet     A biblioteca é menos complexa do que o framework É um dos recursos mais utilizados na  área  de TI cuja ideia principal é compartilhar soluções já prontas por meio de funções ou métodos Em uma analogia bastante simples seria o mesmo que aplicar a estrutura de equações para resolver problemas matemáticos Assim não é preciso desenvolver toda a lógica para chegar a formulação da equação — a questão já está pronta   Em outras palavras é uma espécie de coleção de implementações de comportamentos definidas em uma linguagem e importadas para o código que está desenvolvendo Um exemplo de biblioteca de códigos bastante utilizado é o jQuery utilizado para manipulação de códigos HTML   O framework normalmente é conhecido por ser um conjunto de bibliotecas de códigos abstratos que realizarão uma operação maior Com um maior grau de complexidade está diretamente ligado à arquitetura de software   Um exemplo simples são as telas de login Elas possuem características sempre bem semelhantes uma tela para inserção do nome do usuário campo para inserção da senha um botão de recuperação de senha e um de ‘entrar’ Por terem sempre a mesma estrutura criouse um framework dessa operação de forma que essa função é implementada rapidamente no código sem ter que reescrevêlo sempre que quiser acrescentar uma tela de login a sua solução     Em primeiro lugar deixemos claro o conceito de engenharia de software Ele diz respeito a uma área da computação que se destina à especificação desenvolvimento manutenção e criação de softwares com aplicação de tecnologias ferramentas estratégias e práticas de gerência de projetos Isso tudo com o objetivo de conseguir uma melhor organização interna produtividade e qualidade   Por isso ações ferramentas e estratégias que conduzam a uma maior agilidade de processos e eficiência são sempre bemvindas e contribuem para as práticas de engenharia de software E o framework está diretamente relacionado com isso Em primeiro lugar ganhase em tempo de realização de processos Afinal se você já tem um determinado framework não precisa escrever determinados códigos e funções manualmente basta incorporálos   Além disso a composição manual pode ocasionar em falhas no processo Uma linha errada pode comprometer todo o projeto que está sendo executado Com a inserção do framework o código já está escrito corretamente e pode ser aplicado de imediato facilitando as práticas implementadas pelos engenheiros de software presentes no projeto     Ao mesmo tempo que a maioria das soluções de framework oferece  segurança  também pode estar sujeita a vulnerabilidades Isso acontece porque por um lado há um amplo suporte à correção de falhas de segurança — já que a ferramenta é usada por vários desenvolvedores e tem uma comunidade inteira para resolver vulnerabilidades Por outro entretanto por ser um software aberto usuários maliciosos podem procurar falhas e explorálas — o que representa certo risco   Por isso é fundamental que os profissionais que utilizam frameworks avaliem constantemente as linhas de código presentes verificando se há brechas de  segurança  ou vulnerabilidades inseridas Também é importante implementar medidas e protocolos de segurança para preservar a integridade do projeto     Desenvolver o próprio framework é uma possibilidade para empresas com setores de tecnologia da informação TI bem desenvolvidos e necessidades muito específicas Para isso podese usar códigos de soluções próprias que tenha criado Mesmo assim é de extrema importância ter desenvolvedores que conheçam a linguagem a fundo Até porque vale ressaltar o principal benefício de se criar o próprio recurso é o controle completo que se tem sobre as soluções   No entanto com isso também vem a responsabilidade por fazer documentação  testes  correções atualizações e é claro a implementação das funções Por isso esse projeto pode representar um alto custo para a empresa já que vários profissionais terão de investir tempo na execução e na manutenção do framework   Porém em alguns casos tornase vantajoso ou até mesmo necessária a elaboração de um framework próprio Essa é uma questão que deve ser avaliada com as equipes específicas pensando em questões de custobenefício e verificando se há de fato condições para que a organização arque com um projeto desses   Como vimos o uso de frameworks pode agilizar projetos garantir uma política de entrega contínua em sua empresa minimizar erros e oferecer maior eficiência para seus colaboradores   Achou este conteúdo interessante Então compartilheo em suas redes sociais para que outros colegas da área de TI entendam como podem se beneficiar com o uso de frameworks       infragaeacombr Artigos framework 2 Comentários Descubra tudo sobre a utilização do PMBOK  						Galeria					 Descubra tudo sobre a utilização do PMBOK 0 Comentários Multicloud saiba tudo sobre a estratégia e como começar  						Galeria					 Multicloud saiba tudo sobre a estratégia e como começar 0 Comentários O que é User Experience UX  						Galeria					 O que é User Experience UX 0 Comentários Saiba a importância de ter um release planning bem estruturado  						Galeria					 Saiba a importância de ter um release planning bem estruturado 0 Comentários Como eliminar gargalos com o mapeamento de fluxo de valor  						Galeria					 Como eliminar gargalos com o mapeamento de fluxo de valor 0 Comentários  Responder Bom post conteúdo bem organizado Mas se tivesse mais informação sobre o framework em se ficaria mais completo  Responder Muito esclarecedor o post Bem diferente dos posts que li a respeito Cancelar resposta       Rock Convert Rock Convert     Popular DevOps Você conhece bem as principais áreas de TI Artigos Desenvolvimento DevOps Ebook ITIL Segurança Descubra tudo sobre a utilização do PMBOK TDD BDD e DDD entenda o que são essas siglas Multicloud saiba tudo sobre a estratégia e como começar Cadastre Aqui Gaea Consulting 
Skip to content contatogaeacombr    standard logo          				O códigofonte é composto por um conjunto de instruções escritas em linguagem de programação por computador que pode ser lido por profissionais que detêm esse tipo de conhecimento É preciso deixar claro que existem grandes diferenças entre a linguagem utilizada pelas máquinas e a linguagem humana Nós estamos acostumados a utilizar códigos letras e números que quando colocados em conjunto forma palavras e frases Os computadores por sua vez enviam impulsos elétricos para se comunicar entre eles Esses impulsos são formados por dois códigos sendo mais conhecido como sistema numérico binário os códigos são 0 ou 1 Agora o conceito de códigofonte fez um pouco mais de sentido não é mesmo Contudo é preciso entender que o programador pode oferecer uma versão compilada de seu trabalho ou fornecer o códigofonte A versão compilada permite que as pessoas rodem o programa mas não é possível saber como o programador fez isso acontecer Ficou interessado pelo assunto Então continue a leitura deste artigo e descomplique saiba como funciona a entrega de um códigofonte Não perca essa oportunidade Quando os programadores entregam o códigofonte de um determinado programa devemos entender que outros programadores poderão ler “as instruções” e compreender como o programa funciona Caso seja necessário será possível modificar o programa É importante dizer que o códigofonte não deve ser entregue a pessoas de fora da sua empresa a menos que haja um motivo para isso Existem algumas situações em que a transferência do códigofonte é exigida como Como destacado anteriormente existem algumas situações em que se deve entregar o códigofonte em conjunto com o programa Veja a seguir detalhes sobre cada tipo de situação Algumas empresas de softwares são contratadas para atender necessidades específicas de certos tipos de negócio Assim após o  desenvolvimento  o software e seu respectivo códigofonte serão transferidos para o cliente Na maioria das situações o cliente terá direito a posse dos direitos de propriedade intelectual de tal software Quando esse tipo de situação for previsto o programador deverá fornecer o código em etapas definidas O licenciamento colaborativo nada mais é do que a situação em que o programador será responsável para criar softwares para o desenvolvimento de produtos específicos Assim será necessário fornecer o código para a elaboração desse item Da mesma maneira que ocorre no desenvolvimento personalizado será necessário fornecer o códigofonte atualizado em etapas determinadas Os clientes podem comprar o  software  e garantir que o códigofonte seja entregue a um provedor de depósito de terceiros Esse tipo de situação visa fornecer proteção ao cliente caso aconteçam problemas contratuais ou problemas na continuidade dos serviços do fornecedor Assim se a empresa contratada passar por situações difíceis seus clientes poderão obter acesso ao código Esse por sua vez será transferido nos prazos acordados O processo de aquisição de uma empresa ou de fusão de companhias também envolve a transferência do códigofonte Caso sua empresa passe por um desses processos por exemplo e seja adquirida por outra companhia o códigofonte de seus programas será transferido para o novo proprietário Nesse caso os direitos de propriedade intelectual do software também serão transferidos É válido destacar que o códigofonte precisará ser entregue apenas uma vez Essa situação é mais incomum mas existe a possibilidade de que uma empresa seja acusada de roubar a propriedade intelectual de um concorrente Nessa situação o códigofonte deverá ser disponibilizado para que especialistas no assunto possam determinar se houve ou não violação A entrega do códigofonte depende da frequência de transferências necessárias Para uma única entrega é recomendado realizála pessoalmente utilizando vários dispositivos que sejam altamente duráveis e que apresentem segurança de chaves públicas A utilização de diferentes dispositivos é uma maneira interessante de realizar uma troca rápida de grande quantidade de dados Obviamente é preciso gerenciar a segurança física de tal procedimento Contudo na maioria das vezes não é possível realizar a entrega pessoalmente por conta de problemas de deslocamento tempo e outras razões Sendo assim é necessário realizar a entrega virtual Para tanto devese contar com serviços de hospedagem de arquivos que tenham controles de acesso avançados permitindo especificar quem terá acesso ao ambiente e em quais arquivos esse usuário terá acesso Já quando a entrega é recorrente as opções acima presenciais e virtuais também podem ser utilizadas apesar da entrega presencial não ser sempre possível a não ser que ambas as partes estejam geograficamente próximas Então podese afirmar que as opções virtuais são mais utilizadas Há possibilidade de liberar o códigofonte por completo ou utilizar uma alternativa como um delta que liga até a entrega anterior Caso os dados envolvidos na transferência sejam muito grandes é recomendado a utilização de uma entrega física inicial seguido por deltas menores entregues virtualmente por meio de servidores Dependendo do caso ao entregar o software para o cliente será preciso tomar medidas para proteger a propriedade intelectual É válido dizer que as patentes podem ser utilizadas para garantir aspectos factuais do uso do software Os direitos autorais do programa por sua vez podem ser utilizados para proteger o lado “artístico” incluindo seu código Embora a entrega do códigofonte esteja se tornando cada vez mais comum nunca é demais se preparar para eventuais problemas Estar por dentro dos principais riscos e se proteger durante todo o processo pode ser fundamental para a proteção intelectual e para garantir a  segurança das informações  Uma maneira interessante de evitar esse tipo de problema se dá pela negociação sobre os direitos da propriedade intelectual do códigofonte Esse tipo de negociação deve ser realizada desde o início do projeto evitando maiores problemas Então no contrato inicial já deve haver cláusulas e outras informações sobre o direito do códigofonte Dessa forma o programador e o cliente não terão problemas ao longo do processo Além disso ambas as partes poderão discutir o que é melhor e chegar a um consenso Certamente valerá a pena E aí gostou do nosso artigo Então deixe um comentário e participe do nosso blog Sua opinião é muito importante para nossa produção de conteúdo Estamos contando com você		 rockauto Artigos propriedade intelectual sourcecode 4 Comentários Descubra tudo sobre a utilização do PMBOK  						Galeria					 Descubra tudo sobre a utilização do PMBOK 0 Comentários Multicloud saiba tudo sobre a estratégia e como começar  						Galeria					 Multicloud saiba tudo sobre a estratégia e como começar 0 Comentários O que é User Experience UX  						Galeria					 O que é User Experience UX 0 Comentários Saiba a importância de ter um release planning bem estruturado  						Galeria					 Saiba a importância de ter um release planning bem estruturado 0 Comentários Como eliminar gargalos com o mapeamento de fluxo de valor  						Galeria					 Como eliminar gargalos com o mapeamento de fluxo de valor 0 Comentários  Responder Muito interessante e me ajudou bastante entender dois pontos como geralmente a entrega dos códigos são feitas e como garantir os direitos autorais e de propriedade do sistema desenvolvido  Responder Obrigado pelo comentário Rodrigo fico contente que conseguimos ajudar 😀  Responder Tenho uma dúvida Desenvolviprojetei uma plataforma e contratei uma empresa de programação de quem é o código fonte Não consegui entender isso no texto Muito obrigado e parabéns pelo blog  Responder Daniel isso vai depender de como o contrato entre as empresas foi criado Normalmente se coloca em uma clausula em que o fonte ao final do projeto seja passado para o dono do projeto Cancelar resposta       Rock Convert Rock Convert     Popular DevOps Você conhece bem as principais áreas de TI Artigos Desenvolvimento DevOps Ebook ITIL Segurança Descubra tudo sobre a utilização do PMBOK TDD BDD e DDD entenda o que são essas siglas Multicloud saiba tudo sobre a estratégia e como começar Cadastre Aqui Gaea Consulting

 Artigos Unboxing  Reviews Códigos Dicas Ferramentas Ferramentas Online Vídeos Loja CDF     Artigos Códigos Dicas Ferramentas Vídeos Loja CDF     Artigos Unboxing  Reviews Códigos Dicas Ferramentas Ferramentas Online Vídeos Loja CDF Seja um CDF Artigos Carlos L A da Silva Você que visita o Código Fonte todos os dias em busca de novidades e conhecimento sobre tecnologia da informação desenvolvimento e programação certamente já sabe a resposta para a pergunta Talvez nunca tenha parado para pensar em cima da resposta ou avaliado todos os seus aspectos mas saberia definir de forma simples o que é código fonte é o conjunto de códigos escritos que fazem qualquer programa sistema ou serviço funcionar da web ao desktop dos aplicativos de   aos complexos algoritmos de Inteligência Artificial que um dia poderão governar esse mundo Não importa se foram escritas em  Java   PHP   Swift   NET   Kotlin  ou Ruby essas linhas que podem ser apenas um punhado ou se estenderem por milhões e milhões delas são a base são a fonte de tudo que existe em informática Incluindo essa página na internet Incluindo esse navegador que você está utilizando para ler essa página Incluindo esse sistema operacional que permite que esse navegador funcione Tudo tem seu código fonte Essa fonte encapsula as instruções para que um programa funcione incluindo aí suas variáveis funções iterações exceções coleta de erros e tudo necessário para que a lógica seja respeitada e a máquina execute aquilo que se pede Na prática é texto com sua própria sintaxe assim como essas linhas em Português e utiliza letras números e caracteres especiais exigindo ou não um editor especial Você poderia utilizar até o Bloco de Notas para escrever um programa mas a ferramenta certa poderá facilitar e muito essa tarefa Existem ferramentas visuais que ajudam na formatação e criam o código fonte para você existem ambientes inteiros de desenvolvimento que gerenciam versões e módulos assim como utilitários que reforçam a sintaxe correta e as boas práticas da linguagem escolhida Alguns programas mais simples podem rodar diretamente a partir do código fonte a partir de um motor que interprete esse   É assim que acontece com o HTML dessa página por exemplo ou mesmo o JavaScript embutido nela o navegador interpreta o mesmo código fonte que qualquer um pode visualizar no arquivo Programas ou serviços mais complexos exigem que esse código fonte seja compilado ou seja traduzido para uma linguagem diferente que apenas máquinas são capazes de entender Então Código Fonte é aquilo que a maioria de nós é capaz de ler e compreender Mesmo quem não tem conhecimento algum de programação pode intuir algo ao abrir o código fonte de um programa página da web serviço Não por acaso essa foi a escolha do nome para o nosso site Código Fonte informação sobre tecnologia fácil de assimilar Quando o Código Fonte é compilado ele se torna Código Objeto um módulo de composição também chamado de código de máquina A união de todos os códigos objeto que compõem um projeto se torna o Código Executável aquilo que será carregado em memória pelo sistema operacional e como o próprio nome diz será “executado” Essa é uma visão bem simplificada do processo e muita gente costuma afirmar que Código Fonte e Código Objeto são o “antes” e o “depois” de programas de computador Essa distinção entretanto não se aplica com linguagens de   quando existe somente uma forma de código Mas como se dá esse fluxo de código fonte a código executável Vamos pegar um exemplo simples de um programa “Hello World” feito em C  Fala galera  includestdioh main    printf“Fala galera”  Mesmo que você morra de medo de C ou nunca tenha esbarrado em uma linguagem de programação na vida é possível visualizar nas linhas acima que o objetivo do nosso programinha é exibir o texto “Fala Galera” na tela Um pouco de inglês ajuda a entender também uma vez que as principais linguagens de programação do mundo foram criadas a partir desse idioma Mas sabe quem não consegue entender de forma alguma o que foi escrito ali O seu computador Para que o sistema operacional compreenda que está recebendo instruções para algo tão simples esse código fonte legível para humanos mas incompreensível para máquinas precisa ser convertido em código objeto Quem faz essa “tradução” não é o programador mas uma ferramenta chamada de compilador Existem diferentes compiladores para diferentes linguagens e em nosso exemplo seria utilizado um compilador C O arquivo gerado pelo compilador passa a ser o nosso código objeto Código objeto é formado basicamente de números zero e um é código binário e definitivamente não é algo prático de ser trabalhado por humanos É um processo similar ao que acontece com URLs e números IP de internet mas em um nível ainda mais complexo Esses códigos objeto podem ser interligados para criar um arquivo executável que irá por fim realizar a tarefa que pedimos para ser feita Lembra quando dissemos que código objeto não foi feito para ser lido por humanos Bem o primeiro programa de computador foi escrito em binário na década de 40 então você pode imaginar como os desenvolvedores da época matavam um leão por dia Talvez seja por isso que na mesma década tenha sido criado aquele que é considerado por muitos como o primeiro código fonte da História Coube ao matemático e engenheiro britânico Tom Killburn ao lado do também engenheiro e também britânico Sir Frederic Calland Williams o mérito de terem criado o primeiro programa digital em maio de 1948 Era um programa desenvolvido para resolver uma equação matemática e podia ser armazenado em memória Nos anos 50 e 60 era comum que o código fonte fosse oferecido de graça junto com os programas comercializados para que os clientes os adaptassem as suas necessidades Com a expansão da computação pessoal nas décadas seguintes e sua popularização a distribuição de código fonte se expandiu Quem viveu o começo dessa era no Brasil talvez se lembre das primeiras revistas dedicadas ao tema e tenha digitado caractere por caractere os códigos impressos para criação de programas Dos códigos impressos em folhas de papel evoluímos para discos de armazenamento e hoje em dia o conhecimento é  compartilhado através da internet  inclusive em sites como esse que você está visitando Outra distinção importante surgiu depois do sucesso comercial de programas o tipo de licenciamento do código fonte Se nos primórdios era comum a distribuição de um código aberto atualmente o que prevalece é o modelo fechado embora haja uma forte comunidade favorável ao código livre Por exemplo quando o usuário instala a suíte de aplicativos do Microsoft Office no seu desktop o código fonte segue pertencendo à Microsoft O usuário não tem qualquer tipo de acesso ao código fonte somente ao programa compilado e suas bibliotecas de componentes No caso de serviços como o Office 365 o usuário não é nem mesmo dono dos programas tem somente uma licença de uso que pode expirar ou ser revogada É o chamado Software As A Service “Software como serviço” ou SaaS Mantendo a comparação na linha de suítes de aplicativos de escritório o LibreOffice não apenas pode ter seu programa executável baixado e utilizado como seu código fonte também está disponível na internet para o usuário baixar e modificar No caso de códigos fechados é inclusive comum que as empresas proíbam terminantemente que seus usuários tenham acesso ao código fonte vetando tentativas de descoberta ou quaisquer tipo de modificações Essa postura não é fruto somente de interesses comerciais para preservar sua propriedade intelectual mas também como uma medida de proteção contra alterações indesejadas ou equivocadas que possam resultar em um comportamento ilegal ou perigoso de seus programas tornandoos vulneráveis a ataques ou intencionalmente maliciosos Em contrapartida códigos abertos são criados do zero com a proposta de usufruir dos esforços colaborativos de uma comunidade de desenvolvedores Não é uma postura a prova de falhas mas problemas e vulnerabilidades podem ser detectados e corrigidos espontaneamente por um coletivo que costuma estar focada para esse objetivo Código Fonte Programação   Confira as melhores ofertas de jogos de PC para o final de semana Ver Post Bill Gates Jack Dorsey Apple Intel Tesla Nvidia e outros se juntam para combater a pandemia com recursos experiência e vontade Ver Post Navegador guarda qualquer endereço visitado e sugere pra você mas você não precisa apagar o Histórico inteiro para se livrar de um deles Ver Post Cancelar resposta Com mais de 13 anos de história o site Código Fonte desde 2006 é fonte de informação para os programadores  desenvolvedores e amantes da tecnologia  Hospedado por RW Studio Copyright 2006  2019 Artigos Códigos Dicas Ferramentas Vídeos Loja CDF

         Categorias Tudo Sobre Marketing Vendas SEO Redes Sociais Tech Agências Gestão Ecommerce Notícias Área de convidados Assine Conheça nossos serviços Português Español Português Conheça o stage     Por  Redator Rock Content um de nossos especialistas Publicado em 14 de maio de 2019  Atualizado em 13 de março de 2020 Uma linguagem de programação é um conjunto de símbolos e códigos usados para orientar a programação de estruturas no desenvolvimento da web Saber como funciona uma  linguagem de programação  e como os relacionamos com ela por meio de softwares nos permite melhorar nossa produtividade e conquistar vantagens competitivas frente a concorrência Ao longo dos anos as linguagens de programação aumentaram seu poder e flexibilidade para executar tarefas complexas exigidas pela inovação e  pelas novas tecnologias da informação e comunicação  TIC Todas as  Ao conhecêla você consegue alcançar seus objetivos em menos tempo Deseja saber mais Continue lendo para aprender sobre este tema tão interessante quanto necessário O que é uma linguagem de programação Que tipos de linguagem de programação existem Para que servem as linguagens de programação Quais softwares de programação existem É uma linguagem formal que através de uma série de instruções permite que um programador escreva um conjunto de ordens ações consecutivas dados e  algoritmos  para criar programas que controlam o comportamento físico e lógico de uma máquina Programador e máquina se comunicam por meio dessa linguagem permitindo especificar com precisão aspectos como Para explicar melhor e com menos palavras a linguagem de programação é um   que permitem o entendimento entre um programador e uma máquina É importante enfatizar que é um erro comum usar a linguagem de programação e a linguagem de computação como sinônimos Mas por que não devemos confundilas Bem é porque a linguagem de programação obedece a um conjunto de regras que permitem expressar as instruções que serão interpretadas pelo  programador  Já a linguagem de computação inclui outras linguagens que formatam um texto mas não podemos considerála uma programação em si mesma Portanto nem todas as linguagens computacionais são de programação mas todas as linguagens de programação são computacionais A linguagem de  programação  é a base para a construção de todos os aplicativos digitais usados ​​no dia a dia e são classificados em dois tipos principais linguagem de baixo e alto nível Continue lendo para aprender tudo sobre eles São linguagens totalmente orientadas à máquina Esse idioma serve como uma interface e cria um link inseparável entre hardware e software Além disso exerce controle direto sobre o equipamento e sua estrutura física Para aplicála adequadamente é necessário que o programador conheça muito bem o hardware Essa categoria pode ser subdividido em dois tipos Confira a seguir É o mais primitivo dos idiomas e é uma coleção de dígitos ou   binários 0 e 1 que o computador lê e interpreta e é o único idioma que os computadores entendem Exemplo 10110000 01100001 Não dá para entender muito bem o que ele diz certo Portanto a linguagem   nos permite entender melhor a que se refere esse código A linguagem Assembly é a primeira tentativa de substituir a linguagem de máquina por uma mais próxima da usada por seres humanos Um programa escrito nessa linguagem é armazenado como texto como nos programas de alto nível e consiste em uma série de instruções que correspondem ao fluxo de pedidos executáveis ​​por um microprocessador No entanto essas máquinas não entendem a linguagem   Portanto devem ser convertidas em linguagem de máquina por meio de um programa chamado   Ele gera códigos compactos rápidos e eficientes criados pelo programador que tem controle total da máquina Exemplo   atribui o valor hexadecimal 61 ao registro “AL” Elas visam facilitar o trabalho do programador pois usam instruções que são mais fáceis de serem entendidas Rock Convert Além disso a linguagem de alto nível permite que você escreva códigos usando os idiomas que conhece português espanhol inglês etc traduzindoos em seguida para o idioma da máquina por tradutores ou compiladores Eles traduzem programas escritos em uma linguagem de programação para a linguagem de máquina do computador e são executados à medida que são traduzidos Ele permite que você traduza um programa inteiro de uma só vez tornandoo mais rápido e pode ser armazenado para uso posterior sem a necessidade de uma nova tradução Em geral uma linguagem de programação é usada para programar No entanto cada um tem um escopo e forma de comunicação diferente Em resumo   e cada instrução tem seu código de operação exclusivo  que o programador fornece à máquina Enquanto o profissional insere dados no idioma conhecido a máquina os absorve na linguagem de máquina através de tradutores ou compiladores permitindo Em outras palavras a linguagem de baixo nível está próxima das linguagens de máquina enquanto a linguagem de alto nível está mais próxima da compreensão e da linguagem humana Por  software  de programação entendemos o conjunto de todas as ferramentas que permitem ao programador criar escrever códigos depurar manter e empacotar projetos Conheça a seguir alguns dos diferentes programas pelos quais o projeto deve passar para ser administrado Ao escrever os códigos eles se completam marcando os erros sintáticos e a refatoração Como mencionado acima eles convertem o código digitado à linguagem de máquina gerando um código binário executável Eles servem para otimizar o tempo de desenvolvimento e ajudam a corrigir erros por meio do monitoramento da execução de um programa dos valores de determinadas variáveis e da referência a objetos na memória Este programa pega objetos gerados nas primeiras etapas do processo de compilação e os recursos necessários da biblioteca remove os processos e dados de que não precisa e vincula o código à referida biblioteca para aumentar seu tamanho e extensão Conforme você lê este artigo o tradutor ou intérprete carrega o código digitado e converte as instruções para que o programa possa ser executado O IDE   ou Entorno de Desenvolvimento Integrado é um aplicativo de computador que fornece uma série de serviços que facilitam a programação de software como porque não haveria regras semânticas e sintáticas expressões como a estrutura e o significado de todos os elementos que as compõem ou uma maneira estabelecida de como programador e máquina deveriam “falar” entre si Além disso algumas das funções que permitem ao programador criar essa linguagem são criar um site e fazêlo funcionar desenvolver aplicativos para sistemas operacionais e muitos outros Atualmente o conhecimento e o uso do mundo digital e computacional são duas das principais armas de qualquer empresa Por isso e muito mais é extremamente importante que você esteja na vanguarda e tenha fome de conhecimento Se quiser aprender mais leia nosso artigo sobre  como usar NGINX    100000 pessoas não podem estar enganadas      Um guia para fazer a implementação de sistemas sem erros     Economia comportamental a chave para entender como sua persona toma decisões     Como evitar e combater o esgotamento mental     TLS e SSL saiba o que são estes certificados de segurança e suas diferenças       O blog Marketing de Conteúdo e a Rock Content ajudam centenas de empresas a atingirem seus objetivos de marketing                                        Português       Español Tudo Sobre Marketing Vendas SEO Redes Sociais Tech Agências Gestão Ecommerce Ebooks Para Download Ferramentas de Marketing Pesquisas Sobre Vagas em Marketing Cursos de Marketing Assinar RSS  Copyright © 20132020  Rock Content  Todos os direitos reservados  Feito com   pelo time da Rock Content no SanPedroValley


1.1 Ciência da computação


Muitos leitores deste livro podem estar inscritos em seu primeiro curso de ciência da computação. Bem-vindo à ciência da computação! Outros leitores podem estar querendo aprender mais sobre assuntos de desenvolvimento de software orientado por objeto. Bem- vindo a este excitante paradigma! (A palavra paradigma significa “um conjunto estruturas, onde todas contém um elemento em particular.” Random House dictionary)

Tipicamente um primeiro curso de ciência da computação apresenta uma linguagem de programação e enfatiza a programação. Alguns estudantes terminam tal curso com a impressão de que ciência da computação é o estudo de programação. Isso não é verdadeiro.

Softwareé o produto final de um processo de engenharia que envolve requisitos, especificações, análise e projeto. Software é uma entidade visível e tangível. É um conjunto de instruções que permite um computador digital realizar uma variedade de tarefas. Softwareé um produto freqüentemente embrulhado em embalagem bonitinha.Softwareé um negocio multimilionário.

Uma linguagem de programação proporciona uma notação onde se pode expressar algoritmos e estruturas de informações. O computador pode usar tal notação para realizar tarefas úteis. Mas para muitos cientistas da computação, programas representam o menos produtivo, mais rotineiro e talvez a mais monótona parte do processo de desenvolvimento de software. De fato, alguns cientistas da computação nem mesmo programam.

#pg002#nt070#cm00#

Para outros cientistas da computação, a criação de programas é tudo que a ciência da computação representa. A teoria das linguagens de programação salienta a importância da programação. Mas a ciência da computação é muito mais que programação.

Ciência da computação lida com arte, trabalho criativo e cálculos usados em um computador digital. Ciência da computação é tão teórica quanto prática, tão teórica quanto aplicada. Teoria de autômatos, linguagens naturais e artificiais, aprendizado e indução, informação, estruturas de dados, estudo de complexidade e algoritmos desempenham um papel central e também servem como um reforço teórico para toda a ciência da computação. As maiores áreas de aplicação de ciência da computação incluem sistemas operacionais,designde compiladores, estruturas de dados e algoritmos, gráficos, análise numérica, bases de dados, linguagens de programação, inteligência artificial, aprendizado de máquina e engenharia desoftware. Como um estudante de ciência da computação, você estará apto a ter cursos em muitas ou em todas estas áreas.

A maioria das ciências requerem que seus praticantes para expressem suas idéias em uma ou mais linguagens técnicas. Químicos aprendem a linguagem de símbolos químicos, operações e conexões que permitem escrever as equações químicas. Físicos usam a linguagem de cálculos, equação diferencial e outras matemáticas avançadas para expressar seus modelos e idéias. Engenheiros elétricos aprendem a linguagem de diagramas de

circuitos. Cientistas da computação também usam uma variedade de notações e linguagens para expressar seus conceitos e produzir resultados.

Um estudante de física precisa aprender matemática básica para ter uma notação que possa ser usada para discussão e raciocínio sobre física. Um estudante de ciência da computação precisa aprender uma linguagem de programação de alto nível e técnicas de resolução de problemas para ser capaz de raciocinar em cima da computação. Para um cientista da computação, a programação não é nada além do que o cálculo, para um físico

Cientistas da computação, como seus colegas de ciências naturais e engenharia, estão preocupados com a construção de modelos, abstrações, análises, design, e implementação. Um programa ou sistema desoftwarefreqüentemente representa o passo final de um processo de resolução de problemas.

Este livro introduzirá técnicas de dedução e resolução de problemas usando objetos. O princípio fundamental da programação orientada por objeto será explorado e introduzido. Durante esta exploração muitos princípios importantes de computação serão revelados.

#pg003#nt065#cm00#

1.2 Programas de computador

Um programa consiste em uma seqüência de instruções escritas numa linguagem precisa chamada linguagem de programação. Estas instruções são traduzidas em um compilador, para uma linguagem de baixo nível, a linguagem de máquina, para que o computador possa entender.

As aplicações de um software são definidas geralmente em duas categorias: programas de sistemas e programas de aplicações. Programas de sistemas visam controlar um componente do computador, como um dispositivo de armazenamento, dispositivo de saída, ou o próprio computador (ex.: sistema operacional). Programas de aplicações resolvem um problema externo ao computador como um sistema bancário, sistema de controle de tráfego aéreo, sistema de processamento de textos, planilha eletrônica ou outra área de aplicação.

Programas de computador representam o produto final do processo de desenvolvimento desoftware. Eles são entidades tangíveis que podem ser liberados para o cliente, vendidos, embalados. Programas comerciais usualmente vêm acompanhados de um guia do usuário e outros documentos de apoio escritos.

1.3 Linguagens de programação

Três categorias principais de linguagem de programação têm sido desenvolvidas: linguagem de máquina, linguagens assembly e linguagens de alto nível. Os primeiros computadores somente podiam ser programados usando linguagem de máquina. Tal linguagem usa seqüências de zeros e uns (bits) que representam instruções precisas para computação e acessos de dados.

Linguagens assembly usam caracteres alfabéticos para representar as configurações de bits da linguagem de máquina. As letras usadas descrevem as operações a serem realizadas. Linguagens assembly representam um nível mais alto de abstração do que as

linguagens de máquina. Algumas linguagens assembly modernas suportam estruturas de controle que antes eram previstas somente em linguagens de alto nível.

Linguagens de alto nível assemelham-se com linguagem natural. Dados e operações são representados por declarações descritivas.

Um exemplo: suponha que desejamos adicionar dois números e depositar a soma em um terceiro número. Na maioria das linguagens de alto nível, estas operações são assim simbolizadas:

c := a + b

#pg004#nt080#cm00#

Os operandos a e b representam os dois números a serem adicionados e a variável c representa o total. O operador “:=” é o operador de atribuição. Ele significa que a soma dos valores em a e b que será atribuído a c1.

Numa típica linguagem assembly, as instruções poderiam ser lidas:

LOAD A ADD B STORE C

Numa linguagem de máquina as instruções poderiam ser lidas:

00011000 00000101 00100001 00000011 00101101 11100001

Como você pode ver, somente computadores iriam querer ler a linguagem de máquina.

1.4 Estruturação e programação orientada por objetos

A palavra paradigma tem se tornado popular no últimos anos. As pessoas ouvem falar a respeito do paradigma orientado por objeto.

No mundo do desenvolvimento de software, as décadas de 70 e 80 foram dominadas pela abordagem de solução de problemas (paradigma) chamada programação estruturada. As linguagens dominantes da época incluíam FORTRAN, COBOL, ALGOL, PASCAL, ADA e C. Consideráveis investimentos foram feitos no desenvolvimento ferramentas de softwarepara apoiar a programação e o processo de desenvolvimento de software durante esse período. Os métodos e técnicas para projeto e analise estruturados apresentados por Larry Constantine, Tom DeMarco e Edward Yourdon tem influenciado de forma significativa a maneira em que amplos e complexos sistemas desoftwaresão construídos. Poderosas e dispendiosas ferramentas desoftwarepara auxiliar a engenharia desoftware

1 NT: Em português lê-se: “c recebe a mais b”

apoiada por computador (CASE2) têm sido desenvolvidas para apoiar este paradigma da programação estruturada.

A abordagem estruturada para resolução de problemas decompõe um problema em funções. Essa abordagem é chamada decomposição funcional – uma complexa operação é dividida em operações menores. Cada uma dessas operações menores ainda é dividida em menores e menos complexas operações até que cada operação seja tratável em tamanho e complexidade. Um sistema desoftwareé visto como um processo de transformação – processamento de dados de entrada (input) através de uma série de transformações funcionais para produzir dados de saída (output). Os dados servem como uma entrada para uma determinada função ou para um processo inteiro, são “processados” e produzem uma saída útil. #pg005#nt070#cm00#Por várias gerações de programadores, esta tem sido a abordagem mais natural para solução de problemas. E tem se tornado um meio de vida.

Em meados de 1970 uma importante, mas silenciosa pesquisa sobre um paradigma diferente de desenvolvimento desoftwarefoi feita pela Xerox Corporation no Palo Alto Research Center (PARC). Em 1980 este esforço culminou no lançamento comercial da linguagem de programação orientada por objetos Smalltalk-80. Inspirado nas idéias de Alan Kay e seus sócios, esta linguagem visava proporcionar ao programador, um ambiente de desenvolvimento desoftwarealtamente individual e robusto, que de muitas maneiras se parece com o ambiente moderno de estações de trabalho. Um mecanismo de interface gráfica extremamente “amigável” foi um subproduto deste trabalho e mais tarde levou ao desenvolvimento do tipo de ambiente gráfico tipicamente encontrado na maioria das estações de trabalho, assim como também em computadores pessoais. Em 1980 um mouse como aparelho de interface, uma série de janelas, menus, botões, caixas de diálogo, etc., os quais tem se tornado agora bastante usuais, eram praticamente desconhecidos, com exceção de alguns poucos laboratórios de pesquisa.

Mas mais significativamente, o Smalltalk exemplificou uma abordagem totalmente nova do desenvolvimento de software e solução de problemas - a abordagem da orientação por objetos. Nesta abordagem, a decomposição de dados, ao invés da decomposição de funções, tornam-se a idéia central. As funções se tornam ligadas a um modelo de dados e servem a este modelo de dados. A solução de problemas passa a ser a descrição e modelagem de como objetos interagem entre si.

Em meados de 1980, emergiram várias novas linguagens orientadas por objetos de importância considerável. Entre elas podemos citar Objective-C, Eiffel, CLOS, e C++. Todas estas linguagens estão ainda sendo utilizadas hoje embora seja claro que C++ tenha se tornado a linguagem orientada por objetos mais amplamente utilizada. Das linguagens mencionadas, somente Smalltalk e Eiffel são linguagens orientadas por objeto “puras”. Por puro se entende que estas duas linguagens não são baseadas em algum substrato que não orientado por objetos, como são C++ ou Objective-C. Nestas construções de linguagens baseadas em C, podem coexistir tanto a programação estruturada quanto a programação orientada por objetos. Isto freqüentemente leva a um modo misto de solução de problemas. Somente Smalltalk e Eiffel oferecem ao programador a possibilidade para fazer

2 NT: Do inglês Computer Aided Software Engineering

programação exclusivamente orientada por objetos. O autor deste livro considera isto uma grande vantagem do uso destas duas linguagens.

O próximo capítulo explica o orientação por objetos em maiores detalhes.

Outros paradigmas de programação tem sido criados além do estruturado e do orientado por objetos. Programação funcional, exemplificada pela linguagem de programação LISP e programação lógica exemplificada pela linguagem de programação PROLOG são dois exemplos. #pg006#nt090#cm00#Programação funcional tem sido largamente usada em aplicativos de inteligência artificial e PROLOG em aplicativos para aprendizagem de máquinas.

1.5 Ferramentas comuns de software

Incluídas entre as ferramentas comuns desoftware normalmente disponíveis para programadores estão editores de programa, processadores de texto, compiladores,linkers, debuggers, profilers e browsers. Cada um destes será descrito resumidamente.

Um editor de programa é um sistema editor de textos, simplificado, que permite ao programador entrar com o texto de um programa. Alguns editores de programa, denominados os editores sensíveis ao contexto, proporcionam uma estrutura de sintaxe que permite ao programador usar uma palavra chave em uma determinada linguagem de programação e o editor então gera o resto de uma expressão automaticamente. A maioria dos editores de programas possuem operações semelhantes comosearch(localiza a palavra no texto),search/replace(procura e altera uma palavra ou expressão),autoindent(faz a identação do texto de um programa com um número específico de espaços ou de tabulações baseado no contexto do programa),egoto (move o marcador ou cursor para uma linha especifica no texto).

Um processador de texto é um programa que ajuda na geração de documentos. Ele freqüentemente permite a integração de componentes gráficos com componentes de texto. Os processadores de texto modernos são bem poderosos e complexos.

Um compilador é um programa especifico das linguagens de programação, que traduz o texto do programa escrito em linguagem de alto nível em linguagem de maquina. Este é um processo essencial que precisa ser cumprido para o programa poder funcionar.

Um linker é um programa que integra várias partes de um programa que foram compiladas para um código executável compondo o aplicativo. Normalmente, compilar e linkar são operações executadas de maneira integrada, com a finalidade de traduzir o texto de um programa para um código executável.

Um debuggeré programa que permite um aplicativo ser executado sob o controle do programador. A execução do programa pode ser interrompida em lugares pré- determinados do texto de um programa ou pode ser executada passo a passo. O programador pode então, inspecionar valores de várias entidades no aplicativo para determinar se programa está executando suas funções corretamente. Geralmente os debuggerssão usados quando um problema é detectado no programa.

#pg007#nt090#cm00#

Um profiler é um programa executado em conjunto com um programa em desenvolvimento. Ele calcula e informa o tempo que o programa gasta em diversas partes e seções, permitindo ao programador determinar o local que necessita de mais eficiência para modificá-la na versão final. Essencialmente, umprofiler é um instrumento de análise de desempenho da execução de um programa.

Um browser é um programa que permite uma inspeção visual de um programa amplo e complexo. Desta maneira, é um instrumento essencial para grande projetos de software, onde um programador precisa ser capaz de inspecionar outra parte de um software, possivelmente desenvolvida por outros programadores; ou inspecionar o código de bibliotecas reutilizáveis desoftware.

1.6 Programação

Um programa de computador é um conjunto de instruções escritas de acordo com as regras de sintaxe de alguma linguagem de programação. As instruções são traduzidas por outro programa de computador chamado compilador.

O compilador gera instruções numa linguagem de baixo nível, entendidas pela máquina, que permitem ao seu computador executar as instruções fornecidas no seu programa. Instruções assim são difíceis de se ler, entender e possivelmente ainda mais difíceis de se escrever diretamente. Felizmente, para a maioria dos programadores, isso raramente será exigido, se é que será.

Um programa bem escrito deve:

• Ser claro e de fácil entendimento para outro programador. • Resolver o problema especificado corretamente. • Ser fácil de se modificar caso as especificações do problema sejam modificadas.

1.6.1 Linguagens de programação

Foram criadas centenas de linguagens de programação para ajudar na solução de vários tipos de problemas. Essas linguagens têm sido agrupadas em várias categorias baseadas nas suas características e na abordagem que usam para resolução de problemas. Essas categorias são:

• LinguagensAssembly- Essas linguagens são criadas para cada processador específico com um conjunto próprio de instruções de baixo nível. Programas nessa linguagem são difíceis de serem escritos porque a possibilidade de se formular abstrações nestas linguagens é muito limitada. Elas são bastante propensas a erros e não são facilmente adaptáveis, caso as especificações do problema sofram mudanças. Entretanto, programas desenvolvidos em linguagem assemblysão muito rápidos. As linguagens de programação mais primitivas foram as linguagensassembly.

• #pg008#nt085#cm00#Linguagens procedurais – Essas linguagens foram as primeiras linguagens de “alto-nível”. A primeira delas, FORTRAN, foi desenvolvida no começo da década de 50. Ela era usada principalmente para computação matemática e científica. A unidade básica de abstração em FORTRAN é a subrotina. Subrotinas são similares aos serviços contidos numa

descrição de classe. Os dados são passados para uma subrotina através de seus parâmetros. Computação é tipicamente realizada nesses dados e uma saída é retornada como resultado. Outras linguagens procedurais populares são C, Pascal, Algol e PL/1.

• Linguagens funcionais – LISP pode ser vista como a avó das linguagens funcionais. A sigla LISP significa processamento de listas (LISt Processing). LISP e suas linguagens derivadas são amplamente usadas na área de inteligência artificial, aprendizagem de máquina e ciência cognitiva. Mesmo tendo algumas aplicações comerciais escritas em LISP, muitos ainda consideram essa linguagem como uma ferramenta de pesquisa.

• Linguagens Lógicas – PROLOG e suas variações proporcionam a oportunidade de formular um conjunto de proposições lógicas e ter deduções derivadas pela linguagem. PROLOG, assim como LISP, tem sido usada como uma ferramenta de pesquisa na área de inteligência artificial e aprendizagem de máquina.

• Baseadas em objetos – Modula-2 e Ada são as duas linguagens baseadas em objeto que mais se destacam. Cada uma suporta a noção de tipo abstrato de dados (a ser explicado mais tarde nesse capítulo). Essas são as primeiras linguagens procedurais a fornecer uma separação clara entre um modelo de dados e os serviços em torno desses dados (entre a visão externa dos dados, pelo usuário, e suas representações internas). Nenhuma dessas linguagens suporta herança.

• Linguagens orientadas por objetos – Simula, desenvolvida na Noruega no fim da década de 60 é a primeira linguagem de programação orientada por objeto. Na década de 70 o Centro de Pesquisa da Xerox, em Palo Alto, fez algumas pesquisas inovadoras no modelo de objeto que levou ao desenvolvimento da linguagem de programação Smalltalk. Essa linguagem foi lançada comercialmente em 1980. Foi logo seguida por C++, Objetctive-C, CLOS (Common Lisp Object System), assim como Eiffel e uma séria de outras linguagens orientadas por objeto menos conhecidas. As duas linguagens orientadas por objeto mais populares usadas hoje são C++ e Smalltalk. Eiffel está ganhando popularidade rapidamente mas fica atrás dessas duas no momento da escrita deste livro.

1.7 Objetivos desse livro

Este livro visa propiciar ao leitor uma base sólida nos princípios fundamentais de programação (nesse caso programação orientada por objeto) e na resolução de problemas.

#pg009#nt---#cm00#

A perspectiva orientada por objeto vista neste livro representa uma nova evolução numa tendência de enfatizar abstrações na resolução de problemas usando o computador e o uso do tipo abstrato de dados em particular (que será definido e discutido no próximo capítulo). Este livro introduz a modelagem de objetos. O autor deste livro acredita que um aluno iniciante vai se beneficiar altamente ao aprender logo cedo que o processo de desenvolvimento desoftwarenão começa escrevendo-se o código de um programa. Na verdade, um processo sistemático de análise e planejamento vem primeiro. É importante

que o leitor aprenda que a programação é apenas uma parte do processo intelectual associado à construção de software e à ciência da computação.

Através de uma abordagem orientada por objetos, você leitor será apresentado à noção simples e atrativa de que um sistema desoftwareé composto de objetos interagindo de maneira harmoniosa que se comunicam entre si através de mensagens. Essas mensagens são definidas com precisão numa descrição de uma classe.

Como muitos programadores estão descobrindo, a perspectiva orientada por objetos é bastante distinta da abordagem antiga, onde se começa de baixo para cima (aprendendo primeiramente sobre tipos numéricos, variáveis, operações de atribuição, operações de comparação, controle de fluxo e repetição, e muito mais tarde, sobre o conceito de funções).

Apesar da abordagem usada neste livro ser audaciosa, ela não é radical. A noção de função é apresentada desde o início (no capítulo 2) and usada em todo o resto do livro. O princípio do encapsulamento que une um modelo de dados com uma abstração funcional forma a parte principal do capítulo 2. Apesar de não enfocar em detalhes de programação até o capítulo 4, o leitor será apresentado ao processo de resolução de problemas orientado por objetos nos capítulos 2 e 3.

Eiffel foi escolhida para apoiar este esforço por causa de sua sintaxe relativamente simples, sua consistência, e seu suporte rico e direto à programação com objetos. Entre as várias linguagens orientadas por objetos desenvolvidas nos últimos 10 anos, ela é a mais elegante e talvez a mais poderosa.

Para os leitores que não estão usando este livro numa disciplina inicial em ciência da computação, deixem-me dizer porque C++ não foi escolhida para este livro. Apesar de reconhecer a enorme popularidade de C++ e a possibilidade de que o leitor tenha que acabar se acostumando rapidamente com esta linguagem, eu acredito que a complexidade de C++, que é de certa maneira uma sintaxe misteriosa, sua falta de segurança, seu apoio continuado em artefatos de baixo nível com ponteiros e referências, distraem do objetivo de aprender a resolver problemas usando objetos. C++ não encoraja nem desencoraja a solução de problemas de maneira orientada por objetos. #pg010#nt075#cm00#C++ é uma linguagem híbrida que culturalmente é embutida em “ideologia do C”. Apesar desta ideologia ter demonstrado ser extremamente produtiva, ela não leva ao aprendizado de um novo conjunto de mecanismos para solução de problemas.

Na minha opinião, esta é importante primeiro tornar-se eficiente no processo de solução de problemas orientada por objetos, antes de iniciar o desafio de dominar uma linguagem mais complexa. O “++” em “C++” não é um pequeno incremento da linguagem C.

E acredito que vocês acharão, como eu acho, que Eiffel não é somente uma notável linguagem para se aprender princípios básicos de construção de programas orientados por objetos, mas também uma rica e potente linguagem para usar na solução de problemas reais após você ter dominado os princípios da programação orientada por objetos.

É minha intenção que este livro inspire em vocês interesse e entusiasmo na solução orientada por objetos de problemas e proporcione a vocês com uma base sólida em alguns princípios básicos de ciência da computação.

1.8 Exercícios

• Cite várias maneiras nas quais computadores têm influenciado sua vida.(Por favor restrinja-se no uso de palavras tolas).

• Cite algumas profissões que envolvem um computador. • Explique os principais componentes de um computador. • Qual a vantagem no uso de uma linguagem de alto nível sobre uma linguagem de

máquina? • Quais são os passos tradicionais no ciclo de vida de um sistema desoftware? • Por que você está interessado por computadores ou pela ciência da computação?

Você pode manter sua resposta para esta questão em um lugar seguro por alguns anos e reler sua resposta em 3 anos.

#pg011#nt085#cm00#

2 Uma Abordagem Orientada Por Objetos para Resolver Problemas

Este capítulo é sobre objetos e classes e como cada um é usado na construção de um programa. Quando você terminar este capítulo, você terá aprendido: (palavras técnicas importantes são mostradas em negrito):

• Um objeto é uma instância de umaclasse. • Um objeto temdadose comportamento. • Um objeto pode utilizarcomandosou consultasde outros objetos. • Um comando permite modificar os dados mantidos pela instância de uma classe

(pelo objeto). • Uma consulta permite verificar o valor dos dados mantidos pela instância de uma

classe. • O estadode um objeto pode ser verificado através das consultas ao objeto (ao

valor de seus dados). • Classes podem ser relacionadas entre si de três maneiras diferentes:herança,

associaçãoe uso. • Algumas classes sãoabstratas já outras sãoconcretas. • Objetos são criados dentro de umprograma e interagem com outros objetos à

medida que o programa executa.

#pg012#nt095#cm00#

2.1 Objeto, objetos em todos os lugares

2.1.1 Objetos ordinários

O que é um objeto? Um objeto ordinário é caracterizado tanto por seu comportamento quanto pelo seu estado interno. Para objetos ordinários, há uma linha que separa o interior do objeto do lado de fora deste. Dentre as características que definem objetos ordinários estão incluídas textura, cor, cheiro, som, ou custo.

Uma criança no início de sua vida é capaz de distinguir objetos que estão ao seu redor. Isto inclui seus pais e as pessoas que tomam conta dela e os objetos próximos ou sobre seu berço. Isto quer dizer que os seres humanos são criaturas orientadas por objetos. À medida que nós envelhecemos nós aprendemos também a caracterizar objetos baseando no seu aspecto e comportamento. Nossa orientação por objetos é fortalecida pela a observação do mundo a nossa volta e, mais tarde, por um processo formal de educação. Por exemplo, em Química nós aprendemos, a compreender um átomo em particular baseados em sua classificação numa Tabela Periódica de Elementos. Em Biologia, nós aprendemos, a classificar as várias espécies de organismos vivosbaseados em uma elaborada classificação hierárquica de espécies.

Quando jovens, nós observamos os objetos a nossa volta, nós freqüentemente distinguimos ou classificamos objetos por suas semelhanças e diferenças de aspecto e comportamento. Mas, surpreendentemente, nós rapidamente aprendemos a classificar tipos similares de objetos como um carro independente de seu aspecto, tamanho, cor ou textura precisos. Uma criança pode naturalmente reconhecer um desenho mal feito de um carro no livro, um carrinho de brinquedo do tamanho de uma caixinha de fósforos, e um carro real bem como sendo diferentes exemplos, encarnações, ou “instâncias” da classificação CARRO. Muitas crianças podem distinguir mais tarde um carro de um caminhão baseando- se não apenas em sua forma precisa, tamanho, cor, ou outro dado "significativo" de um caminhão, mas ao invés, baseando-se em algumas das propriedades visuais abstratas de carros e caminhões. Parece uma característica dos seres humanos a habilidade natural de classificar objetos.Nós chamaremos estas classificações de classes.

A palavrainstância será usada para significar um membro particular de uma classe. Por exemplo, um carro vermelho do tamanho de uma caixa de fósforo que seja o brinquedo favorito de uma criança é uma instância da classe CARRO (serão usadas letras maiúsculas para classes) da mesma maneira que o esboço mal feito de um carro no livro de uma criança ou o automóvel real na garagem são outras instâncias de CARRO.

Muitas crianças desenvolvem um nível alto de entusiasmo para carros de brinquedo, caminhões, aviões, barcos, e trens. Esta fascinação parece estar baseada na habilidade comum de todos estes objetos moverem-se de um local a outro e, a mais importante, a habilidade que a criança tem de controlar este movimento. Cedo, as crianças são hábeis em obter uma entendimento abstrato de um VEÍCULO. #pg013#nt050#cm00#Esta abstração representa os traços comuns a todos os veículos incluindo carros, caminhões, aviões, barcos e trens (e outros tipos de veículos conhecidos mais tarde, no momento em que sua experiência de vida e poder aquisitivo aumentam). Uma criança parece apta para fazer esta generalização antes de aprender a palavra “veículo”. Como humanos parecemos ser capazes de desempenhar essa tais generalizações de maneira natural. Esta abordagem de classificação serve como base para uma abordagem “orienta por objetos” para solução de problemas.

A classe VEÍCULO, seja formalmente definida ou entendida informalmente, é considerada como sendo umaclasse abstrataem contraste com umaclasse concreta, tal como CARRO, CAMINHÃO, AVIÃO, BARCO, E TREM. Raramente uma criança pede para seu pai: “Por favor, traga-me o veículo vermelho do meu quarto”. Uma classe abstrata (como veículo) é aquela que não possui instâncias de verdade, mas pode ser usada para

produzir instâncias de classes concretas (como CARRO, CAMINHÃO, AVIÃO, BARCO, ou TREM). Ela é uma generalização de uma classe concreta.

A abstração da classe VEÍCULO contêm características comuns de CARRO, CAMINHÃO, AVIÃO, BARCO e TREM, formando a base para a noção deherança. A classe concreta adquire (herda) características de sua classe pai (a classe abstrata). Cada característica herdada da classe abstrata é achada em instâncias na classe concreta.

Em nossa percepção dos objetos ordinários, é difícil ou quase impossível, definir precisamente as características de cada classe concreta. Nós podemos rapidamente desenvolver a habilidade de identificar um carro com exatidão. Nós podemos nunca desenvolver a habilidade de definir a classe CARRO com precisão. Nossas habilidades de reconhecimento de padrões são baseadas em fenômenos complexos que não podem ser modelados facilmente. Quando nós “modelamos” uma classe CARRO, nós tentamos extrair características essenciais, ignorando os detalhes não essenciais. Entretanto, é confortante saber que embora não possamos modelar um carro com precisão, podemos ao menos guiá- lo.

2.1.2 Objetos como abstração

Quando começamos a pensar, escrever ou falar sobre carros, nós desenvolvemos uma abstração desta entidade. Esta não é uma atividade que vem facilmente ou cedo na vida. Tanto artistas quanto engenheiros precisam desenvolver tal abstração quando tentam representar um carro. Cada um fará isto de maneira diferente. O artista irá enfatizar o contorno, a textura e a cor ao passo que o engenheiro irá enfatizar o formato e o comportamento do carro. O engenheiro, em particular, se preocupa com a relação entre formato e comportamento. O modelo abstrato de um carro desenvolvido por um engenheiro deve unificar formato e comportamento. Esta unificação é chamada deencapsulamento.

#pg014#nt095#cm00#

Os aspectos referentes à forma, textura e cor devem ser considerados como os “dados” do carro. Além desses “dados”, o engenheiro se preocupa com questões como a capacidade de fazer curvas do carro, sua capacidade de frear, sua aceleração, etc. Estes fenômenos envolvem a reação do veículo a vários estímulos (por exemplo, pisar no pedal do acelerador, pisar no pedal do freio, virar o volante, etc.). O comportamento de um carro é fortemente influenciado por esses “dados”. Um carro grande e pesado geralmente requer muito mais potência para ter uma determinada capacidade de aceleração que um carro pequeno e leve. Ele é geralmente menos manobrável que um carro leve.

Para entender as características de aceleração de um carro, os únicos “dados” (daqui em diante chamados deatributos) que podem ser relevantes são a massa do carro, torque, fricção dos pneus e coeficiente aerodinâmico. Essas variáveis constituem o estado interno ou atributos da classe CARRO. Outros atributos como sua cor, marca ou preço são irrelevantes. Aspectos como a velocidade do carro podem ser calculados através do conhecimento desses atributos.

Se alguém está desenvolvendo uma abstração onde o carro é um produto comercial, então os atributos que nós devemos usar para representar o estado interno do carro incluem o valor de empréstimo, a taxa de juros do empréstimo, o número de meses do empréstimo,

o número de pagamentos já feitos, e o preço de tabela do carro. Por esses atributos, o “comportamento” do carro como produto comercial pode ser totalmente descrito.

A modelagem de objetos é similar à modelagem de quaisquer entidades da ciência. O nível de detalhes definidos no modelo depende das metas do problema. Se é desejado estudar as propriedades termodinâmicas da combustão de 4 tempos, associada a um motor de combustão interna, então um modelo que inclui os mínimos detalhes é apropriado. Isso incluiria informações sobre a geometria de cada cilindro e a geometria de cada pistão.

Portanto, a descrição de um objeto, a abstração do objeto, é baseada no problema onde o objeto existe. Aspectos do objeto que exercem um papel essencial na descoberta de uma solução para o problema dado devem ser representados no modelo de objeto (a classe) e os aspectos que não são essenciais são ignorados. Uma abstração representa uma descrição simplificada da realidade. ODicionário Oxford (1966) sugere o seguinte sobre abstrações: “O princípio de ignorar aqueles aspectos de um assunto que não são relevantes para o problema a fim de se concentrar mais naqueles que são.”

#pg015#nt085#cm00#

2.2 O modelo de objetos

Coad e Yourdon [1] definem um objeto como “uma abstração de algo no contexto de um problema, refletindo a capacidade do sistema em manter informações sobre ele ou interagir com ele; um encapsulamento de valores característicos e seus serviços exclusivos”.

Visto que o “contexto de um problema” pode se referir a quase qualquer coisa, os conceitos chave na definição dada acima, são abstrações, informações, “interação com”, valores e serviços exclusivos.

Abstração, como mencionado acima, envolve uma separação das características essenciais das não essenciais. Na definição de abstração, as características essenciais (e consequentemente as características não essências) são relativas ao problema que está sendo resolvido. Isto foi ilustrado na seção 2.1.2 com dois modelos de carro, um modelo físico e um modelo de comércio.

O conceito deinformação e atributos da definição de objetos acima, implica em armazenamento de dados. Cada atributo representa um componente distinto do modelo geral de armazenamento de dados. Isto foi ilustrado na seção 2.1.2 com as características de um carro como massa, aderência dos pneus, torque e coeficiente de aerodinâmica. As consultas na seção externa da classe (a parte da classe que é publicamente disponível) permitem que os valores de alguns atributos sejam obtidos.

O conceito de “interação com” e “serviços exclusivos” na definição acima sugere ação e comportamento. Os serviços associados com um objeto descrevem o que pode ser feito com o objeto ou para o objeto. Este é ocomportamento do objeto. Os comandos na seção externa da classe detalham precisamente quais serviços são acessíveis para os objetos da classe.

O modelo de objetos envolve dois componentes principais: um modelo de dados e um modelo de comportamento. Estes modelos estão contidos na descrição do objeto na classe. O modelo de dados fornece uma especificação precisa do tipo de informação que é

armazenada em cada objeto enquanto que o modelo de comportamento fornece uma especificação precisa dos serviços que podem ser executados no objeto ou pelo objeto. Somente os serviços descritos no modelo de comportamento podem ser executados pelo objeto. Se funções adicionais forem necessárias elas deverão ser acrescentadas no modelo de comportamento da classe que define o objeto em questão.

2.2.1 Um exemplo de modelo de objeto

Vamos considerar um exemplo simples para ilustrar um modelo de objeto. Suponha que desejamos construir um modelo de objeto para um contador(um objeto que serve para contar coisas). Este contador pode ser usado para registrar o número de vezes que um “evento de contagem” ocorreu. Exemplos de contagem podem incluir a contagem de veículos que chegam numa esquina numa simulação de tráfego ou a contagem do número de aviões que aterrizam numa pista de pouso em um determinado período de tempo.

#pg016#nt080#cm00#

Construiremos uma classe de nome CONTADOR para ilustrar o modelo de objeto.

O estado do objeto CONTADOR, uma instância da classe CONTADOR, é totalmente descrito por uma consulta. O valor da consulta,resultado, retém o valor total das vezes que o objeto citado incrementou sua conta. Esta consulta especifica a informação contida no próprio objeto CONTADOR de maneira única e completa.

Os comandos (serviços que podem ser executados pelo ou no objeto) incluem:

• criar – construir um novo objeto com valor inicial igual a zero • incrementar– adicionar o valor 1 ao estado atual do contador • zerar– muda o valor atual para zero

A figura 2.1 mostra uma descrição gráfica da classe CONTADOR.

Descrição Gráfica da Classe CONTADOR

Esta notação na qual uma classe é envolvida por uma nuvem pontilhada foi criada por Grady Booch [2] e é chamada de “nuvem de Booch” ou apenas diagrama de classe. O nome da classe fica escrito acima da linha horizontal. Abaixo dela estão os comandos e as consultas. O par de parênteses vazios perto de cada comando indica que estes comandos requerem a entrada de uma informação externa.

2.2.2 A metáfora do nome-verbo e nome- substantivo

Introduziremos uma notação para representar as ações que nós podemos executar em um objeto. Continuaremos com o exemplo da classe CONTADOR, apresentado na última seção. As quatro coisas que nós podemos fazer com este objeto são: criar um, aumentar o seu valor em um, acessar o seuresultadoatual e retornar o seu valor para 0. Estas são as responsabilidadesdo objeto CONTADOR.

#pg017#nt085#cm00#

Suponha que deixemos a entidadecontador_de_carrosrepresentar um objeto contador que é usado em um programa de simulação de tráfego para manter o controle do

número de veículos que chegam a um posto de pedágio de uma ponte. Os comandos e a consulta que podemos efetuar em tal objeto são:

Comandos:

contador_de_carros.criar contador_de_carros.incrementar contador_de_carros.zerar

Consulta:

contador_de_carros.resultado

Em cada uma dessas ações, o objeto recebendo a ação está conectado à operação no objeto por um conector ponto (“.”). Seria razoável dizer que a notação acima sugere que estamos realizando ações em um objeto particular para os comandos ou obtendo informação do objeto para a consulta..

Para os comandos, o objeto é um substantivo e a ação é um verbo. Para a consulta tanto a objeto e a consulta são substantivos.

2.2.3 Estado Interno

Suponhamos que haja três objetos CONTADOR no nosso programa simulador de tráfego: contador_de_carros, contador_de_caminhoes,e contador_de_onibus3. À medida que veículos chegam ao posto de pedágio da ponte, suponha que a seguinte seqüência de ações acontece:

contador_de_carros.zerar contador_de_caminhoes.zerar contador_de_onibus.zerar contador_de_carros.incrementar contador_de_carros.incrementar contador_de_onibus.incrementar contador_de_carros.incrementar contador_de_caminhoes.incrementar contador_de_carros.incrementar contador_de_caminhoes.incrementar

As três primeiras ações iniciam os três contadores em 0. Depois que as sete ações restantes são efetuadas, os objetos têm o seguinte estado interno:contador_de_carros (4), contador_de_caminhoes (2), contador_de_onibus (3). Os estados internos dos objetos são diferentes uns dos outros por causa das diferentes açõesincrementarefetuadas em cada um.

#pg018#nt095#cm00#

O ponto principal é que, embora existam três objetos CONTADOR distintos, cada um caracterizado pelo mesmo modelo de objeto (descrição de classe dada na Figura 2.1), os estados internos de cada um destes objetos evoluem dinamicamente.

3 NT: Note que os nomes não tem acentos, uma vez que devemos evitar o uso de acentos em identificadores (nomes usados para representar algo) quando estamos escrevendo numa linguagem de programação qualquer.

2.2.4 Cenários de objetos e mensagens

O diagrama de classe da Figura 2.1 representa um modelo estático da classe CONTADOR. O comportamento dinâmico não é mostrado. Um diagrama de cenário de objeto pode ser utilizado para descrever as interações dinâmicas entre os objetos.

Para cada comando dado no modelo de comportamento de uma classe (ex.:criar, incrementar, zerar),uma mensagem correspondente a este serviço pode ser enviada para uma instância da classe. Estas mensagens tomam a forma descrita na seção 2.2.3, onde dez ações são citadas. Cada uma destas expressões envolvem o envio de uma mensagem para um objeto.

O comportamento dinâmico da classe CONTADOR é mostrado na Figura 2.2. Esta figura inclui objetos de outras classes que utilizam os objetos da classe CONTADOR.

Diagrama de cenário de objeto

Na figura 2.2, quatro objetos são mostrados através das nuvens sólidas de Booch. O objetosimulacaoé uma instância da classe SIMULACAO (detalhes não mostrados aqui). O objeto posto_de_pedagioé uma instância da classe POSTO_DE_PEDAGIO (detalhes não mostrados aqui). Os objetoscontador_de_carrose contador_de_caminhoessão instâncias da classe CONTADOR.

Os números indicam a seqüência das ações. A primeira ação está associada com o objeto simulacaoenviando a mensagemcarro_chegapara o objetoposto_de_pedagio. A segunda ação está associada com o objetoposto_de_pedagioenviando a mensagem incrementarpara o objetocontador_de_carros.#pg019#nt050#cm00#A terceira ação é associada com o objetosimulacaode enviando a mensagemcaminhao_chegapara o objeto posto_de_pedagio. A quarta ação é associada com o objetoposto_de_pedagioemitindo a mensagemincrementarpara o objetocontador_de_caminhoes.

Deve-se enfatizar que somente mensagens que correspondem aos comandos disponíveis são permitidas. Por exemplo, pode ser ilegal para enviar para o objeto contador_de_carrosa mensagemaumentar_valor_em_tres. Tal mensagem com intenção de aumentar o valor deresultadoem três unidades, somente seria permitida se estivesse incluída na descrição estática da classe CONTADOR.

2.2.5 Parâmetros

Suponha que fosse desejado incrementar oresultadodo objeto CONTADOR em mais do que um (ex.: muitos carros chegam em faixas diferentes na mesma cabinedepedágio ao mesmo tempo). Um comando adicional pode ser adicionado ao modelo comportamental da classe CONTADOR. Nós podemos especificar este comando comoincrementar_em (quantia : INTEGER). A entidadequantia : INTEGERdentro dos parênteses indica que quantiaé um parâmetro eINTEGERé a sua descrição ou tipo. O parâmetroquantia indica qual o valor a ser adicionado àresultado. Nós assumiremos quequantiadeve ser um valor positivo.

Um diagrama de classes modificado é mostrado na figura 2.3 e um diagrama de cenário de objeto que uso o novo serviçoincrementar_emé mostrado na figura 2.4.

Descrição modificada da classe CONTADOR

#pg020#nt070#cm00#

Diagrama modificado de cenário de objeto

Um comando pode ter um ou mais parâmetros, cada um de um tipo específico. Eles fornecem valores externos de entrada para o comando que ajudam a determinar a ação executada.

Como exemplo de um comando com vários parâmetros, considere uma aplicação que envolve a construção de uma janela no vídeo de um computador (região geométrica definida por bordas em que os textos e gráficos podem ser mostrados). A informação externa requerida para construir tal janela inclui o comprimento e a largura da janela, além de sua coordenada superior esquerda. A especificação de tal comando em uma classe, JANELA, pode ser:

criar (canto: PONTO; largura : INTEGER; altura : INTEGER)

O primeiro parâmetro,canto, é do tipoPONTO. O tipoPONTO é uma classe que inclui entre seus serviçoscriar (x: INTEGER; y: INTEGER) para criar um objeto ponto de coordenadasx e y.

As ações a seguir, dadas por duas mensagens, podem ser tomadas para criar um objeto janela, cujas coordenadas do canto são (5,10), cujo comprimento é 100 e cuja altura é 200.

um_ponto.criar(5,10)

uma_janela.criar(um_ponto,100,200)

O primeiro comando cria einicializa um objeto ponto (um_ponto) com coordenada x igual a 5 e coordenaday igual a 10. Este objeto ponto é usado para criar einicializar um objeto janela (uma_janela) com canto superior esquerdo dado porum_ponto e comprimento de 100 e altura 200.

#pg021#nt080#cm00#

Ambas ações dadas pelas duas mensagens acima dependem da informação externa enviada nos dois parâmetros decriar da classePONTO e os três parâmetros decriar da classe JANELA.

Como um exemplo final que ilustra a importância de permitir que os comandos definidos em uma classe incluam parâmetros, considere a classe VEÍCULO. Suponha que queremos criar um veículo com determinada cor, peso, custo e potência. O comandocriar para a classe VEÍCULO pode ser definido como:

criar (cor : STRING; peso : INTEGER; custo : REAL; potencia : INTEGER)

O parâmetrocor é do tipo STRING. Essa é a classe que representa uma seqüência de caracteres em modelo de dados (uma palavra comum). As características de tal classe serão discutidas mais a frente no livro. Os parâmetrospeso e potencia são do tipo INTEGER enquanto o parâmetrocustoé do tipo REAL.

Embora não seja aparente, imediatamente ao leitor e de fato não pareça natural, valores numéricos do tipo INTEGER tem comportamento diferente dos valores numéricos do tipo REAL. Um objeto do tipo INTEGER pode ter apenas valores inteiros. Um objeto do tipo REAL pode ter valores fracionários. Quando fazemos contas com valores do tipo INTEGER, uma resposta exata é computada. Por outro lado, quando fazemos contas em valores do tipo REAL, nem sempre é possível chegar a uma resposta exata. Esse erro de arredondamento presente nas unidades de processamento aritmético de computadores digitais é causada pela capacidade finita de armazenamento para cada casa decimal. Uma quantidade como 1/3 (uma fração recorrente que requer um número infinito de casas decimais) só pode ser representada com precisão finita. Isto leva à introdução de um pequeno erro em qualquer computação que envolva essa quantidade decimal.

Como números do tipo INTEGER se comportam de maneira diferente de números do tipo REAL, seus comportamentos são especificados em duas classes diferentes.

2.3 Relações ent re objetos

Raramente nos preocupamos com objetos isolados. Ciência em geral e ciência da computação em particular estão se preocupando com modelagem e compreensão de sistemas. Sistemas orientado por objetos envolvem vários objetos de diferentes tipos trabalhando juntos para atingir desejada meta.

É importante que examinemos os tipos de relação que objetos podem ter uns com os outros. Várias relações importantes que objetos podem ter uns com os outros são baseadas nas relações entre suas classes. #pg022#nt095#cm00#Estas incluemherança (vista na seção 2.3.1),associação(vista na seção 2.3.2) erelação de uso(vista na seção 2.3.3).

2.3.1 Herança

A palavra herança sugere a aquisição de características de um ou mais ancestrais. Este é precisamente o sentido no qual nós deveremos usar este termo em associação com a solução de problemas orientada por objetos.

Suponha que queiramos construir uma nova classe, uma subclasse, que represente uma especialização de uma classe existente. Queremos que a subclasse possibilite o aumento de alguns atributos aos dados da classe mãe, assim como adicionar alguns comandos ou consultas. Também queremos que a subclasse compartilhe as características do modelos de dados da classe mãe e que forneça os serviços da classe mãe.

Há um princípio importante de consistência que deve ser satisfeito quando uma classe é uma subclasse de outra. Este princípio tem três partes:

• A subclasse deve ter uma relacionamento lógico com a mãe que possa ser expresso como “a subclasse é um tipo de” da classe mãe.

• Os atributos da classe mãe devem fazer sentido como parte do estado da subclasse.

• Os serviços da classe mãe devem fazer sentido como parte do comportamento da subclasse.

Como um exemplo, considere a ligação entre a classe VEÍCULO e a classe CARRO. Claramente, classe CARRO é uma especialização da classe VEÍCULO. Há muitos tipos de veículos que não são carros, mas não há carros que não sejam veículos.

Suponha que, para os propósitos deste simples exemplo, a classe VEÍCULO tenha os atributoscor, peso, velocidade_maxima, e preco.A classe CARRO tem os atributos adicionaisnumero_de_cilindros e cavalos_de_forca.

Agora vamos considerar a classe AVIÃO, uma outra subclasse da classe VEÍCULO. Em acréscimo aos atributospeso, velocidade_maxima e preco, herdados da classe VEÍCULO, ela tem o atributo adicionalenvergadura_da_asa.

Considere agora duas subclasses de AVIÃO: AVIÃO_A_JATO e AVIÃO_A_HÉLICE. A classe AVIÄO_A_JATO apresenta o atributoimpulso_maximo (uma característica de suas turbinas) e a classe AVIÃO_A_HÉLICE apresenta o atributo volume_deslocado(o volume de cada cilindro).

Por ser apenas um simples exemplo não serão feitos esforços no sentido de modelar os comandos e consultas de cada uma destas classes. O diagrama de Booch na figura 2.5 mostra a hierarquia de herança para estas classes básicas de veículo. As setas estão direcionadas das subclasses para as classes mãe.

#pg023#nt070#cm00#

relações de herança para classes VEÍCULO.

2.3.1.1 Classificação

Foi mencionado anteriormente que o processo de classificação pode ser usado para administrar complexidade. Sempre que um grupo relacionado mas de algum modo diferente precisa ser modelado, uma análise cuidadosa de suas semelhanças e diferenças pode levar a uma hierarquia de classes. Atributos que são compartilhados por várias devem ser colocados no topo da hierarquia. Serviços que são compartilhados por muitas subclasses devem também ser colocados no topo da hierarquia. A base principal para classificação é usualmente baseada na distribuição e reuso dos atributos (o modelo de dados).

Como exemplo, vamos considerar o mundo de cachorros de raça pura,. O clube KENNEL americano classificou os cachorros em vários subgrupos, de acordo com suas características físicas e comportamentais. A figura 2.6 mostra um pouco das relações hierárquicas das classes de cachorros de raça.

Várias classes são marcadas com adornos triangulares com a letra “A” colocada no centro do triângulo. O símbolo indica que a classe é uma classeabstrata. Uma classe abstrata jamais terá instâncias Seu propósito é agrupar atributos comuns assim como os serviços que são necessários nas classes descendentes. Esses atributos não são mostrados na figura 2.6.

#pg024#nt065#cm00#

Classificações de Cães

Um criador de cães é capaz de saber muito sobre uma raça de cães, conhecendo onde ela fica na hierarquia canina. Do mesmo modo, um engenheiro de software é capaz de saber muito a respeito do comportamento esperado de um objeto por conhecer onde está situado na hierarquia da classe em volta dele.

2.3.2 Associação

Os objetos a nossa volta são geralmente compostos de outros objetos. Seu computador é composto de uma unidade central de processamento, memória de acesso aleatório, memória cachede alta velocidade e armazenamento secundário. Cada um destes objetos pode ser dividido em pequeno objetos.Se você continuar a subdividir os componentes, no final, você se encontrará no nível molecular ou atômico. Como sempre, o problema sendo resolvido determina o nível apropriado de granularidade na modelagem de algum objeto como uma “associação” de outros objetos.

Vamos rever novamente o modelo de objeto de um carro. Um carro é composto de um motor, uma transmissão , um chassi, um jogo de rodas e pneus, um sistema elétrico, um sistema de suspensão, um sistema de escapamento e componentes do interior. Cada um destes são partes essenciais do carro e podem ser modelados como classes.

#pg025#nt050#cm00#

O objeto deve ser capaz de satisfazer ao relação “tem_um”em respeito a cada uma de suas partes.

A Figura 2.7 Demostra as relações de associação de um carro.

Relações de associação entre classes.

O círculo escuro conectando a classeCarro com seus componetesMotor, Transmissão, Suspensão, Rodas, ComponentesInternos, Sistema_de_Escapamento, e Sistema_Eletricoindica ao relação “tem um” de associação.

2.3.3 Relação de uso

Muitas vezes uma classe precisa usar os recursos de uma outra classe que pode não estar intimamente relacionada a ela. Por exemplo, uma classe SIMULAÇÃO pode precisar realizar operações matemáticas, incluindo seno, coseno, e raiz quadrada. Suponha que estes serviços são encontrados na classe MATEMÁTICA.Além disso, a classe SIMULAÇÃO precisa desenhar figuras geométricas na tela. Suponha os serviços para fazer isto são encontrados na classe GRÁFICOS.

A figura 2.8 demostra a relação de uso entre a classe SIMULAÇÃO e as classes MATEMÁTICA e GRÁFICOS. Os círculos claros ligados à classe SIMULAÇÃO indicam a relação de uso com as classes MATEMÁTICA e GRÁFICOS.

#pg026#nt095#cm00#

Uma relação de uso entre classes

2.4 Tipos abstratos de dados

Um tipo abstrato de dados (TAD) é um modelo de dados e um conjunto de operações associadas que podem ser efetuadas por ou em um modelo de dados. A classe CONTADOR definida anteriormente é um exemplo perfeito de um tipo abstrato de dados. O modelo de dados consiste em um simples inteiro,resultado. As operações que definem o comportamento desse modelo de dados sãocriar, incrementare incrementar_em. O tipo abstrato de dados CONTADOR pode ser entendido como um elemento unificado cujo propósito é contar eventos ou coisas. As coisas que se pode fazer para um objeto contador são zerar seu valor, incrementar seu resultado em 1, ou incrementar seu resultado de um valor inteiro arbitrário não negativo. Isso é tudo. Não se pode adicionar, subtrair, multiplicar ou dividir um objeto CONTADOR por outro objeto CONTADOR ou por um inteiro qualquer. Isso é porque o tipo abstrato de dados definiu propriedades singulares que não incluem tal aritmética.

Tipos abstratos de dados proporcionam poderosas abstrações que podem ser usadas como base para solução de problemas. Os detalhes de baixo nível do modelo de dados (os internos do TAD) se tornam sem importância quando decidimos como os TADs interagem entre si. Apenas as propriedades externas do TAD (definidas pelo conjunto de operações) são importantes na determinação de seu uso.

Tipos abstratos de dados são representados por classes numa linguagem orientada por objetos. Nas linguagens procedurais como C e Pascal, não há sintaxe de linguagem direta ou suporte para tipos abstratos de dados. Programação cuidadosa e disciplinada permite ao programador simular TADs.

O termo “omissão de –dados”(data-hiding)é usado significando que o modelo de dados (estado interno) de um TAD não pode ser modificado pelo usuário. O estado interno pode ser modificado apenas através do conjunto de operações definidas pelo TDA. Não há segredo associado com o termo “omissão de dados”(data-hiding), apenas proteção.#pg027#nt080#cm00#O estado interno de um objeto (um TAD) é protegido de corrupções negligentes.

Como se pode definir um tipo abstrato de dados para um semáforo?

O modelo de dados da luz deve permitir os estados internos verde, amarelo e vermelho. Esses valores podem ser definidos tendo um tipo COR_DE_LUZ (tal modelo de dados permitiria somente três valores para uma instância de COR_DE_LUZ).

Os comandos que poderiam ser efetuados na luz incluem:

• muda_cor(cor: COR_DE_LUZ) • prossiga

A operaçãomuda_cor permite ao usuário ajustar o estado interno da luz. A operaçãoprossigamuda a cor da luz através da seqüência verde, amarelo, vermelho quando aplicada repetidamente. O comportamento do semáforo é completamente especificado pelas operaçõesmuda_core prossiga.

2.5 Produtores e consumidores.

Um sistema de software é geralmente composto de vários componentes individuais. Em uma organização orientada por objeto, esses componentes são dados pelas classes. Uma biblioteca de classes contém uma coleção de classes unidas por seu suportes para alguma área de aplicação. Bibliotecas de classes têm sido construídas para apoiar interfaces gráficas de usuário dentro da programação em Windows, banco de dados para armazenamento de informações complexas, matemática computacional para aplicações em engenharia e ciências, estruturas de dados para representação de tipos abstratos de dados, operações de entrada e saída e outras áreas de aplicações.

Um produtor é um programador cujo objetivo principal é a construção de bibliotecas de classes para serem usadas por outros programadores ou por outras partes de uma aplicação. Umconsumidor é um programador que faz uso da biblioteca de classes para aplicações específicas. Muitas vezes um programador faz o papel dos dois, produtor e consumidor, produzindo algumas classes para depois serem usadas por outras ou na própria aplicação, usando classes já existentes.

É geralmente aconselhável usar recursos disponíveis de uma biblioteca existente para desenvolver uma nova aplicação a menos que você deseje desenvolver novas aplicações a partir de seus princípios básicos (por exemplo reinventar a roda). Um programador instruído pode ser capaz de construir aplicações de software através do uso de componentes de software existentes que são conectados junto com uma pequena porção de código novo. Esta seria uma atividade de consumidor.

#pg028#nt070#cm00#

Como exemplo, considere, uma típica aplicação inicial de programação. Nós desejamos escrever um programa que mostra seu nome na tela de seu computador.

Muitas linguagens de programação são apoiadas por uma ou mais bibliotecas para fazer entrada e saída de dados. Entrada de dados é o processo de interação entre o usuário e computador na qual o usuário transfere informação para o programa que você está usando. Saída de dados é o processo de interação entre o usuário e o computador no qual um programa transfere informação ao usuário.

O primeiro programa que nós desejamos construir envolve somente uma saída simples. O programa deverá mostrar o nome do usuário no terminal de vídeo.

A identação segue o estilo geral do Eiffel.

Um primeiro programa: Mostrando seu nome. class PRIMEIRO_PROGRAMA

creation inicio

feature inicio is

do io.putstring(“Meu nome e’ xxx”)

end ;

end -– class PRIMEIRO_PROGRAMA

Na listagem 2.1, a classe PRIMEIRO_PROGRAMA contém uma rotina,inicio, que inicia a aplicação. Um arquivo de configuração chamado arquivoACE informa ao sistema EIFFEL que PRIMEIRO_PROGRAMA é a classe de aplicação e especifica queinicio é o ponto de entrada para a aplicação. O leitor deve consultar o seu guia do usuário do sistema EIFFEL para detalhes relacionados com a construção de um arquivoACE.

A rotina inicio contém somente uma única linha executável de código,io.put_string (“Meu nome e’ xxx”) onde o usuário deve substituir o “xxx” com seu nome. O objetoio é definido em uma biblioteca padrão de entrada e saída de dados disponível em todos os sitemas Eiffel. Esta biblioteca é um importante componente reusável de software. A rotina putstring é uma das muitas rotinas definidas nesta biblioteca. Ela permite ao usuário mostrar uma “string” (de caracteres) no terminal de vídeo. Uma “string” é uma seqüência de caracteres.

#pg029#nt055#cm00#

Os detalhes formais para escrita de programas em Eiffel e o uso das bibliotecas existentes nele estão introduzidos no capítulo 3. Contudo o leitor pode querer digitar o código da listagem 2.1, compilar e executá-lo. É muito emocionante quando o primeiro programa de alguém é completado com sucesso.

O autor da listagem 2.1 agiu como um consumidor. O recurso que ele consumiu, ou utilizou, foi a biblioteca padrão de entrada e saída de dados. Em capítulos posteriores você verá como inspecionar a interface das bibliotecas e como usar seus recursos. Do começo ao fim deste livro serão usadas rotinas importante de bibliotecas importantes do Eiffel na construção de aplicações específicas. Você também deverá verá o processo de criação de rotinas para uso por outras pessoas.

Deve-se tornar um consumidor competente antes de se tornar um produtor competente. Vários capítulos posteriores enfatizam as responsabilidades do produtor.

2.6 Modelagem de objetos

Modelagem de objetos é envolve análise edesign. Por causa da natureza introdutória deste livro, somente os conceitos fundamentais dedesigne análise de objetos serão explorados nesta sessão.

2.6.1 Análise

Análise desoftware, tanto orientado por objeto ou não, envolve entendimento e modelagem do problema. Os principais elementos do problema são mapeados em componentes de software. A arquitetura inicial destes componentes desoftwareé construída de maneira precisa, descrevendo as conexões que existem entre várias entidades do problema. No contexto da orientação por objeto essas entidades são objetos, cada um é uma instância de classe particular.

A análises orientada por objetos envolve a descoberta de classes importantes e suas conexões com outras classes importantes. Como discutido anteriormente, cada classe encapsula um modelo de dados e um conjunto de serviços associados. Estes serviços

representam o modelo de comportamento das classes. Muito do trabalho de análise orientada por objeto envolve determinar o modelo de dados e comportamento de cada classe.

A arquitetura estática, desenvolvida no nível de análise, é dada pelas associações entre classes. Essas associações incluem relações de associação (todo / parte essencial) relação de uso e relações de generalização / especialização (herança). Essas relações são discutidas e ilustradas a seguir.

#pg030#nt095#cm00#

2.6.1.1 Relação de associação

Uma relação de associação é uma relação “todo / parte essencial” ou “intrínseca”. O objeto “inteiro” é “composto da parte”. Essa parte deve ser essencial para a integridade do todo.

A relação de associaçãoé um tipo natural de associação. Muitos dos objetos ao seu redor são compostos de partes constituintes. Por exemplo, seu monitor é composto por uma capa de plástico, um tubo de vídeo e botões de controle ou teclas. Cada uma dessas partes constituintes são essenciais para o funcionamento do monitor.

O motor em um carro pode ser considerado a ser uma parte essencial do carro. Embora podendo certamente ser argumentado que o motor tem uma identidade própria (até o seu próprio número de série), pode ser produzido em local separado e pode ser colocado dentro e fora de carros, pela maioria das aplicações o carro é associado com um motor particular que não será mudado. Além disso, o funcionamento do carro é totalmente dependente da presença de um motor. A partir desse ponto de vista, a identidade de um carro (o objeto inteiro) não é separado do motor (a parte constituinte e essencial). O sistema de transmissão do carro poderia também ser considerado uma parte essencial do carro. Alguém poderia, portanto, dizer que o carro (o todo) tem uma relação de associação com o motor e a transmissão (as partes). Há, é claro, muitos outros componentes essenciais do carro que não foram citados.

Num anel de diamante, é justo argumentar que o anel (o objeto todo) tem uma relação de associação com suas partes essenciais, um aro de ouro e uma pedra de diamante. Embora cada uma possa ser produzida separadamente, de um ponto de vista de modelo a identidade d aro de ouro e da pedra de diamante não é crítica. O que é crítico é a identidade de todo o objeto, o anel.

A notação deBoochpara uma relação de associação é mostrada na figura 2.9. A classe com o retângulo escuro é a “parte” e a classe com o círculo escuro é o “todo”.

Relação de associação

#pg031#nt095#cm00#

2.6.1.2 Relação de Uso

Como exemplo de uma relação de uso, tomemos uma sala, algumas mesas e cadeiras. A sala tem uma identidade sem suas mesas e cadeiras. A sala ainda existe mesmo quando está vazia. As mesas e cadeiras podem ser mudadas, rearranjadas, trocadas, ou facilmente removidas.

A notação de Booch para uma relação de uso é mostrada na figura 2.10. Aqui uma sala é mostrada tendo um relacionamento de uso para zero ou mais cadeiras e zero ou mais mesas.

Relação de Uso

2.6.1.3 Relação de Herança

Herança é um contexto de programa orientado por objeto que implica em especialização. Uma classe pai define atributos gerais e comportamento que são compartilhadas pelas suas crianças. Cada classe criança contém atributos ou comportamento (serviços) mais especializados que não estão presentes no pai.

Por exemplo, um carro pode ser considerado outro tipo especial de veículo. Um carro e um avião podem compartilhar certos atributos (cor, peso, preço) mas têm atributos separados (número de pistões para um carro, envergadura de asa para um avião).

A notação de Booch para herança é mostrada na Figura 2.11 usando as classes VEICULO, CARRO e AVIAO. As setas apontam da criança ao pai (na direção da generalização).

Relação de Herança

#pg032#nt095#cm00#

2.6.2 Análise de um elevador

Discutiremos alguns elementos simples da análise orientada por objeto de um elevador em um prédio comercial.

Quais são os aspectos relevantes para o problema? Existe, é claro, um elevador. Existe um conjunto de botões, cada um com um número indicando um andar em particular do prédio comercial. O elevador é pintado com uma certa cor. Mas isto certamente não é relevante para o funcionamento de um elevador e não será incluído no modelo de análise. Finalmente, existe um usuário, um ser humano que entra no elevador e deseja ser transportado para outro andar, tanto superior quanto inferior, no prédio comercial.

Baseado na descrição do problema, existe uma relação todo/parte entre o elevador e seus botões. Cada elevador tem um conjunto de botões que contêm todos os locais onde o elevador pode ir. Estas são as partes essenciais de um elevador.

Na Figura 2.12, um simples diagrama de classe exibindo a classe ELEVADOR e a classe BOTÃO, é mostrado.

Diagrama de classe paraelevador

Cada nuvem pontilhada representa uma classe. O nome de classe é dado dentro da nuvem. Como indicado anteriormente, a reta com um ponto em seu começo, que une a classe ELEVADOR à classe BOTAO, indica uma relação todo/parte ou uma relação de associação. A classe com o ponto “tem” ou “é composta” da classe que não tem o ponto.

A notação, 1..n, no final da linha indica que existe um ou mais botões que são partes do elevador. O quadrado no final desta linha indica que a classe ELEVADOR contém um conjunto de botões (eles não são compartilhados por quaisquer outros objetos).

Quando uma pessoa entra em um elevador, ele ou ela aperta um botão. Esta ação é mostrada no diagrama de cenário de objeto dado na Figura 2.13.

Cada nuvem sólida representa um objeto especifico com um nome dado dentro da nuvem. Os números seguidos de dois pontos representam a seqüência das ações. Os três eventos que são mostrados na Figura 2.13 são: (1) uma pessoa entra no elevador, (2) a pessoa escolhe um dos vários botões, e (3) a pessoa aperta este botão escolhido.

#pg033#nt085#cm00#

Diagrama de cenário de objetos para uma pessoa entrando no elevador.

O primeiro evento, uma pessoa entrando no elevador, é descrito na figura 2.13 pelo objetouma_pessoamandando a mensagementrar para o objetoum_elevador.

O segundo evento na figura 2.13 é exibido pelo objetouma_pessoamandando a mensagemselecionar_botãopara uma coleção de objetosbotões, mostrado por três nuvens. O botão selecionado é mostrado com o nomebotao_selecionado.

O terceiro evento exibido é o objetouma_pessoaenviando a mensagemapertar para o objetobotao_selecionado.

2.6.3 Projeto

Se alguém olha para o problema ao fazer uma análise, deve olhar para a solução quando faz o projeto. A solução é um sistema desoftwarecontendo vários objetos que interagem uns com os outros. Cada objeto é tipicamente definido por uma classe. Durante o projeto, identifica-se precisamente classes adicionais que interagem com classes principais identificadas na análise para completar uma solução para o problema.

A natureza preliminar deste livro o faz impróprio para detalhar a fase de projeto.

#pg034#nt090#cm00#

2.7 Sumário

• Objetos ordinários são caracterizados por seus comportamentos assim como seus atributos.

• Parece que os seres humanos possuem uma habilidade natural de classificar objetos. Nós chamaremos essas classificações de classes.

• A palavra “instância” será usada para significar um objeto cujas propriedades são descritas numa classe.

• A descrição de um objeto, a abstração do objeto, é baseada no domínio do problema no qual o objeto existe.

• Uma abstração representa uma descrição simplificada da realidade.

• As características do objeto que são essenciais para se achar uma solução do problema dado deve ser representada no modelo do objeto (a classe) assim como características que não são essenciais devem ser ignoradas.

• Coad e Yourdon definem um objeto como “uma abstração de algo no domínio de um problema, refletindo a capacidade de um sistema de manter informação sobre ou interagir com ele; um encapsulamento de atributos e seus serviços exclusivos.

• O modelo de dados fornece uma precisa especificação de qual informação é mantida em cada objeto.

• O modelo de comportamento fornece uma precisa especificação dos comandos que podem ser realizados no objeto.

• Um objeto recebendo uma ação é conectado à operação nesse objeto usando um conector ponto (“.”).

• Um diagrama de classe é usado para descrever a arquitetura estática do sistema de software.

• Um diagrama de cenário de objeto é usado para descrever as interações dinâmicas entre objetos.

• Um serviço específico pode ter um ou mais parâmetros, cada um de tipo específico. Isso fornece uma entrada externa ao serviço que ajuda a determinar a ação realizada pelo serviço.

• Ciência em geral e ciência da computação em particular envolve modelagem e compreensão de sistemas.

#pg035#nt065#cm00# • Sistemas orientados por objetos envolvem muitos objetos de tipos diferentes

trabalhando juntos para alcançar, de alguma maneira, um objetivo desejado. • O processo de classificação pode ser usado para gerenciar complexidade. • Sempre que um grupo de objetos diferentes, mas relacionados de alguma

maneira, precisarem ser modelados, uma cuidadosa consideração de suas semelhanças e diferenças pode levar a uma hierarquia de classes.

• Atributos que são compartilhados por muitas subclasses devem ser postos em classes no topo da hierarquia.

• A base fundamental para classificação é geralmente baseada na distribuição e reunião de atributos (isto é, um modelo de dados)

• A subclasse deve ter um relacionamento lógico com sua classe mãe, que possa ser expressa como “a subclasse é um tipo de” da classe mãe.

• Os atributos da classe mãe devem todos fazer sentido como parte do estado da subclasse.

• Todos serviços da classe mãe devem fazer sentido como parte do comportamento da subclasse.

• Os objetos em nossa volta geralmente são feitos a partir de outros objetos mais simples.

• Um tipo abstrato de dados (TAD) é um modelo de dados e um conjunto associado de operações que podem ser feitas no modelo de dados.

• Os tipos abstratos de dados fornecem poderosas abstrações que podem ser usadas como base para resolver problemas.

• Torna-se sem importância o interior dos TADs quando decidimos como eles vão interagir entre si. Somente as propriedades externas do TAD (definidas por um conjunto de operações) são importantes na determinação de seu uso.

• Os tipos abstratos de dados são representados por classes em linguagens orientadas por objetos.

• O termo “omissão de dados” é usado para dizer que o modelo de dados (estado interno) de um TAD não pode ser acessado diretamente pelo usuário. O estado interno só pode ser modificado através de um conjunto de operações pré- definidas.

• Um produtor é um programador cujo objetivo principal é a construção de uma biblioteca de classes para outros programadores ou outras partes de um aplicativo.

#pg036#nt000#cm00#

#pg037#nt085#cm00# • Desenhe um diagrama de Booch de uma hierarquia de veículos. A classe raiz

nesta hierarquia deverá ser a classe VEICULO. Indique os atributos associados a cada classe na sua hierarquia de veículos. Os dois primeiros elementos do princípio de consistência estão satisfeitos na sua hierarquia? Explique em detalhes.

• Acrescente alguns métodos (comportamento) para cada classe em sua hierarquia veículo do problema anterior. O terceiro elemento do princípio de consistência foi satisfeito para sua hierarquia?

• Desenhe um diagrama de Booch que descreve as classes que modelam uma sala de aula universitária. Inclua os estudantes, professor, monitor, e qualquer outra coisa que você puder pensar. Mostre as relações que estes objetos têm um com o outro em seu diagrama de classe.

• Ilustre o princípio decomposição construindo uma classe que é composta de outros objetos. Desenhe um diagrama de Booch de sua classe.

• Descreva os passos fundamentais envolvendo o ato de escrever um cheque pessoal usando um diagrama de cenário de objeto de Booch. Mostre todos os objetos envolvidos em seu cenário e a sucessão de mensagens enviadas a cada objeto. Descreva com suas próprias palavras o significado de seu diagrama.

• Mostre as associações apropriadas entre as classes que descrevem as entidades seguintes: tulipa, rosa, flor, pétala, abelha, vaso de flor.

• Mostre as associações apropriadas entre as classes que descrevem as entidades seguintes: motocicleta, bicicleta, carro, barco, hidroavião, avião, avião a jato, planador e mobilete.

• Mostre as associações apropriadas entre as classes que descrevem as entidades seguintes: biblioteca, livros, fichário, estantes, seções de estantes, e usuários.

• Mostre as associações apropriadas entre as classes que descrevem as entidades seguintes: universidade, salas de aula, estudantes, professores, quadro-negro, escrivaninhas, terminais de computador, cadeiras, cadernos, e cursos. Se você desejar acrescentar algumas entidades adicionais para enriquecer sua modelagem de objetos, sinta-se livre para fazer isto. Indique para toda classe adicional seu propósito e mostre sua associação com as classes especificadas acima.

#pg038#ntnnn#cm00#

#pg039#nt085#cm00#

3 Os Elementos Básicos de Programas de Eiffel

3.1 Programando

Nós começaremos a programar neste capítulo.

Um sistema de software é uma coleção interconectada de unidades algumas vezes chamadas módulos. Cada módulo contém um conjunto logicamente coerente de operações e um modelo de dados subjacente (que está por trás das operações). Em um contexto de orientação por objetos, um módulo é o mesmo que uma classe: uma unificação de um modelo de dados e comportamento consistindo em um conjunto de funções chamadas consultas e comandos que podem acessar e manipular as informações contidas no modelo de dados. A princípio cada módulo representa um pedaço potencialmente reutilizável de código.

Um ponto de vista de "sistemas" é bem diferente do ponto de vista de um "programa" monolítico mais tradicional. Usando a abordagem do "programa", todo o comportamento desejado do software deve ser embutido e considerado para a única entidade (seu programa). Usando a abordagem de "sistemas", cada módulo é responsável por apenas uma pequena, mas bem enfocada porção do comportamento desejado do software.

Linguagens de programação mais modernas, inclusive Eiffel, favorecem uma abordagem de "sistemas" para construção desoftware. Esta é a abordagem que nós tomaremos desde o começo. Usando esta abordagem, nosso primeiro programa de Eiffel que se denomina "Meu primeiro programa" é dado na listagem 3.1.

Para se ajustar com o mais recente padrão de formatação Eiffel, todos os caracteres são escritos em itálico e em adição, palavras reservadas na linguagem são escritas em tipo negrito.#pg040#nt075#cm00# A indentação também segue o padrão de formatação Eiffel.

Primeiro programa em Eiffel class APLICAÇÃO creation

comece

feature

comece is do

io.put_string("meu primeiro programa") io.new_line

end

end --class APLICAÇÃO

Os dois comandos de saída,put_stringe new_linequando enviados para o objeto padrão de entrada e saída (o objetoio) fazem com que astring “meu primeiro programa”, seja exibida na saída padrão (seu monitor de vídeo) com a posição do cursor movida para a próxima linha. Como a saída e entrada de dados são necessárias e são padrão, o objetoio não precisa ser declarado explicitamente. Sua existência ocorre por padrão, em todas as aplicações em Eiffell.

Mesmo para ser capaz de escrever este simples programa, o programador deve ter algum conhecimento dos serviços de saída de dados na classe STANDARD_FILES. Um resumo destes serviços pode ser obtido usando uma ferramenta chamadashort. Esta ferramenta retira todos os detalhes de implementação e revela somente a informação de interface que poderia ser relevante para o uso desta classe. A listagem 3.2 mostra parte destes detalhes de interface usando o resultado da aplicação doshort na classe. Somente as rotinas de saída de dados contidas nesta classe são mostradas, Elas proporcionam meios para que o programador possa imprimir caracteres, inteiros, frações decimais (números do tipo ponto flutuante), strings e valores booleanos.

Partes da interface da classe STANDARD_FILES.

class interface STANDARD_FILES feature specification

-- rotinas de saída

#pg041#nt090#cm vários erros de formatação# put_char (c : CHARACTER) --Escreve ‘c’ no fim da saída default.

put_string (s : STRING) --Escreve ‘s’ no fim da saída default.

put_real (r : REAL) --Escreve ‘r’ no fim da saída default.

put_double (d : DOUBLE) --Escreve ‘d’ no fim da saída default.

put_int (i : INTEGER) --Escreve ‘i’ no fim da saída default.

put_bool (b : BOOLEAN) --Escreve ‘b’ no fim da saída default.

new_line --Escreve mudança de linha no fim da saída default. --Muitas rotinas não exibidas.

end interface – classe STANDARD_FILES

A classeAPLICAÇÃO na Listagem 3.1 serve para iniciar a execução do software. Ela é a classe raiz da aplicação. Todos os softwares Eiffel devem estar acompanhados de um arquivoAce que especifica onde estão os arquivo das bibliotecas padrão, os arquivos gerados pelo programador que constituem a aplicação dada, o nome da classe raiz, e o nome da rotina de criação dentro da classe raiz. O arquivo Ace que controla a aplicação dada na Listagem 3.1 é mostrado na Listagem 3.3.

Arquivo Ace para Listagem 3.1 (Usando sistema ISE Eiffel 3)

system test

root aplication (ROOT_CLUSTER): “comece”

default

assertion (all); precompiled (“$EIFFEL3/precomp/spec/$PLATFORM/base”)

cluster ROOT_CLUSTER: “/disk2/EIFFELWORK3/WORK”;

end

#pg042#nt085#cm erro no layout#

O Leitor pode querer consultar o manual de instruções que vem junto com o sistema Eiffel para maiores detalhes a respeito de arquivos Ace.

3.2 A linguagem Eiffel

A linguagem nasceu no final dos anos 80. É uma linguagem totalmente orientada por objeto. Isto implica que as funções podem ser chamadas somente através de objetos e não sozinhas, como entidades lógicas auto-suficientes. O que é um contraste evidente para a popular, mas complexa linguagem orientada por objetos C++ que admite uma mistura de programação orientada por objetos e estruturada na mesma aplicação, sendo denominada linguagem híbrida.

Como uma linguagem totalmente orientada por objeto, a classe em Eiffel é a unidade básica lógica do encapsulamento bem como a unidade básica física, um módulo. Um programa em Eiffel é organizado como um conjunto de classes interligadas e cooperando entre si.

Nas diversas seções seguintes os elementos básicos da programação em Eiffel serão apresentados. Muitos desses elementos são similares aos de outras linguagens. O projetista do Eiffel, Bertrand Meyer, tem sido um grande estudioso da tecnologia de linguagens de programação e projetou uma sintaxe que utiliza algumas das melhores características

encontradas nas outras linguagens. Acredito que você irá achar a sintaxe do Eiffel coerente, lógica e legível.

3.3 Criando e destruindo objetos

Programas são constituídos de classe que criam objetos. Estes objetos são criados, realizam suas tarefas, e são normalmente destruídos. Quando um objeto é criado, um espaço na memória é reservado para seu armazenamento. Quando o mesmo é destruído o espaço reservado é liberado e poderá ser reutilizado por outros objetos criados depois.

Um objeto em Eiffel, e nas outras linguagens orientadas por objetos, é uma instância de uma classe. Seus atributos são dados por um modelo de dados de sua classe. Os comandos que ele pode responder (as rotinas que se pode solicitar através dele) são especificados por um conjunto de rotinas dadas na descrição da classe.

Antes de um objeto ser criado no Eiffel, ele deve ser declarado para se tornar uma variável de um certo tipo. Este tipo é o nome da classe da qual o objeto será uma instância (depois de criado). Quando uma declaração de tipo em Eiffel como,meu_carro: CARRO, é dada, o compilador verifica se a classe referida foi definida. Normalmente o arquivo que define a classe deve estar no mesmo subdiretório da classe na qual a declaração existe.

#pg043#nt070#cm vários erros de identação na listagem#

A declaraçãomeu_carro: CARRO não cria uma instância da classe CARRO. Nenhuma memória é reservada para o objetomeu_carro, como em qualquer outro objeto que foi apenas declarado, assumindo o valor Void(que significa vazio). Neste estado, o objeto não pode receber qualquer comando ou efetuar nenhuma tarefa proveitosa.

Normalmente, parameu_carrose tornar uma instância da classe CARRO e ter um região de memória corretamente alocada para si, uma rotina de criação ou um operador de criação deve ser usado.

Considere o caso onde a classe CARRO não tem nenhuma rotina de criação especificada. O que poderia fazer o objetomeu_carroexistir (ou seja, reservar um local de armazenamento para ele) poderia ser usar o seguinte operador de criação:!!meu_carro. O resultado desta expressão é a criação de um local para armazenarmeu_carro, mas sem providenciar qualquer inicialização dos atributos que podem ser definidos na classe CARRO. Desta maneira, alguns atributos, como aqueles declarados como sendo do tipo INTEGER, REAL, BOOLEAN ou CHARACTER, assumem inicialmente valores padrão (nulos).

Considere outro caso onde a classe CARRO providencie três rotinas de criação: criar, montare construir. Uma parte da classe CARRO é a seguinte: class CARRO

creation criar, montar, construir

feature criar(cor: STRING; preço: REAL; peso: INTEGER) is -- Detalhes não mostrados

end -- criar

montar(cor: STRING; preço: REAL; peso: INTEGER; potencia: INTEGER) is

-- Detalhes não mostrados end -- montar

construir(cor: STRING) is -- Detalhes não mostrados end -- construir

Algumas expressões que poderiam criar o objetomeu_carroincluem: !!meu_carro.criar(“Branco”, 25600, 3100) !!meu_carro.montar(“Vermelho”, 12000, 3500, 125) !!meu_carro.construir(“Azul”)

#pg044#nt095#cm00#

Em todas as três expressões acima, o objetomeu_carroé criado e inicializado com os valores dados como parâmetros nas várias rotinas de criação. No primeiro caso dado acima (!!meu_carro) meu_carroé criado mas os atributos assumem seus valores padrão.

Deveria ficar claro nessa discussão que objetos devem ser explicitamente criados ou usando o operador de criação (!!) na frente do objeto que você deseja criar ou usando uma rotina de criação específica em conjunto com o operador de criação, como mostrado nos três exemplos acima.

Como os objetos de Eiffel são destruídos? Os sistemas Eiffel proporcionam “coleta automática de lixo” (garbage collection). À medida que um aplicativo Eiffel roda, um processo de coleta de lixo está rodando em segundo plano e detectando quando uma região de memória não está mais ligada a um nome de variável. Em um momento oportuno o processo de coleta de lixo recicla (efetivamente destrói) o armazenamento desnecessário. O seguinte segmento de código mostra um exemplo de um armazenamento que não é mais necessário:

meu_carro : CARRO !!meu_carro.construir(“Azul”) !!meu_carro.construir(“Vermelho”)

A sentença,!!meu_carro.construir(“Azul”), faz com que o armazenamento de memória seja alocado e o nome do objetomeu_carroanexado a esse armazenamento. A terceira sentença,!!meu_carro.construir(“Vermelho”),faz com que novo armazenamento de memória seja alocado e o nome do objetomeu_carro anexado a esse novo armazenamento, deixando o antigo desanexado de qualquer outro nome de objeto.

A seqüência de ações é mostrada na Figura 3.1.

#pg045#nt090#cm00#

Produção de Lixo.

A seção de memória destacada que contém “Azul” pode ser recuperada pelo coletor automático de lixo (garbage collector) enquanto o programa está rodando. Não é da responsabilidade do programador deEiffel fazer isto.

3.4 Tipos básicos, valores default e atribuições

Existem vários tipos básicos de objetos que não exigem uma criação definida para serem usados. Os importantes são: INTEGER, CHARACTER, REAL e BOOLEAN. Considere as seguintes declarações:

um_inteiro : INTEGER um_caracter : CHARACTER um_real : REAL um_boolean : BOOLEAN

Cada um desses objetos de tipos básicos recebe um valordefaultque não éVoid.

Objetos do tipo INTEGER têm um valordefault de 0. Objetos do tipo CHARACTER têm um valordefault do caracter NULL (valor ASCII 0). Objetos do tipo REAL têm um valordefaultde 0.0. Finalmente, objetos do tipo BOOLEAN têm um valor defaultdefalse.

#pg046#nt030#cm00#

Os tipos básicos apresentados na seção anterior têm significado de valores. Isto implica que a declaração de tais objetos causam alocação automatica de memória e atribuição de valoresdefaultpara eles.

Quando um tipo básico de objeto (objeto de origem), é atribuído para outro tipo básico de objeto (objeto de destino), este reside numa região de memória diferente de onde está o objeto de origem. O operador de atribuição do Eiffel é “:=”.

O comando a := b deve ser lido como “a recebe b”.

A figura 3.2 mostra a atribuição entre dois objetos do tipo inteiro.

Atribuição de objetos de tipos básicos

3.5 Tipos de objetos ordinários ou de referência.

Objetosordinários (objetosnão básicos) tem semântica de referência. Isso implica que o programador é responsável pela alocação de memória através de um operador de criação, possivelmente junto com uma rotina de criação como foi discutido na seção 3.3. O valor defaultde um objeto ordinário éVoid. Após o programador alocar um espaço na memória para um objeto, o nome do objeto é anexado àquela região de memória (ver figura 3.1)

O que significa atribuir um objeto ordinário a outro?

Considere o segmento de código abaixo:

#pg047#nt050#cm00#

meu_carro: CARRO

seu_carro: CARRO !!meu_carro.criar (“verde”,1000,2000) seu_carro:=meu_carro

A figura 3.3 representa a semântica do segmento de código acima.

Atribuição de objetos de tipos de referência

Depois da atribuição demeu_carroparaseu_carro, ambos nomes dos objetos, são ligados à mesma região de memória. Isto implica que se um dos atributos demeu_carrofor modificado, através do envio de um comando tal, comomeu_carro.mudar_peso(2500), o atributo peso deseu_carro também será modificado para 2500. Não há dois objetos independentes, mas dois nomes diferentes para o mesmo objeto na memória (só um objeto existe na memória do computador).

3.6 Copiando Objetos

Supondo que nos desejássemos que o objetoseu_carroda seção anterior tivesse os mesmos valores de atributos demeu_carro, sendo um objeto independente que não é ligado à mesma região de memória demeu_carro. Suponha quemeu_carrotivesse sido criado e inicializado. Isto pode ser feito assim: (1) Crie o objetoseu_carroe (2) Use a rotinacopy que é disponível para todos objetos em Eiffel.

seu_carro.copy(meu_carro) --assume que seu_carro foi criado

#pg048#nt050#cm00#

É essencial que o objetoseu_carrojá tenha sido associado à uma região de memória para a rotinacopy trabalhar. Um erro de tempo de execução será criada e um erro será relatado se você invocar a rotinacopysobre um objeto vazio (com o valorVoid).

A semântica da rotinacopyé mostrada na figura 3.4.

Figura 3.4. Semântica da cópia.

3.7 Clonagem

Suponha que você deseja alocar memória paraseu_carroe ao mesmo tempo você pretende copiar os valores dos atributos demeu_carro para seu_carro. Isto pode ser realizado usando a rotinaclone disponível para todos objetos Eiffel. Isto pode ser feito da seguinte maneira:

seu_carro :=clone (meu_carro)

A semântica da rotinacloneestá mostrada na figura 3.5.

#pg049#nt090#cm00#

Semântica da clonagem

3.8 Operadores básicos com exemplos

Operador de igualdade (=): Dois objetos são iguais se eles estão ligados à uma mesma seção de memória. Se alguém quiser testar se os objetosx e y são iguais, uma expressão do tipo x=y poderia ser usada.

Exemplo:

meu_valor,seu_valor : REAL if meu_valor=seu_valor then –- se os valores são os mesmos tome

alguma atitude -- alguma atitude

end

Operador de desigualdade(/=): Para testar se os objetosx e y não são iguais, uma expressão do tipoif x/=y poderia ser usada.

Exemplo:

meu_valor,seu_valor : INTEGER if meu_valor/=seu_valor then –- se os valores não são iguais tome

alguma atitude -- alguma atitude

end

#pg050#ntnnn#cm00#

#pg051#nt090#cm00#

\\ (Operador binário para resto)

Exemplo: a,b,c : INTEGER b :=11 c :=4 a :=b\\c --valor é 3

< (Operador binário para menor que)

Exemplo: b,c : INTEGER b :=10 c :=4 if b<c then --realiza alguma ação apenas se b é menor que c

-- alguma ação end

<= (Operador binário para menor ou igual)

> (Operador binário para maior que)

>= (Operador binário para maior ou igual)

Operadores do tipo REAL:

+ (Operador binário para adição)

- (Operador binário para subtração)

* (Operador binário para multiplicação)

/ (Operador binário para divisão)

^ (Operador binário para exponenciação)

< (Operador binário para menor que)

<= (Operador binário para menor ou igual)

> (Operador binário para maior que)

>= (Operador binário para maior ou igual)

Operadores do tipo BOOLEAN:

not (operador unário para negação lógica)

Exemplo: b,c : INTEGER b:=10 c:=4 if not (b<c) then -- realiza alguma ação apenas se c é

-- menor ou igual a b --alguma ação

end

#pg052#nt065#cm layout errado#

or (operador lógico binário “ou”)

Exemplo:

b,c: INTEGER b:=10 c:=4 if b>0 or c>2 then -- toma a ação abaixo se b é positivo ou c é maior que 2.

-- alguma ação end

and (operador lógico “e”)

Exemplo: b,c: INTEGER b:= 10 c:= 4 if b>0 and c>2 then -- toma a ação abaixo se b é positivo e c é maior que 2.

-- alguma ação end

implies (usada em assertivas)

or else(operador lógico binário para “ou” em “curto-circuito”)

Exemplo: b,c: INTEGER a:=12

b:= 10 c:= 40 if b=0 or else c//b > 2 then -- toma a ação abaixo se b é zero ou c//b é maior que 2 -- avalia a expressão c//b apenas se b não é igual a 0

-- alguma ação end

and then (operador lógico binário para “e” em “curto-circuito”)

Exemplo: b,c: INTEGER a:=12 b:=10 c:=40

#pg053#nt090#cm00# if b>0 and then c//b>2 then --execute a ação apenas se b é positivo e c//b é maior que 2 --calcule a expressão c//b apenas se b é positivo

--alguma ação end

Os últimos dois operadores, “or else” e “and then”, às vezes são chamados operadores de curto circuito. Para o operador "or else", se a primeira expressão é verdade, a segunda expressão nunca é calculada. Para o operador "and then" , se a primeira expressão é falsa, a segunda expressão nunca é calculada.

3.9 Ramificação

O tipo mais simples de ramificação é a cláusulaif. Esta estrutura de controle é usada quando a execução de uma ou mais linhas de um código, um bloco de código, é baseada no resultado de um teste lógico que é executado antes de entrar no bloco de código. O teste lógico requer a avaliação de uma expressão do tipoboolean. Tal expressão pode ser verdadeira (TRUE)ou falsa (FALSE). A forma desta estrutura é:

if uma_expressão_booleana then comando(s)

end

Exemplo:

if velocidade_no_solo > 160 then --o avião decola

end

Outra estrutura simples de controle é a estruturaif-then-else. É usada quando uma escolha deve ser feita entre dois blocos de código. A escolha está baseada na avaliação de uma expressão do tipoboolean. Esta estrutura de controle é construída como segue:

if expressão_booleana then bloco_1

else

bloco_2 end

Aqui, bloco_1 e bloco_2 representam uma ou mais linhas de código.

#pg054#nt040#cm00#

Exemplo:

if velocidade_em_terra > 160 then -- o avião decola

else -- o avião para e a decolagem é interrompida

end

O comandoif-then-else podem ser “aninhado”. Considere o segmento de código seguinte: if expressão1 then

comando1 else

if expressão2 then comando2

else comando3

end end

Se expressão1 for verdadeira, então comando1 será executado. Caso contrário, se expressão2 for verdadeira será executado o comando2; caso contrário será executado o comando3.

Suponha que um entre vários “ramos” devesse ser executado baseado na avaliação de expressões que podem ser falsas ou verdadeiras. Ocomando if-elseif-elsepode ser adequado.

Esta construção é a seguinte: if expressão1 then

comando1 elseif expressão2 then

comando2 elseif expressão3 then

comando3 else

comando4 end

A expressãoelse na construção acima é opcional. Não existe um limite para o número de expressões deelseif.

Exemplo: if velocidade_em_terra > 220 then

-- diminuir a velocidade

#pg055#nt000#cm00#

#pg056#nt050#cm layout errado#

3.10 Iteração (loop)

Iteração ou loop é uma operação lógica fundamental da computação. Um único comando ou, mais tipicamente, um bloco de comandos são executados repetidamente, até que alguma condição de parada seja satisfeita. Se a condição de parada nunca for satisfeita, a execução das declarações dentro do loop continuará indefinidamente e o programa tipicamente parece “travar” (jargão que significa que o programa parece não estar fazendo qualquer coisa de útil uma vez que ele não exibe resultados).

Num loop corretamente construído, a condição de parada é eventualmente encontrada.

A forma geral das construções de iteração é:

From instruções_de_inicialização

Until condições_de_saída_do_loop

loop corpo_do_loop

end

O comando (ou comandos) que compreendem asinstruções_de_inicializaçãosão executados exatamente uma vez. Ascondições_de_saída_do_loopsão testadas antes de cada execução do loop. Se a expressão for avaliada como falsa, o loopé executado; de outra maneira o loop é terminado e o controle é transferido para a linha abaixo da declaração end. Claramente, algumas ações são encontradas no corpo do loop(os comandos entre palavras loop e end) que eventualmente tornarão ascondições_de_saída_do_loop verdadeiras.

Por exemplo, imagine que queremos mostrar todos os inteiros que são potência de 2 até 65536. O segmento do código que realiza isto usando o comando loop é assim construído:

from index:=1 until index=65536 loop

index:=index * 2 io.put_int(index) io.new_line

end

A instrução index:=1 representa asinstruções_de_inicialização. Ela faz com que index assuma o valor inicial de 1. A declaração index=65536 representa as condições_de_saída_do_loope as três linhas do código logo abaixo de loop representam o corpo_do_loop.#pg057#nt090#cm00#O comandoindex := index * 2substitui o valor antigo deindex por um valor duas vezes maior. O comando deve ser lido assim: “index recebe index vezes 2”.

Nós examinaremos outros exemplos para ilustrar o uso doloop.

No próximo exemplo suponha que nós queiramos computar a soma de uma série.

1+2+3+4+5+6+....+1,000,000

Um segmento de código do Eiffel para computar essa soma é dado abaixo. As várias partes da construção doloop são mostradas e comentadas.

indice, soma : INTEGER from

-- comandos de inicialização do loop soma:=0 indice:=0

until indice=1000000 -- condição que encerra o loop loop

-- corpo do loop indice:=indice+1 soma:=soma+indice

end io.put_string(“Soma = “) io.put_int(soma) io.new_line

A instrução indice:=indice+1 é lida como “índice recebe índice mais 1”

As instruções de inicialização,soma:=0 e indice:=0, é correta porém desnecessária. Ambos os objetos assumem o valor 0 em virtude de sua declaração. Incidentalmente, para aqueles que estão interessados, a soma mostrada na tela é 1784293664.

Em uma outra aplicação vamos aproximar a bem conhecida série geométrica: 1 + 1/2 + 1/4 + 1/8 + ... + (1/2)n cujo valor teórico equivale a 2. Nós queremos continuar adicionando números até que o próximo número da série seja equivalente ou menor que 10-9. O segmento de código a seguir usa uma construção deloop para aproximar a soma.

proximo_termo, soma : REAL from

soma:=1.0

#pg058#nt080#cm layout errado# proximo_termo:=0.5

until proximo_termo < 0.000000001 loop

soma:=soma + proximo_termo proximo_termo:=proximo_termo/2.0

end

A parte de inicialização do loop altera o valor de soma para 1.0 eproximo_termo para 0,5. No corpo doloop, somaé aumentada pelo valor corrente deproximo_termo. A seguir, o valor deproximo_termoé alterado para metade de seu valor anterior.

A soma realizada pelo código acima é igual a 2.

Muitos exemplos adicionais de construções comloop aparecerão mais tarde em listagens de programa.

3.11 Rotinas

Rotinas existem em duas formas: comandos e consultas. Rotinas são utilizadas quando um objeto recebe um comando ou consulta. Por exemplo, o comando meu_ponto.alterar_coordenada_x(50)troca o atributox demeu_pontopara um valor igual a 50. A consultameu_ponto.angulocomputa a coordenada polar doangulodemeu_ponto.

Comandos tipicamente mudam o estado interno do objeto que eles estão utilizando. Consultas nunca mudam o estado interno do objeto que eles estão utilizando. Uma consulta corretamente construída retorna informações do objeto, sem modificar seu estado. Embora a linguagem Eiffel permita alguém definir uma rotina que mude o estado interno e também retorne as informações de um objeto, esta prática é totalmente desaconselhável.

Comandos e consultas são especificados em uma seção de características de uma classe (feature). Tanto a informação de interface quanto os detalhes de implementação são dados. O usuário de uma classe (consumidor) precisa acessar somente a parte de interface da rotina. O criador da classe precisa acessar os detalhes de implementação quando realiza manutenção de rotina. (Manutenção é uma atividade que ocorre quando (1) erros são apresentados e corrigidos, (2) melhoramentos em capacidade são desejados, (3) melhorias em eficiência são procuradas).

Nós consideraremos somente a mais simples estrutura para uma rotina neste capítulo. Em capítulos mais avançados outros componentes de uma rotina, comopré e pós- condições, serão discutidos.#pg059#nt075#cm layout errado# A estrutura de sintaxe de uma simples rotina é a seguinte: nome_rotina [(lista_opcional_de_parâmetros)] [:tipo_opcional_de_retorno] is local

declaração_de_objetos do

-- corpo da rotina end –- nome_rotina

O nome da rotina (o mesmonome_rotina) deve ser cuidadosamente escolhido. Ele deve descrever o propósito da rotina. Para uma rotina comando, deve ser usado um verbo. Para uma rotina consulta, deve-se usar um substantivo que descreve aquilo que é retornado. Por exemplo: uma rotina comando para alterar o peso de um carro pode ter o nome mudar_peso. Se outra rotina tem como função calcular o volume de um carro, seu nome pode servolume.

A lista de parâmetros, se presente, contem as informações que deve ser colocadas para usar esta rotina.

O tipo de retorno, se presente, indica o tipo de informação que é computada e retornada para quem chamou a rotina (a rotina que chamou a função).

A declaração de objetos, é uma lista de nomes de objetos seguidos de seus respectivos tipos de classe. Lembre-se que a criação ou inicialização de um objeto não resulta de sua declaração (exceto para seus tipos básicos INTEGER, CHARACTER, REAL e BOOLEAN). Cada objeto assume um “valor” padrão de Void até que o objeto seja criado explicitamente por um programador a não ser que seja de um tipo básico.

As instruções contidas entre os delimitadoresdo e end representam o corpo ou detalhes de implementação da rotina.

Para ilustrar o conceito de comando e consulta, nós construiremos uma classe simplificada IMPOSTO cujos detalhes são mostrados na listagem 3.4.

O atributo renda_dedutivelpode ser consultado mas não modificado. Ele tem semântica “read-only”. Se alguém quiser mudar o valor deste atributo, somente o comando criar pode ser usado para este propósito.

Listagem 3.4 Classe IMPOSTO para ilustrar os comandos e constultas

class IMPOSTO creation criar feature

#pg060#nt080#cm00# -- Atributo de consulta renda_dedutivel ; REAL -- Criação e comando ordinário criar(quantia : REAL) is

do renda_dedutivel := quantia

end -- Função consulta imposto_devido : REAL is -- Computação do imposto baseada no atributo renda_dedutivel

do if renda_dedutivel <6000.0 then

Result:= 0.0 elseif renda_dedutivel <22000.0 then

Result:= 0.15 * renda_dedutivel else

Result:= 3300.0 + 0.28 * (renda_dedutivel -22000.0) end

end end --class IMPOSTO

Na funçãoimposto_devido, o imposto devido é $0 se arenda_dedutivelé menor que $6000, é 15% darenda_dedutivelse o rendimento está entre $6000 e $22000 e é $3300 mais 28% do excesso de 22000 darenda_dedutivel, quando a renda ultrapassa 22000.

O comandocriar pode ser usado com uma rotina de criação ou como um comando ordinário. O valor passado altera o valor corrente do atributorenda_dedutivel.

A listagem 3.5 exibe uma simples aplicação que exercita a classe IMPOSTO.

Programa teste simples para classe IMPOSTO.

class APLICAÇÃO creation comece feature

#pg061#nt080#cm00# comece is

local meu_imposto:IMPOSTO do

-- use o comando criar para criar e inicializar o objeto meu_imposto

!!meu_imposto.criar(40000.0) io.put_string(“Os impostos a pagar por $”) -- use o atributo renda_dedutivel para retornar informação io.put_real(meus_impostos.renda_dedutivel) io.put_string(“ = $”) -- use a rotina imposto_devido para retornar informação io.put_real(meu_imposto.imposto_devido) io.new_line meu_imposto.make(200000.0) io.put_string(“Os impostos a pagar por $”) io.put_real(meu_imposto.renda_dedutivel) io.put_string(“ = $”) io.put_real(meu_imposto.imposto_devido) io.new_line

end end –- classe APLICAÇÃO

As duas classes IMPOSTO eAPLICAÇÃO constituem uma aplicação completa. O objeto meu_imposto é criado e inicializado com o valor 40000 usando o comando de criaçãocriar com parâmetro 40000. A renda dedutível atual é acessada diretamente usando o atributo de consultarenda_dedutivel. Esse valor pode ser lido mas não alterado diretamente. A função de consultaimposto_devidoé usada para acessar o imposto devido para a renda dedutível atual.

O valor da renda dedutível é alterado para 200000 usando o comandocriar com o parâmetro 200000. Então o atributo e a função de consulta são usados para mostrar novos dados sobre o imposto.

3.12 Vetores (Arrays)

Vetores são usados para armazenar uma coleção de elementos “similares”. O significado de “similar” será mostrado brevemente. Cada elemento do vetor tem um endereço único dito ser seu índice, um valor inteiro. Através do índice alguém pode inserir um elemento em um local único ou acessar um elemento de um local único no vetor.

#pg062#nt080#cm00#

Algumas linguagens fornecem o vetor como um tipo básico enquanto outras linguagens, tal como Eiffel, fornecem uma biblioteca externa como suporte para vetores. Os vetores em Eiffel são fornecidos, através de uma classe padrão chamada ARRAY.

A figura 3.6 mostra um vetor de elementos com um índice que varia de 1 a 5.

Um vetor de elementos.

Qual a natureza dos objetos em um vetor como o representado na figura?

No contexto, programação orientada por objeto (nosso contexto) os elementos são objetos. Cada objeto é uma instância de uma classe “base” ou uma de suas classe descendentes. Nesse sentido os objetos são “semelhantes” em relação à seu tipo. Muitas vezes os elementos nos vetores são do mesmo tipo.

Uma típica declaração de um vetor é:

meu_vetor: ARRAY [ALGUM_TIPO]

onde ALGUM_TIPO é o tipo “base” ao qual pertencem todas as instâncias de objetos.

O comandoput da classe ARRAY, para inserir um objeto,meu_objeto, num índice especificadoé:

meu_vetor.put(meu_objeto,índice)

Na expressão acimameu_vetoré o nome do vetor ondemeu_objetoé inserido. Logicamente,índiceé um determinado inteiro.

A figura 3.7 retrata uma introdução domeu_ojetocomo o quarto dos cinco elementos do vetore mostrado na figura.

#pg063#nt080#cm00#

meu_vetor.put(meu_object,4)

O comandoput.

A função de consulta da classe ARRAY,item, que acessa um objeto em uma posição específica é:

meu_vetor.item(indice)

É claro queindicedeve ser um valor inteiro dentro dos limites legais para um dado vetor. O vetor na figura 3.7 tem um limite legal de 1 até 5.

A figura 3.8 mostra o elemento na posição 4 sendo acessado com a consultaitem.

meu_vetor.item(4)

A consultaitem.

A rotina de criação da classe ARRAY,make, para a construção de uma instância da classe ARRAY é:

!!meu_vetor.make (limite_inferior, limite_superior)

Os valores inteiroslimite_inferior e limite_superiorespecificam a variação legal do índice do vetor. Após criar o vetor, meu_vetor, os elementos em cada posição assumem seus valores padrão (provavelmenteVoid).

#pg064#nt090#cm00#

Nós ilustraremos todas as idéias anteriores construindo um vetor de veículos. Haverá três tipos de veículos no vetor: CARRO, AVIÃO, e BARCO. Nenhum dos detalhes das três classes será mostrado com exceção de que todos as três são subclasses da classe VEÍCULO.

class VEÍCULO --Classe básica. Nenhum detalhe mostrado. end -- classe VEÍCULO

class CARRO inherit

VEÍCULO -- Nenhum detalhe mostrado. end -- classe CARRO

class AVIÃO inherit

VEÍCULO -- Nenhum detalhe mostrado. end -- classe AVIÃO

class BARCO inherit

VEÍCULO -- Nenhum detalhe mostrado. end –- classe BARCO

class APLICAÇÃO

creation inicio

feature

inicio is local meu_vetor: ARRAY [VEÍCULO] -- Tipo básico é VEÍCULO meu_carro: CARRO meu_barco: BARCO meu_avião: AVIÃO do

!!meu_vetor.make (1,3) !!meu_carro

#pg065#nt090#cm00# !!meu_barco

!!meu_avião meu_vetor.put (meu_carro, 1) meu_vetor.put (meu_barco, 2) meu_vetor.put (meu_avião, 3)

end end --classe Aplicação

A figura 3.9 descreve a construção demeu_vetorcontendo três veículos.

Depois de: !!meu_vetor.make (1,3)

Depois de: !!meu_vetor.put(meu_avião, 3)

Vetor de três veículos

#pg066#nt095#cm00#

Nós depois consideraremos o problema da ordenação de um vetor de números inteiros de tamanho 3. Nós retornaremos o assunto da ordenação no Capítulo 4 quando nós o apresentaremos de uma maneira mais séria e discutiremos diversos métodos importantes de ordenação.

Esta simples aplicação nos permitirá rever o assunto das rotinas de ramificação e seus parâmetros assim como vetores.

Suponha que nós declaremos uma vetor como a seguir.

local dados : array[INTEGER]

do !!dados.make(1,3)

Agora nós queremos inserir valores inteiros nas posições 1, 2 e 3. Finalmente nós queremos reordenar os números no vetor colocando o menor na posição 1, o segundo menor na posição 2 e o maior na posição 3. Este processo é chamado ordenação.

A listagem 3.6 nos apresenta uma rotina de ordenação que executa esta missão.

Ordenação uma vetor de 3 números inteiros. class APLICAÇÃO_ORDENACAO

creation comece

feature

comece is local

dados : array[INTEGER] do

!!dados.make(1,3) dados.put(30,1) dados.put(5,2)

dados.put(25,3) ordene_3(dados) mostre(dados)

end

ordene_3(dados : array[INTEGER]) is require

vetor_de_tamanho_certo : dados.count=3

#pg067#nt090#cm layout errado# local temporário: INTEGER do

if dados.item(1)>dados.item(2) and dados.item(1) > dados.item(3) then

temporário:= dados.item (3) dados.put (dados.item (1),3) dados.put (temp,1)

elseif dados.item(2)>dados.item(1) and dados.item(2)>dados.item(3) then

temporário:= dados.item (3) dados.put (dados.item (2),3) dados.put (temp,2)

end if dados.item(1) > dados.item(2) then

temporário:= dados.item (2) dados.put (data.item (1),2) dados.put (temp,1)

end end

imprimir (os_dados:ARRAY [INTEGER]) is local

índice: INTEGER do

from índice := 0

until índice = os_dados.count

loop índice := índice + 1 io.put_int (os_dados.item (índice)) io.put_string (“ ”)

end io.new_line end

end -- classe APLICACAO_ORDENACAO

A primeira ordem de execução da rotinacomeceé a criação do vetordadoscom índice inferior igual a 1 e superior igual a 3 (índice entre 1 e 3). A seguir, os valores 30, 5, e 25 são inseridos no vetor. A figura 3.10 descreve o vetordadosdepois desse passo.

#pg068#nt095#cm00#

Vetor inicial de três inteiros que serão ordenados.

A rotina ordene_3é a próxima a ser solicitada comdadosenviado como parâmetro. A cláusularequirerepresenta uma pré-condição que deve ser satisfeita no momento em que a rotina for solicitada. Pré condições serão discutidas com mais detalhes no capítulo 6.

O primeiro teste que é realizado determina se, o inteiro do índice 1 é maior do que o inteiro do índice 2 e do índice 3 (em outras palavras, o inteiro do índice 1 é o maior entre os três inteiros). Se isso ocorrer, como ocorre neste caso, o inteiro do índice 1 e o do índice 3 são trocados, colocando então o maior dos três inteiros no índice 3. A figura 3.11 mostra como ficou o vetor depois dessa operação de troca.

Vetor de três inteiros depois da primeira troca.

Finalmente os inteiros do índice 1 e do índice 2 são comparados. Se o inteiro do índice 1 for maior que o inteiro do índice 2 eles serão trocados. É o que ocorre neste caso. A figura 3.12 mostra como ficou o vetor depois dessa última operação de troca.

Vetor de três inteiros depois da última operação de troca.

#pg069#nt085#cm layout errado#

Agora os números estão sortidos. Você pode provar que maneira deste “algoritmo”(uma série de operações que realizam uma série de serviços) sempre armazenarão os três números conforme as condições?

A rotina displaymostra os valores dos números crescentes nas posições 1, 2 e 3. A consultacounté usada para adquirir o maior número do array os_dados.

3.13 Cadeias de caracteres (Strings)

Em programação, umastring é um vetor de caracteres, não é algo com que você amarra seus sapatos. Estes caracteres podem ser letras maiúsculas ou minúsculas, números ou símbolos do teclado como ‘$’, ‘%’ ou ‘&’. Até um espaço em branco é um caracter.

Por causa dos vetores baseados em caracter, asstrings, serem tão importante em programação, nós os estudamos como um tipo especial de vetor. Em Eiffel a classe STRING armazena as propriedades deste importante tipo de dados.

Em programas nós usamosstrings para nomes de pessoas ou coisas. Nós, tipicamente, tratamos umastring como uma simples entidade única apesar dela ser constituída de vários caracteres. Então, astring com a sequência de caracteres ‘M’, ‘a’, ‘r’, ‘i’ e ‘a’ geralmente será vista como uma única entidade “Maria” mais propriamente do que os caracteres individuais. É claro que os caracteres individuais de umastring podem ser acessados usando a consultaitemdearray discutido na sessão anterior.

Umastring é uma seqüência de caracteres delimitados por um par de aspas. Alguns exemplos destringssão fornecidos abaixo.

Exemplos deStrings

“Meu nome é Richard Wiener.” “Testando, testando, 1, 2, 3” “!@#$%^&*()-+” “ ”

O leitor pode desejar parar e considerar as operações que poderiam ser desejáveis em umastring. Certamente as operações mais básicas poderiam incluir (1) criação de uma string de um determinado tamanho – um vetor de caracteres que pode suportar um número pré-determinado de caracteres, (2) inserir caracteres nastring em diferentes locais, (3) preencher toda astring usando uma atribuição de outrastring (uma seqüência de caracteres limitada por aspas, como “oi” ou “tchau”), (4) acessar caracteres de uma posição específica, (5) copiar umastring para outra (a que vai ser copiada já deve ter sido iniciada) e (6) retornar o tamanho de umastring – o número de caracteres atuais dastring, não o seu total.

#pg070#nt095#cm00#

Existem operações adicionais que você pode desejar acrescentar a essa lista relativamente pequena? Essa é a questão que o desenvolvedor da classe STRING deve se perguntar quando está construindo esse componente de software reutilizável.

Surpreender-te-ia saber que a classe STRING contida na biblioteca do Eiffel contém aproximadamente 60 rotinas que definem o comportamento (comandos e consultas) de um objeto STRING? A fim de apreciar o trabalho realizado no desenvolvimento de um importante componente de software reutilizável como esse, vamos examinar a funcionalidade da classe STRING um pouco antes de olhar a sua interface formal e demonstrar seu uso em uma aplicação.

A classe STRING é dividida em várias seçõesfeature, cada uma contendo um conjunto logicamente relacionado de operações. Na tabela 3.1, as várias seçõesfeaturesão mostradas com seus propósitos e uma lista de algumas das rotinas nas seçõesfeaturesão listadas com uma breve descrição de seus propósitos.

Tabela 3.1 Análise da classe STRING

(1) Acesso– Usado para obter várias partes do objeto STRING has– astring inclui um caracter em particular? index_of – posição da primeira ocorrência de um caracter item – caracter em índice específico item_code– código numérico de caracter em índice específico substring_index– posição de ocorrência de outrastring contida nastring dada. operador “@” – caracter em índice específico (alternativo à item)

(2) Comparação – Usado para comparar duasstrings is_equal– as duasstringscontém a mesma seqüência de caracteres? operador “<” – umastring é lexicograficamente menor que outra?

(3) Conversão – Usado para converterstring de uma forma para outra mirror – inverte a ordem dos caracteres nastring mirrored – teste para ver se outrastring é espelho da primeira to_double– converte para o tipo DOUBLE, se possível to_integer – converte para o tipo INTEGER, se possível to_lower - converte todos os caracteres maiúsculos em minúsculos

to_real – converte para o tipo REAL, se possível to_upper – converte todos os caracteres minúsculos em maiúsculos

#pg071#nt095#cm00#

(4) Duplicação– usada para copiar partes de umastring para outra substring – cópia de umasubstring(string contida em uma outrastring) contendo caracteres entre um índice e outro

(5) Mudança de elementos– usada para modificar partes de umastring append –adiciona uma cópia de umastring para o final de outra copy –transfere caracteres dastring fonte para astring destino extend –adiciona um caracter no fim de uma determinadastring fill_blank – preenche umastring com caracteres em branco head –remove todos, menos osn primeiros caracteres insert – adiciona umastring à esquerda do índice especificado em uma determinadastring left_adjust – remove todos os espaços iniciais em umastring precede –adiciona um caracter na frente de uma determinadastring prepend –adiciona umastring na frente de uma determinadastring put – substitui um caracter em um índice especificado por um determinado caracter replace_substring –copia caracteres de uma outrastring para posições específicas dastring dada replace_substring_all –substitui todas as ocorrências de certastring por novas right_adjust – remove todos os espaços finais de uma determinadastring set –impróprio para discutir aqui share –faz com que astring atual compartilhe o texto de outrastring; qualquer mudança no texto da outrastring afetará o original tail – remove todos os caracteres, exceto osn últimos de uma determinadastring

(6) Inicialização– usada para criar um objeto da classe STRING make –aloca espaço para no mínimon caracteres

(7) Medição –usada para obter aspectos numéricos de umastring capacity –espaço alocado count – número atual de caracteres em umastring occurrences –número de vezes que um caracter específico aparece em umastring

(8) Saída de dados– usada para escrever umastring out – cria uma representação que pode ser impressa

(9) Remoção– usada para remover partes de umastring prune – remove a primeira ocorrência de um caracter específico prune_all – remove todas as ocorrências de um caracter específico remove –remove oi-ésimo caracter wipe_out –remove todos os caracteres

(10) Redimensionamento– usada para mudar dinamicamente o tamanho de umastring adapt_size –muda o tamanho para acomodar o número atual de caracteres

grow – garante que a capacidade é pelo menos o número especificado resize –realoca espaço para acomodar um número específico de caracteres

(11) Relato de Status– usada para obter algumas características importantes de uma string consistent –a string dada pode ser o “destino” de uma operação de cópia?

#pg072#nt000#cm00#

#pg073#nt070#cm00# to_real: REAL

--valor real; --por exemplo, quando aplicado à “123.0”, produzirá 123.0

to_upper --converte para letras maiúsculas

substring (n1, n2: INTEGER): like Current --copia uma substring contento todos os caracteres do índice n1

ao n2 append(s:STRING)

--junta uma cópia de ‘s’ no fim. copy (outro: like Current)

--reinicializa copiando os caracteres de outro --(isto é usado também pelo ‘clone’)

fill_blank --preenche com espaços

insert(s: like Current; i:INTEGER) --adiciona ‘s’ à esquerda da posição ‘i’ na string atual

put(c: CHARACTER; i: INTEGER) --Substitui um caractere da posição ‘i’ por ‘c’

capacity: INTEGER --quantidade de memória alocada

count :INTEGER -- número de caracteres de uma string

occurences (c: CHARACTER):INTEGER --numera quantas vezes que ‘c’ aparece na string

wipe_out --remove todos caracteres

end --classe STRING

O apêndice 1 fornece todas as informações que são requeridas para o uso da classe STRING numa dada aplicação. Como parte do processo de aprendizagem para se tornar um consumidor competente, e o leitor deve estudar cuidadosamente as informações da interface deste apêndice.

Uma estratégia altamente recomendável para se tornar familiar e confortável com o uso de uma classe tal como STRING é criar um programa teste que exercite algumas destas funções. Apesar disto poder tomar algum tempo e mesmo parecer tedioso, a recompensa será grande.#pg074#nt000#cm00#

#pg075#nt080#cm00# else

io.put_string (“str1/=mensagem”) end

io.new_line

--Muda o primeiro caracter da string str1 e então compara -- str1 e mensagem novamente str1.mirror io.put_string (“str1= “) io.put_string (str1) io.new_line

--Inverte a seqüência de caracteres na string str1 str1.mirror str1.to_upper io.put_string (“str1= “) io.put_string (str1) io.new_line

--Obtém a primeira ocorrência da letra ‘G’ io.put_string (“Primeira ocorência de ‘G%’=”) io.put_int (str1.index_of (‘G’,1)) io.new_line

--Obtém a primeira ocorrência da substring “ING” io.put_string (“Primeira ocorência de ‘ING%’=”) io.put_int (str1.substring_index of (‘ING’,1)) io.new_line

--Escreve o valor da string true_constant io.put_string (str1.true_constant) io.new_line

--Atribui a substring de str1 entre os índices --24 até 27 para a string str2 str2:= str1.substring (24,27) io.put_string (“str2= ” ) io.put_string (str2) io.new_line

--Atribui str2 ao valor real r depois de converter a string para real

r:= str2.to_real io.put_string (“r= ”)

#pg076#nt000#cm00#

#pg077#nt000#cm00#

#pg078#nt065#cm00#

Como a entrada de dados é obtida no programa?

A dispositivo de entrada padrão é o teclado. O segmento seguinte de código ilustra como se poderia entrar com um valor real, um valor inteiro, e um valor de caracter.

meu_inteiro: INTEGER meu_caracter: CHARACTER meu_real: REAL io.readint -- comando de leitura io.readchar -- comando de leitura io.readreal -- comando de leitura

meu_inteiro:=io.lastint -- consulta meu_caracter:=io.lastchar -- consulta meu_real :=io.lastreal –- consulta

Os comandos de entrada usados sãoreadint, readchar, e readreal. Cada um é transmitido através do objeto padrão de entrada e saída (io). Os valores que de entrada (informação datilografada no teclado) são obtidos pelas consultaslastint, lastchar e lastreal, novamente, transmitidos pelo objeto padrão de entrada e saída (io). O protocolo rigoroso de separação entre comados e consultas é observado aqui. Embora possa ser tentador fazerreadint retornar um inteiro, o ponto de vista examinado aqui é que o comandoreadintmuda o estado da situação interna do objetoio e a consultalastint, retorna parte de seu estado interno.

Existem muitos comandos de entrada e saída de comandos além de consultas definidas na classe STD_FILES de Eiffel que padronizam as entradas e saídas. Uma porção da interface desta classe é dada na listagem 3.9.

Porção da interfase para classe STD_FILES

class interface STD_FILES feature -- muda elemento

new_line -- Escreve uma mudança de linha na saída padrão

put_char(c: CHARACTER) -- Escreve ´c´ no final da saída padrão.

#pg079#nt095#cm00# put_double (d: DOUBLE) --escreve ‘d’ no final da saída default

put_int (i: INTEGER) -- escreve ‘i’ no final de saída default

put_real (r:REAL) --escreve ‘r’ no final de saída default

put_string (s:STRING) --escreve ‘s’ no final de saída default

feature -- entrada de dados

next_line --move para a próxima linha na entrada padrão

readchar --lê um novo caracter da entrada padrão --Disponibiliza o resultado em ‘ lastchar’

readdouble --lê um novo double da entrada padrão --Disponibiliza o resultado em ‘lastdouble’

readint --lê um novo inteiro da entrada padrão --disponibiliza o resultado em ‘lastint’

readline --lê uma linha da entrada padrão --disponibiliza o resultado em ‘laststring’

readreal --lê um novo real da entrada padrão --disponibiliza o resultado em ‘lastreal’

readstream (nb_char: INTEGER) --lê uma string de no máximo ‘nb_char’ caracteres da entrada

padrão --disponibiliza o resultado em ‘laststring’

readword --lê uma nova palavra da entrada padrão --disponibiliza o resultado em ‘laststring’

feature – relatório de status
https://outline.com/YnEMGA

#
### INTRODUÇÃO
O objetivo desse trabalho é tratar de uma iniciativa de inclusão social envolvendo as Tecnologias da Informação e Comunicação (TICs) e a Economia Solidária,por meio da análise da experiência de um grupo de desenvolvimento de softwareno Vale do Jequitinhonha/MG.

Esse grupo, chamado Fabriqueta de Software, é um projeto voltado para o desenvolvimento de atividades de profissionalização de jovens entre 16 e 21 anos por meio do ensino de informática e computação e comercialização de software.

O objetivo da Fabriqueta de Software é criar oportunidade de inclusão social para os jovens da região, servindo como um espaço de formação técnica e, ao mesmo tempo, alternativa de trabalho e renda.A relação entre as TICs e a inclusão social énormalmente abordada pela perspectiva daassimetria de acesso a dispositivos e equipamentos digitaispor diferentes grupos sociais, principalmente a dificuldade de acesso à Internet.

Essa problemática é chamada de exclusão digital e é entendida como os diversos processos de impedimentos que afetam a relação entre os segmentos sociais menos favorecidos e o acesso às tecnologias digitais.Como observa Silveira (2008):Anegação do acesso é o núcleo da maior exclusão, aquela que impede que o cidadão chegue até um computador conectado para se comunicar, do modo que quiser.

Por não se tratar de um processo natural, por não representar as opções individuais, o termo exclusãodigital tem ainda, e infelizmente por um tempo longo, um enorme valor de uso.

Ele identifica o fenômeno do bloqueio econômico e infraestrutural que impede os segmentos mais pauperizados de acessarem as redes informacionais.

Ele define um processo excludente que não permite que cidadãos tenham o mais elementar e básico contato com as redes digitais.

(SILVEIRA, 2008: 55)As iniciativas para superar essas barreiras são tipicamente chamadas de inclusão digital,são iniciativasquetêm como objetivocompreender e produzir formas de difundiro acesso às tecnologias digitais e assim democratizar o acesso à informação.

De forma geral, compreende-se que a inclusão digital é um problema de duplo caráter: primeiro de acesso à infraestrutura tecnológica, principalmente o acesso à conexão de internet banda larga; e segundo, um problema de educação, da falta de domínio das habilidades técnicas necessárias para operar essas tecnologias(SILVEIRA, 2008).O problema de acesso à infraestrutura é abordado pela multiplicação da malha informacional no Brasil, e é abordada por programas como o Programa Nacional de Banda

Larga (PNBL) criado em 2010, que tinha como meta alcançar 35 milhões de domicílios com internet banda larga fixa até 2014 e foi renovado em 20161.

O PNBL envolve principalmente medidas de política industrial, de desoneração fiscal, de financiamento e desenvolvimento de serviços do governo, como o pacote popular de acesso à internet que é oferecido pelas operadoras, que oferece conexão de 1Mbps por 35 reais mensais (BRASIL, [2010]).A segunda dimensão do problema, de caráter educacional é tratada principalmente com a implantaçãode laboratórios de informáticanas escolas, para o desenvolvimento de habilidades técnicas das crianças e jovens, e a implantaçãode centros públicos de acesso àinternet, como os telecentros, que contam com profissionais especializados para dar apoio aos usuários do espaço.Como crítica à visão de que a inclusão digital se limita nauniversalização do acesso às redes digitais, Schwartz (2010) propõe que uma ação efetiva deve ter como foco a emancipação digital e não apenas na inclusão.

O autor, compreende que é preciso ir além do uso passivo das tecnologias digitais, que o foco deve ser na transformação dos consumidores de conteúdo em autores de conteúdo.

Para o autor, as iniciativas de inclusão digital devem criar condições para o desenvolvimento decapacidadesativas para essesnovos usuários, como o compartilhamento de informações e a construção colaborativa de conhecimento.A visão convencional sobre a relação entre TICs e inclusão social varia em torno da questão do acesso à infraestrutura e mesmo com a proposta de “emancipação digital” em Schwartz (2010) são poucasas perspectivas que pensam na dimensão produtiva mais básica dasTICs, o desenvolvimento de software,e suas possibilidades de produzir dinâmicas de inclusão social.

Mesmo na perspectivade inclusão socialda Economia Solidária, que tem como base de seu projeto político a construção de um outro tipo de relação de produção, as aproximações com o desenvolvimento de software são poucas.Sobre a Economia Solidária,Singer (2002)nos lembra que elasurgiu como uma resposta àascensão do capitalismo industriale sua estruturação é fortemente marcada pela crise do modelo de regulação fordista e pelo subsequente avançodo paradigma da “acumulação flexível”.

Como resposta às profundas mudanças econômicas e políticas que essa transição ocasionou no Brasil no final da década de 80 e 90, e que refletiram na 1Sobre a renovação do PNBL ver: http://www.brasil.gov.br/infraestrutura/2016/03/governo-prepara-atualizacao-do-programa-nacional-de-banda-larga

organização do trabalho, começaram a reaparecer iniciativas associativas de trabalhoea discussões sobre outros modelos possíveis.

Essa mobilização em torno do apoio à formação de grupos produtivos em formatos de associações e cooperativasnão é nova, data do século XIX, mas no Brasilela ficou conhecida como “Economia Solidária” (ES).

O conceito funciona como um centro de gravidade que aproxima múltiplas experiências de diversos formatos organizacionais que buscam a democratização econômica e tem na inclusãosocial e na reprodução da vida -e nãona reproduçãodo capital -seuobjeto de engajamento político (SINGER, 2002).Apesar da multiplicidade das formas de organização e dos objetivos específicos dos Empreendimentos da Economia Solidária (EESs), que são a unidade básica da ES, as características básicas que as distingue das empresas convencionais capitalistas são: a posse dos meios de produção pelas próprias pessoas que as utilizam para produzir; a gestão coletiva e democrática do empreendimento, seja por participação direta ou por representação; e a decisão democrática sobre a destinação do excedente econômico gerado pelo empreendimento; (SINGER, 2000;2002).

Os exemplos clássicos dos setores onde a atuação da ES é mais significativa são:a agricultura familiar, as associações e cooperativas de produção, as fábricas recuperadas, as associações e cooperativas de catadores de material reciclado, os fundos de crédito solidários e as associações de consumidores, sendo bastante incomuns empreendimentos que têm o desenvolvimento de softwarecomo centro de suas atividades produtivas.Sobre o desenvolvimento de software, ele –o software -pode ser dividido em três tipos diferentes, baseados no formato de suapropriedade intelectual:o software proprietário, o softwarelivre e o open source.

O softwareproprietário é aquele em que o desenvolvedor, seja uma empresa ou indivíduo, possui a exclusividade sobre os direitos de uso, distribuição e modificação.

É o detentor desses direitos quedetermina a forma como os usuáriosospodem interagir com o código fontee normalmente ele não é acessível.

O software Livre é o software distribuído sob termos que permitem aosusuários as liberdadesde executar, modificar e distribuir o softwareda forma que bem entenderem, ao mesmo tempo quegarante que qualquer distribuição subsequente do software continuará a ser livre.

O open source, assim como o Software Livre, torna disponível ocódigo fontedo softwaree permite a qualquer usuário o modificar e distribuí-lo.

Porém, diferentemente do Software Livre, não existe a necessidade de manter a licença livre apósa modificação em seu código fonte, uma empresa

pode usar softwaresopen sourcepara criar softwaresproprietários por exemplo.O interesse do open sourceé muito mais na disponibilidade do código fonte e um direito àdistribuição do que da reprodução de uma lógica de conhecimento livre, como é o caso do Software Livre(STALLMAN, 2002).De forma geral, as aproximações entre a Economia Solidária e as TICs sedão especialmente pelo cominhodo Software Livre, como em Mance (1999) e Aguiar (2007).

Pois a confluênciade valoresentre o SoftwareLivre e a ES, ocorre deforma quase natural, como observa Singer e Aguiar (2008) em entrevista, “o movimento do SoftwareLivre é uma lógica contra omercado, uma revolução jurídica que reverte a lógica excludente, assim como a Economia Solidária”.Apesar dessa aparente sinergia entre os dois movimentos, são poucos os trabalhos que têm como objetivo o estudo empírico dessa relação, como em Faria (2010), que trata de três casos brasileiros, o Portal Comunitário Cidade de Deus, o Cirandas, queoferece um espaço na internet para EESs e o T@I.Com, que provê acesso à Internet sem fio no Morro dos Macacos no Rio de Janeiro.Ciente dessa falta, a Fabriqueta de Software-objeto de estudo deste trabalho -se apresenta como um lugar privilegiado para compreender as possibilidades de relações que podem ser estabelecidas entre softwaree inclusão social.

Pois a Fabriqueta de Softwareé expressão da multiplicidade de forma que a Economia Solidária se manifesta no Brasil e não apenas ela “usa” TICs em seu cotidiano, como apropriou-se delas no sentido de as ter como centro de sua atividade produtiva.A experiência a ser analisada é umsoftwaredesenvolvido pela Fabriqueta de Software, para o georreferenciamento de recursos hídricos no município de Araçuaí/MG, cidade cede do grupo.

O Sistema de Georreferenciamento e Monitoramento de Nascentes (SGMN), é utilizado em um projeto que tem como objetivo garantir o acesso à água aos pequenos agricultores do município, por meio de atividades de recuperação e conservação das nascentes da bacia hidrográficado município.

Nesse sentido, a experiência da Fabriqueta no desenvolvimento do SGMN, opera aquestão da inclusão social nos dois sentidos: 1) a organização funciona como alternativa de trabalho e renda para seus membros; 2) o produto, o software, é componente de uma iniciativa que busca a inclusão social das comunidades rurais do município,por meio da garantia de acesso à água, elemento essencial para a atividades produtivas dos pequenos agricultores do município.



A Fabriqueta de Software(FS) é um projeto que faz parte da Cooperativa Dedo de Gente, uma cooperativa criada em 1996, composta de diversas“unidadesprodutivas solidárias” chamadas fabriquetas.

Essas unidades têm como objetivo,criar oportunidade de formação, trabalho e renda para jovens, por meio do resgate dos saberes e fazeres populares, estimulando a valorização sociocultural local, a prática de trabalho comunitário e a coletivização dos processos de produção.

A Dedo de Gente conta com diversas fabriquetas que atuam em diferentes em diferentes setores, como:serralheria, marcenaria, cartonagem, doces e licores, tinta de terra, produção audiovisual e software.

Atualmente a cooperativa atua em três cidades do estado de Minas Gerais, Araçuaí, Raposos e Curvelo e concentra aproximadamente 100 (cem) jovens que trabalham ativamente nas fabriquetas.Tanto a Fabriqueta de Software quanto a Cooperativa Dedo de Gente são resultados de iniciativas da Organização Não Governamental (ONG) Centro Popular de Cultura e Desenvolvimento (CPCD).

Uma organização criada em 1984 em Belo Horizonte/MG que tem como objetivopromover o desenvolvimento comunitário sustentável, por meio da educação popular.

Para tal a ONG tem como proposta o desenvolvimento de habilidades para o mundo do trabalho, tendo a cultura local como matéria prima institucional e pedagógica e promovendo o resgate da autoestima e o incentivo a criatividade dos sujeitos.

A ONG destina suas atividades acomunidades e municípios com até 50 mil habitantes e atualmente está presente mais de dez cidades nos estados do Maranhão, Minas Gerais, São Paulo, Rio de Janeiro e um projeto em Iquito (Peru).O CPCD desenvolve uma diversidade de atividades e projetos nas cidades onde atua, principalmente relacionados à educação infantil e educação ambiental.

Esses diversos projetos demandam uma série de recursos materiais, desde mudas de plantas nativase móveis, como cadeiras e mesas,até sistemas de software, como web sitese lojas virtuais.

Uma prática comum da ONG, é comprar esses produtos e serviços da Cooperativa Dedo de Gente, criando uma cadeia onde os recursos captados pelo CPCD,para desenvolver projetos sociais,circulam por outros projetos e empreendimentos que também têm como objetivo produzir dinâmicas de inclusão e não simplesmente vender produtos e obter lucro.

A Fabriqueta de Software é uma grande beneficiária dessa lógica e tem no CPCD seu maior cliente, de forma que seus projetos e sistemas são quase sempre desenvolvidos por encomenda da própria ONG, criando uma cadeia onde o desenvolvimento de software éorientado à projetos que visam a inclusão social.



Objetivo e Referencial TeóricoOobjetivo da pesquisa é analisar como a Fabriqueta de Software (FS) conjuga desenvolvimento de softwaree inclusão social nas atividades e projetos que ela executa e participa.

Em especial, como a experiência da FS no desenvolvimento do Sistema de Georreferenciamento e Monitoramento de Nascentes (SGMN), contribui para pensar o papel do softwareem iniciativas que visam a inclusão social, como a ES.O caráter localizado da experiência da FS colocaalgumas questõesfundamentais sobre as possibilidadesdas TICsna ES, como: Épossível produzir softwarelocalmente? Que tenha em vista os problemas locais e que se insira como elemento produtor dedinâmicas locais de inclusão social? Que seja desenvolvido de forma autônoma pelos próprios atores que enunciamo problema? Pensar esses processosnão parece uma atividade absurda, uma vez que experiências parecidas são encontradas para diversos outros tipos de tecnologias,que não as TICs.Este trabalho se compreende no campo dos Estudos em Ciência, Tecnologia e Sociedade (Estudos CTS), e como tal, trata o problema por meiode uma abordagem sociotécnica, que envolvea compreensão de que a ciência e a tecnologia são constituídaspor meio de processos que imbricam, inseparavelmente, o “social” e o “técnico”na conformação do “tecido-sem-costuras”que é a realidade.Como referencial teórico, me apoio principalmente nos trabalhos sobre Tecnologia Social (TS) e Adequação Sociotécnica (AST) em Dagnino (2014).

A abordagem da TS é interessante, pois ela reconhece a dimensãopolítica e normativa das construções técnicas, desmistificandoo discurso de neutralidade da tecnociência.

A abordagem da TS mostra que os artefatos técnicos não estão imunes ao poder dos discursos e práticas dominantes e carregam consigo, os valores do mundo onde foram produzidos.Essa compreensão, de que os artefatos técnicos também são formas de ordenar o mundo social, reenquadra a questão da desigualdade e da inclusão social como uma questão também tecnológica.

Uma perspectiva também compartilhada pelaprática da FS quando utiliza do desenvolvimento de softwarepara promover inclusão social.A perspectiva da TS também compreende que a construção de artefatos técnicos é um processo de construção social.

Que aconfiguraçãofinal de um artefato não é definido apenas pelas suas qualidades técnicas, mas também pela pressão exercida pelos diferentes

grupos sociais interessados no artefato.

Na concepção da TS, esse processo de construção social também contamina o artefato com valores capitalistas, pois existe uma assimetria de poder entre esses diferentes grupos, e são os grupos dominantes que conseguem exercer mais pressão nesse processo.



A proposta da TS é de que é possível construir outro tipo de tecnologia, diferente da Tecnologia Convencional Capitalista(TC),que tem a reprodução do capital como objetivo e motivação, e nesse processo,é causadora de exclusão social e desigualdade.

A TS é essa outra tecnologia, e pode ser definida, de forma geral, como “a tecnologia que visa a inclusão social” (Dagnino, 2014).

Como a TS compreende a tecnologia como um resultado de um processo de construção social, ela assume a possibilidade de recondicionar a TC, para que ela cumpra comoutros propósitos.

Esse processo envolve tanto a modificação técnica do artefato, recondicionando seus circuitoscontra a obsolescência programadaou ajustando sua velocidade de funcionamento, quanto a descontaminação dos valores capitalistase a subsequente contaminação com valores da ES.

Esse processo de desconstrução e adequação é chamado de Adequação Sociotécnica (AST).A TS assume o projeto político de se constituir enquanto a base de lançamento da ES (DAGNINO, 2014: 240), pois ela compreende que a TC não é adequadaaos problemas dos EESs e nem compartilham dos mesmos valores da ES.

Pois, os problemas que são importantes para a ES como a sustentabilidade ambiental dos processos produtivos, a valorização do trabalho e não do capital, a ordem democrática da gestão, a não subordinação do trabalho ao capital etc, não são compreendidos como problemas pela TC, que está interessada apenas em produtividade e aumento do lucro.

A TS seria a plataforma cognitiva de ondeseriam desenvolvidos os artefatos e processos necessários à ES para que ela possa avançar.Em complemento à abordagem da TS, utilizoaabordagem de “sistemas tecnológicos”Hughes (1983;2013), para analisar de forma mais ampla a experiência do desenvolvimento do SGMN.

O autor propõeque os artefatos não devem ser pensados em separado das relações que estabelecem, masque devem ser pensados como sistemas, como arranjos de componentes de tipos diferentesque devem operar em sintoniapara o correto funcionamento do conjunto.

Essa abordagem auxilia em compreender como o softwarese encaixa na complexidade das relações organizacionais entre o CPCD, a FS, suas instituições parceiras e a região onde o grupo atua.Compreender o SGMN como um arranjo de

componentes,permite compreender como uma açãopontual propaga pelo resto do sistema e como cada componente atua para manter a estabilidade da estrutura.Metodologicamente, a pesquisa teve início com a leitura de artigos, matérias jornalísticas e conteúdo institucional sobre o CPCD e sobre a Fabriqueta de Software.

O primeiro contato foi realizado emsetembro de2015 onde tive a oportunidade de conversar com o idealizadore atualcoordenador geral do CPCD, Tião Rocha, em um evento da Prefeitura Municipal de Campinas.

Na ocasião pude tomar conhecimento sobre detalhes do funcionamento da ONG, da história da FS e sua trajetória.

A partir desse momento entrei em contato formalmente com a ONG para desenvolver a presente pesquisa.Otrabalho empírico foi realizado por meio de entrevistassemiestruturadas presenciais e virtuaiscom membros do corpo administrativo do CPCDe da Cooperativa Dedo de Gentee duas visitas de campoque totalizaramdez dias, umavisitana cidade de Curvelo/MGe uma em Araçuaí/MG.

Na visita de campo fui recebido pelo coordenador da Fabriqueta de Software, que me acompanhou durante todo o períodoe me guiava pelas atividades da ONG.Ao longo dos diasparticipeibrevemente de todos os projetos que a ONG realiza nas cidades de Curvelo e Araçuaí, desenvolvendo atividades junto doseducadores infantis, produzindo mudas de plantas nativas, participando de reuniões, visitando comunidades rurais e auxiliando os membros da Fabriqueta de Softwareem problemas técnicos.Ao longo do texto me refiro aos entrevistados sempre pela posição queocupam na organização de que fazem parte e pela inicial abreviada do primeiro nome, de modo a não expor, desnecessariamente, os entrevistados.

Vale ressaltar que muitas das informações presentes no texto não foram obtidas nas entrevistas, mas sim ao longodos diversos diálogos que tive com membros tanto do CPCD quanto da FS durante os dias da visita.A motivação para trabalhar com a questão do desenvolvimento de softwaree inclusão social a partirda perspectiva da ES e da TS, vem de uma experiênciapessoalenquanto cursava minha graduação em Ciência da Computaçãona Universidade Federal de Itajubá -UNIFEI.

Na ocasião, participava de um projetoda Incubadora Tecnológica de Cooperativas Populares2que prestava assistência técnica a uma associação de produtores rurais.

Meu papel era auxiliá-los na produção dos documentos necessários para participar deeditais de compras públicas doProgramaNacional de Alimentação Escolar (PNAE)3.2Sobre as Incubadoras Tecnológicas de Cooperativas Populares ver: Fraga (2012) e Dagnino (2014e)3Sobre o PNAE, ver: Belik e Chaim (2009) e Brasil (2014)

Para sanar a dificuldade na produção dosdocumentosnecessários para a participação da associação nos editais, desenvolvium softwareque facilitava a criação dos projetos de compra e torna mais acessível o processo de participação para os membros do grupo.

Porém, por mais que o softwaretenha sido desenvolvido com diversas consultase reuniões com os membros da associação, a adesão foi muito baixa.

O softwarefoi usado poucas vezes e depois foi retomadoo processo tradicional, onde alguns poucos membros eram responsáveis por produzir esses documentos e entrar em contato com a prefeitura e as escolas que participavam do PNAE.A não adesão me intrigava e o que vim a compreender posteriormente, é que existiam diversos impeditivos para a implantação do softwareque eu não compreendia na época.

Questões como a falta de habilidade técnica dos membros em operar computadores, a assimetria das relações de poder entre os membros do grupo -que fazia com que alguns conseguissem melhores negócios que outros -e algumas proximidades entre membros específicos e pessoasna prefeitura, influenciaram profundamente a capacidade de implantação do software.

Foi esse tipo de questão, que me levou a aprofundar o estudo sobre o tema e tentar compreender melhor como pode ser associado o desenvolvimento de softwarecom iniciativas que visam a inclusão social.

O texto está dividido em cinco seções textuais, a Introdução, três capítulos e as considerações finais.No capítulo 1, apresento uma recuperação das diferentes compreensões do conceito de Tecnologia Social (TS), principalmente a perspectiva da Fundação Banco do Brasil (FBB) e a perspectiva em Dagnino (2014).

Mostroque as diferenças são diversas e pouco negociáveis, pois enquanto a concepção da FBB vai no sentido de catalogar experiência que resolvem problemas sociais pontuais, a perspectiva em Dagnino (2014) trata da TS como uma base cognitiva alternativa à tecnociência convencional capitalista.

Recupero também as contribuições conceituais e metodológicas da TS para analisar e compreender fenômenos de desenvolvimento de tecnologias alternativas.

Ao final do capítulo apresento um quadro conceitual desenvolvido na interação entre o trabalho de campo e as contribuições do marco analítico-conceitual da TS.

O quadro funciona como uma ferramenta heurística que auxilia a análise da experiência da FS na produção doSGMN e que pode ser estendido e usado como guia para a análise de outras experiênciasde desenvolvimento de TS.



No Capítulo 2 apresento uma descrição da ONG Centro Popular de Cultura e Desenvolvimento(CPCD), sua história e como seus diversos projetos se interligam.

Apresento a história da Fabriqueta de Softwaree como ela herda do CPCD suas práticas e discursos e como isso afeta sua dinâmica de trabalho.

Em seguida, descrevocomo foi o processo de construçãoda demanda a qual o softwaredesenvolvido pela FS pretende abordar.Ao final,mostro como a demandase transforma ao longo da relação entre os diversos atores envolvidos no processo, e como a assimetria de poder entre esses atores reconfigura uma demanda inicialmente abstrata, em uma demanda concreta que pode ser abordada por um artefato-solução.No Capítulo 3 apresento o processo de desenvolvimento do SGMN, as dificuldades da FS na composição do artefato e opapelqueele ocupa nas diversas relações que ele estabelece.

Apresento a história da concepção do artefato, as decisões técnicasenvolvidase como demandas que a princípio não parecem relacionadas com o SGMN são determinantes na sua constituição.

Em seguida,apresento as implicações que a implantação do softwareteve aos diversos atores que estavam envolvidos no processo.

Nessa seção utilizo do conceito de sistema tecnológico em Hughes (1983;2013) para mostrar como uma solução pontual acaba ressoandoem toda a estrutura organizacional do CPCD e destacoa importância de uma abordagem que permita navegar entre diferentes escalas, micro e macro, para que seja possívelcapturar a complexidade dos fenômenos de desenvolvimento de TS.Por fim, nas Considerações Finais, apresento como a forma de pensar o softwarecomo um artefato que exercita uma série de relações que ultrapassam suas características técnicas, possibilita pensar sua relação com a ESe outras iniciativas que visam a inclusão social.

Nessa seção destaco a importância do debate sobre o papel das TICs na expansão da ES e como as próprias características do desenvolvimento de softwarepodem ser propícias à serem apropriadas pela ES, criando uma nova possibilidade de adensamento de sua cadeia produtiva.



### 1.CAPÍTULO1–O Marco analítico-conceitual daTecnologia Social
O objetivo deste capítulo é apresentar as diferentes concepções sobre o significado da Tecnologia Social e suas implicações metodológicas para análise de experiências de desenvolvimento de tecnologias alternativas.

Essa retrospectiva dosconceitos visa a formar a base para a análise de experiências como a apresentada neste trabalho e justificar algumas das escolhas teóricas e metodológicas nele realizadas.A seguir, apresento algumas das compreensões do conceito de Tecnologia Social e mostro como cada uma aborda a problemática da inclusão social.

Posteriormente, apresento os insumos metodológicos propostos por trabalhos anteriores, especialmente Dagnino (2014, 2014b, 2014c) e Costa et al (2013) em busca de elementos que balizem a análise do meu objeto.

Ao final, apresento uma síntese das reflexões mediante um quadro conceitual que descreve as diferentes dinâmicas que precisam ser consideradas para abordar a análise e o desenvolvimento de Tecnologia Social.1.1.Uma Tecnologia para Inclusão Social: Tecnologia Social e suas Diferentes ConceituaçõesA Tecnologia Social (TS) é definida de diversas formas por distintos autores.

As variações em torno do conceito expõem suas diferentes visões acerca e suas implicações.

Não obstante, todos deixam explícito uma concepção fundante do conceito: “toda tecnologia é política”.

É política, pois regula espaços e condutas de atores, condicionando estruturas de distribuição de benefícios e prejuízos.

E é política pois sua conformação é produto da disputa de grupos de atores envolvidos e interessados com seu processo de construção sociotécnica, como observa Bijker (1995: 48).

Assim, as tecnologias não são apenas produtos das relações sociais, elas são constituintes das mesmas.

Como observa Winner “as coisas que chamamos de ‘tecnologias’ são formas de construir ordem em nosso mundo” (1980: 127, tradução própria)4.A proposta da TS pode ser resumida como segue.

A tecnologia não é neutra, dado queéconformada por meio de um processo que nela imprime valores, interesses e relações sociais.

O que permite afirmar que é possível conceber outras dinâmicas de produção de tecnologia -e conhecimento -pautadas por outro sistema de valores e interesses.

Dessas 4“[the] things we call “technologies” are ways of building order in our world.

” (1980: 127).



dinâmicas resultariam tecnologias impregnadas por outros valores.

Isto é, distintos daqueles predominantes no contexto social, econômico e político que originam as tecnologias convencionais.

Assim, abre-se a possibilidade de conceber uma tecnologia alternativa, que tenha por motivação não o monopólio de mercado e o lucro extraordinário (como a tecnologia convencional capitalista que temos hoje) e consequentementeaexclusão, mas sim uma tecnologia que tenha como objetivo a inclusão social.E que tenha em seus efeitos, a produção de novos modos de vida, pautados na solidariedade e na sustentabilidade ambiental e social.Herrera (1973), preocupado com a condição periférica latino-americana, é levado a propor, de forma pioneira, um enquadramento do problema da desigualdade social como um problema tecnocientífico.

O que ele observa é que a tecnologia está intimamente ligada com o local em que foi produzida, para quem foi produzida e em qual arranjo institucional foi produzida.

No dizer contemporâneodos autores do construtivismo sociotécnico, um artefato carrega consigo um arranjo sociotécnico específico que condiciona o seu funcionamento.

Essa intrincada relação entre a produção de tecnologia e a “cultura” permite explicar a dependência econômica e cultural dos países periféricos (ou subdesenvolvidos) em relação aos países desenvolvidos (ou centrais), uma vez que a direção do fluxo de tecnologias, da transferência, é quase que unidirecional, saindo destes em direção àqueles.

Para o Herrera, esse movimento inviabiliza a construção de uma sociedade distinta, por desassociar sua base material de sua cultura.

Como observa o autor:[La] tecnología, en el sentido antropológico, es el elemento más determinante de las formas culturales.

En la medida que no serevalorice la tecnología como cultura, como modo de expresión social, la construcción de una sociedad realmente nueva seguirá siendo un objetivo inalcanzable.

(Herrera, 1973: 2).

Assim, para o autor, a construção de soluções para os problemas da ordem social local, está intrinsecamente ligado com recuperar e criar formas e dinâmicas próprias de produzir tecnologia:La única solución para los países en desarrollo, es recuperar la tecnología como parte realmente integrante de su cultura.

Convertirla de elemento exógeno condicionante, en modo legítimo de expresión de sus propios valores y aspiraciones.

Este planteo no responde, por supuesto, a la posición ingenua que supone que es necesario reinventar toda la tecnología.

El problema principal es recuperar la capacidad de decisión social del uso y fines de la tecnología; esto requiere invención en el sentido lato, pero en la mayoría de los casos, por los menos en el futuro próximo, adaptación de elementos tecnológicos creados en los países más adelantados.

(HERRERA, 1973: 5)

Enquadrar a desigualdade e a pobreza como problema científico-tecnológico –ou tecnocientífico -significa reorientar a agenda de pesquisa em ciência e tecnologia de um país, de modo a produzir tecnologias mais aderentes às realidades locais.

E o principal instrumento para tal empreitada é formular um método próprio de pesquisa que compreenda a participação da população e do conhecimento local no processo decisório sobre a tecnociência como fundamental(Herrera 1973).



Nesta breve recapitulação, estão presentes alguns dos conceitos chave que circulam nas diversas concepções de TS: se o conhecimento tecnocientífico não é neutro, é político, é possível reorientá-lo para interesses relacionados à inclusão social.

E a forma de garantir essa reorientação é construir uma dinâmica onde a participação dos usuários-beneficiários seja parte integrante do processo tecnológico, fazendo confluir diferentes saberes e práticas na construção de solução para a questão da desigualdade.

É nesse sentido, que enquadro a Tecnologia Social (TS) no debate sobre alternativas tecnológicas que tem como proposta o desenvolvimento e utilização de tecnologias para inclusão social.

A seguir, apresento algumas variações sobre o conceito e como cada uma compreende o que é a TS, que papel ela deve ter e por quais processos ela deve ser construída.

Antes, porém, concordo que, de forma geral, a TS, diferente da tecnologia convencional capitalista que visa ao lucro e tende a provocar exclusão social, é aquela que visa à inclusão (DAGNINO, 2013: 253-254).1.1.1.Tecnologias para resolver problemas sociais: A Fundação Banco do Brasil e a Tecnologia Social no pluralA concepção mais comum de Tecnologia Social (TS) é aquela difundida pela Fundação Banco do Brasil (FBB), que define TS como: [P]rodutos, técnicas ou metodologias reaplicáveis, desenvolvidas na interação com a comunidade e que representem efetivas soluções de transformação social.

(FBB, 2016)Essa formulação marcou a criação da Rede de Tecnologia Social (RTS) em 2003 e do Banco de Tecnologias Sociais (BTS), em uma iniciativa da Fundação Banco do Brasil (FBB), como observa Dagnino (2013: 263).

A definição tem como inspiração a ideia de um banco,ou catálogo, e é fortemente marcada por uma visão “ofertista” da tecnologia (Dagnino e outros, 1996).

A ideia supõe que é possível construir um catálogo de tecnologias sociais -

observemos aqui o plural -onde cada uma seja uma proposta de solução a um problema social específico.

Em teoria, compilado esse catálogo, uma comunidade teria apenas que reconhecer seu problema nas categorias criadas pelo BTS e buscar nesse catálogo um artefato, objeto ou técnica, que solucionasse seu problema específico.No contexto do BTS, a medida de eficácia de uma tecnologia social do catálogo é sua escala de atuação, ou sua capacidade de replicação e reaplicação, como observa Dagnino (2013).

É neste contexto que também se populariza a ideia de que as tecnologias sociais têm que ser tecnologias de baixo custo, de uso pouco intensivo de conhecimento tecnocientífico e de fácil aplicação.

Como a definição proposta em FBB (2015) tem em sua raiz a participação da comunidade como aspecto fundamental, a questão da escala de distribuição é pensada em termos de reaplicação e não de simples replicação ou transferência.

O processo não descreve uma simples lógica de consumo de uma dada solução, mas sim que cada reaplicação implica em um processo de adaptação da solução para a comunidade para a qual ela está sendo aplicada, pois o desenho e a funcionamento depende não apenas da conformidade do artefato com o problema, mas do que a literatura da construção social da tecnologia denomina um arranjo sociotécnico -o entorno sociotécnico (THOMAS eFASSOLI, 2010; DAGNINO, 2010) -que dialogue com a tecnologia em questão.Os elementos fundamentais dessa concepção de tecnologia social é que ela é uma coleção de soluções para problemas específicos, são tecnologias sociais e não Tecnologia Social.

Para construir essas soluções é fundamental que sejam desenvolvidas na interação com a comunidade, pois a conformação de uma solução está intimamente ligada, de acordo com a terminologia aqui empregada, com os arranjos sociotécnicos que a permeiam, a “cultura” nos termos de Herrera (1973), e que devem ser reaplicáveis, ou seja, devem ser soluções que atendam a uma certa escala de aplicabilidade.1.1.2.Uma base alternativa: Tecnologia Social no singularA concepção colocada acima foi a que obteve mais aderência por parte das instituições e organizações vinculadas ao movimento da TS e também pelo governo brasileiro, como observa (DAGNINO, 2013: 263).

Apesar dessa concepção habitar o entendimento comum sobre o que é tecnologia social, a proposta conceitual em Dagnino (2014) tem diferenças significativas.



Como observa Jesus (2014), a concepção em Dagnino (2014) é fundamentada na Teoria Crítica.

Ela é fruto de uma perspectiva marxista sobre a tecnologia que tem como foco a crítica à neutralidade da tecnociência anteriormente mencionada e a possibilidade do controle político do processo tecnológico.

E parte da visão que a tecnologia deve apontar para satisfação das necessidades humanas, incentivando o potencial e a criatividade do produtor direto e dos usuários em uma perspectiva diferente da prática capitalista, não reproduzindo sistemas de dominação entre detentores de capital ou proprietários dos meios de produção e vendedores de força de trabalho(NOVAES e DIAS, 2009; JESUS, 2014).Dagnino (2014a: 140) desenvolve o conceito de TS por meio da crítica à definição de tecnologia como a simples aplicação de conhecimento científico, desprovida de valores e orientada pela busca da produtividade e eficiência.

A crítica busca uma definição para tecnologia que não esteja presa na concepção capitalista da mesma e que explicite em sua formulação aspectos que o capitalismo obscurece e naturaliza, como a propriedade dos meios de produção, a apropriação do excedente socialmente gerado e o contrato social capitalista.

Assim, Dagnino (2014a)propõe uma definição genérica que entende a tecnologia como “o resultado da ação de um ator social sobre um processo de trabalho no qual, em geral, atuam também outros atores sociais que se relacionam com artefatos tecnológicos visando à produção.

” (DAGNINO, 2014a: 140).

E, particularizando a definição para a TS, ele a define como:[O] resultado da ação de um coletivo de produtores sobre um processo de trabalho que, em função de um contexto socioeconômico (que engendra a propriedade coletiva dos meios de produção) e de um acordo social (que legitima o associativismo), os quais ensejam, no ambiente produtivo, um controle (autogestionário) e uma cooperação (de tipo voluntário e participativo), permite uma modificação no produto gerado passível de ser apropriada segundo a decisão do coletivo.

(DAGNINO, 2014a: 144)Como dito anteriormente, essa definição de TS parte de uma perspectiva marxista, o que condiciona a concepção de um conceito de tecnologia que, entre outras coisas, privilegia ambientes de produção de bens e serviços.

Dagnino (2013: 254) observa que essa estratégia, apesar de deixar de fora do conceito da TS iniciativas que também contribuem para a inclusão social, é o que permite explicitar no conceito aspectos como a propriedade dos meios de produção, o controle do processo de trabalho e a apropriação do produto gerado que são elementos fundacionais da abordagem marxista.

E, na mesma perspectiva ideológica, enfatiza que é nesse espaço -da produção -que se dá a disputa entre as duas classes que se enfrentam no capitalismo acerca dos diferentes modelos societários (Dagnino, 2014d: 208).

Ao mesmo

tempo essa definição aponta para o sentido da inclusão social almejada pelo movimento da TS, uma inclusão pelo trabalho, mas não o trabalho alienado convencional.A inclusão social proposta pelo movimento da TS não é pautada na incorporação da economia informal pela economia formal, como propõe o neodesenvolvimentismo, mas sim na promoção do trânsito da economia informal para a Economia Solidária (ES) (Dagnino (2014b: 176).

Nesse sentido o objetivo da TS não é a produção de experiências pontuais para resolver problemas decorrentes da dinâmica de expansão do capitalismo -a crescente desigualdade -, mas sim consolidar as bases cognitivas, materiais e políticas,para que outro estilo de sociedade baseado na inclusão e na solidariedade, e não na produção e reprodução de lógicas de dominação e exclusão, –a ES -possa avançar.

A TS é referida, aqui, no singular, pois é a base cognitiva alternativa à capitalista -a Tecnologia Convencional (TC) –e, como observa, “É algo [a TS] que denota uma utopia que está sendo construída” (DAGNINO, 2013: 252).

É o que ele denomina “plataforma cognitiva de lançamento da ES” (DAGNINO, …).

Nesse sentido, a TS é uma outra forma de encarar a relaçãociência, tecnologia e sociedade, explícita e ideologicamente orientada, e que reconhece a intencionalidade e a potencialidade política das ações humanas.Apesar desse conceito de TS se colocar como uma base cognitiva alternativa à hegemônica, sua intenção não é “voltar para as cavernas ou jogar a criança com a água do banho” (DAGNINO, 2014d: 209), descartando tudo o que já foi desenvolvido, mas sim aproveitar o que for possível da tecnologia que o capitalismo desenvolveu.

Para tal, em Dagnino, Brandão e Novaes (2010: 99) apresentam o conceito de Adequação Sociotécnica (AST) como um resignado elemento para a operacionalização da TS, que desdobra o marco teórico em uma dimensão processual e introduz a TS como um processo de construção social.

Assim, a AST trata da adequação ou reprojetamento do conhecimento tecnocientífico, seja ele incorporado, intangível ou tácito, tanto aos requisitos econômicos e técnicos quanto nos requisitos sociais e ambientais.

Assim, de acordo com os autores,[A] AST pode ser entendida como um processo “inverso” ao da construção, em que um artefato tecnológico ou uma tecnologia sofreria um processo de adequação aos interesses políticos de grupos sociais relevantes distintos daqueles que o originaram.

(DAGNINO, BRANDÃO eNOVAES, 2010: 101)Nesse sentido, a AST pode ser entendida como o processo de desenvolvimento da TS, e a TS como resultado do processo de AST.

Assim, a AST promove uma forma de

desenvolver tecnologia para a produção bens e serviços aderente a uma lógica solidária e não necessariamente ao mercado.

A definição, ainda traz o foco na incorporação de usuários até então excluídos do processo de desenvolvimento tecnológico e na preocupação com fatores socioeconômicos e ambientais, usualmente tratados como externalidades no desenho da tecnologia convencional capitalista.

Complementarmente: A AST visa a adequar a tecnologia convencional (e, inclusive, conceber alternativas como indicadas pelas suas sete modalidades) adotando critérios suplementares aos técnico-econômicos usuais e aplicando-os a processos de produção e circulação de mercadorias em redes de ES visando a otimizar suas implicações sociais, econômicas e ambientais.

(DAGNINO, 2014c: 204)Para tal, o processo de AST é classificado em diferentes modalidades, ordenadas pela complexidade e radicalidade do processo empregado, como descrito no Quadro1abaixo:Quadro 1-As Modalidades de Adequação SociotécnicaModalidadeAtividadeAlteração na distribuição da receita geradaA manutenção das características do processo de trabalho (uso convencional das máquinas, formas de organização do trabalho etc.) em situações em que a propriedade dos meios de produção passe de privada à coletiva, propiciando a alteração na distribuição dareceita gerada (de lucro e salários para retiradas), promove uma modificação no contexto sociotécnico e é um embrião de novas AST.ApropriaçãoA propriedade coletiva dos meios de produção supõe a aquisição, pelos trabalhadores, de conhecimento produtivo,de gestão, e de concepção de produtos e processos, sem que alguma modificação seja introduzida nos mesmos.

Distingue-se do conceito usual de “apropriação” do conhecimento tecnocientífico na medida em que tem como condição a propriedade coletiva dos meios de produção.RepotenciamentoA postura associada à nova condição de propriedade coletiva tende a levar à modificação das máquinas e equipamentos mediante ajustes, recondicionamento ou revitalização (incorporação de componentes e dispositivos mais recentes), procedimentos de manutenção preventiva etc.

visando ao aumento da sua vida útil ou à modificação das características do bem ou serviço produzido.Ajuste do processo de trabalhoUm ambiente de trabalho democrático e participativo, não submetido ao controle capitalista, levará ao questionamento da divisão técnica do trabalho.

O processo de trabalho tenderá a assumir formas de organização autogestionárias.



Alternativas tecnológicasEntende-se esta modalidade como decorrente da percepção de que as anteriores não são suficientes para dar conta das demandas do empreendimento autogestionário.

Ela implica a busca e seleção alternativas tecnológicas já existentes, distintas da tecnologia convencional –anteriormente utilizada ou disponível no mercado –mediante consultas a pessoas, instituições, bancos de dados etc.Incorporação de conhecimento tecnocientífico existenteO prolongamento do processo de busca de tecnologias alternativas tenderá a explicitar a necessidade de incorporar conhecimento (intangível, não embutido em meios de produção) existente, para o desenvolvimento de tecnologias (novos processos produtivos, meios de produção, insumos etc.).

Esta modalidade implica atividades de “inovação incremental”, que tenderão a ocorrer de forma associada a instituições públicas de P&D e ensino.Busca de conhecimento tecnocientífico novoO prolongamento do processo de inovação incremental tenderá a explicitar a necessidade de incorporar às atividades realizadas nos empreendimentos autogestionáriosresultados da exploração da “fronteira” do conhecimento tecnocientífico.

Esta modalidade implica atividades de “inovação radical” que provavelmente demandarão o concurso de instituições públicas de P&D e ensinoFONTE: Elaborado a partir de Dagnino (2014:205-206)1.1.3.Outras contribuiçõesThomas e Fressoli (2010) fazem contribuições interessantes para análise de experiências de TS, apresentando aspectos teórico-metodológicos no sentido de promover o aprendizado por meio da análise de experiências no desenvolvimento de TS.

Os autores concordam com a dimensão da TS no singular, de conformação de uma outra base cognitiva, e observam também observam a necessidade de investigar experiências empíricas pontuais de desenvolvimento de tecnologias sociais.

Segundo os autores, essa investigação empírica contribui para compreender condições concretas e possibilidades locais; explicita conhecimentos tácitos na resolução de problemas sóciohistoricamente situados; e auxilia na conformação de um conhecimento que responda as perguntas estratégicas da TS como, “como aportar soluções tecnocientíficas para problemas sociais?”, “como produzir tecnologias sustentáveis e socialmente adequadas a cenários específicos?”, “como desenvolver tecnologia em países em desenvolvimento?”, etc., (THOMAS e FRESSOLI, 2010: 227).



Os autores ainda chamam atenção para algumas potencialidades da proposta da TS e destacam que conceber o problema da desigualdade e exclusão como um desafio científico-tecnológico abre a oportunidade de utilizar conhecimentos locais até hoje subutilizados,e que os desenvolvimentos de tecnologias sociais podem possibilitar dinâmicas locais de inovação, como criação de novos produtos e serviços, e assim contribuir para a expansão dos mercados dos países em desenvolvimento.

Segundo eles: Una diversidad de tecnologías que posibiliten tanto accesibilidad como ahorros sociales en sistemas de salud, transporte, vivienda, comunicaciones, puede vincularse con la generación de precios de referencia y reducción de costos de logística, infraestructura y servicios.

La adecuación de las tecnologías sociales localmente generadas a las situaciones de uso y su compatibilidad con los sistemas preexistentes implica también un potencial de expansión en terceros mercados de países en vías de desarrollo o, aún, desarrollados.

(THOMAS e FRESSOLI, 2010: 225)Assim, para Thomas e Fressoli (2010), além de gerar capacidades de resolução de problemas sociais, as tecnologias sociais podem funcionar como ferramenta para a criação de dinâmicas de inclusão social localmente aderentes, ambientalmente sustentáveis e economicamente satisfatórias.Metodologicamente, Thomas e Fressoli (2010) destacam as modalidades de AST para análise de experiências de desenvolvimento de tecnologias sociais e propõem outras categorias que podem guiar a análise.

Destacam a análise da dinâmica sociotécnica da construção do funcionamento de uma tecnologia específica, pois o “funcionar ou não” de um artefato é também um aspecto construído na interface entre as dinâmicas sociais locais e o desenvolvimento do próprio artefato.

Destaca o caráter interdisciplinar da análise sociotécnica, que deve contemplar tanto a análise sobre o desenho e desenvolvimento da tecnologia “la mirada del ingeniero” (THOMAS e FRESSOLI, 2010: 241), quanto a análise das dinâmicas de produção de conhecimento “la mirada del sociólogo del conocimiento” (THOMAS e FRESSOLI, 2010: 241).

E, também, seu caráter desincorporado -no artefato -e seu caráter tácito, ressaltando a participação dos experts e as parcerias institucionais.

Enfatizam, em suma, que é fundamental atentar tanto para a construção do artefato quanto para o entorno sociotécnico, as dinâmicas sociais locais, as interações institucionais, as relações que perpassam o processo de construção e as suas consequências.As diferentes compreensões da TS convergem em diversos pontos, principalmente o que coloca a exclusão social como problema sociotécnico.

Mas diferem nos termos e condições para transformar essa exclusão em inclusão social.

Principalmente a FBB, que

parece se preocupar muito mais produzir um catálogo das ações que mitiguem a ausência do Estado em diversos setores e ocasiões isoladas, desde locais geográficos, como o semiárido até setores como a educação, premiando iniciativas criativas.

Na proposta em Dagnino (2014) e no conceito que enuncia, a TS tem como objetivo uma transformação social muito mais profunda do que pretende a FBB.

A discordância reside na importância da propriedade dos meios de produção: se na FBB isso é uma característica secundária.

Thomas e Fressoli (2010) consideram a possibilidade de uma convivência entre a propriedade coletiva e a privada.

Para Dagnino (2014) além do fato da propriedade dos meios de produção coerente com a TS ser a coletiva, o caminho para o desenvolvimento da TS passa pelo questionamentoda propriedade privada e por uma proposta de reorganização do modo de produção.



As Contribuições MetodológicasA polissemia do conceito levanta a questão de como conceber uma metodologia para compreender o fenômeno da TS.

Naturalmente, a proposta metodológica deve derivar dos aspectos que o conceito de TS e o marco conceitual dele derivado propõe.

Em particular, do modo como postula sua diferença em relação à Tecnologia Convencional capitalista.

Se a Tecnologia Convencional (TC) busca o aumento da produtividade do trabalho e a apropriação privada do excedente econômico gerado, a TS, que tem como objetivo e motivação a inclusão social, deve dispor de uma metodologia de análise que incorpore outros aspectos além dos técnicos e econômicos.

Outros elementos, como os que seguem, condicionam a questão metodológica.

Se a TC tem como aspecto naturalizado a percepção de que seu desenvolvimento é neutro, de que sua história social é a própria história das decisões técnicas sobre os processos produtivos, a TS deve ter como um aspecto central, a percepção da dimensão política da tecnologia, ou a inseparabilidade entre o que é político e o que é técnico.

O que implica que a análise de qualquer evento envolvendo a TS, e em particular as ações tendentes ao seu desenvolvimento (ou Adequação Sociotécnica), deve considerar uma racionalidade e uma intencionalidade que estão escondidas na TC.

Incorporar uma perspectiva dessa natureza na metodologia é fundamental para compreender esses eventos e experiências.A metodologia deve então, compreender dois aspectos principais da TS: 1) incorporar em sua análise aspectos para além do técnico e econômico: como a sustentabilidade ambiental, a cultura, autonomia política e realização da capacidade criativa do produtor direto, bem como sua satisfação econômica, felicidade, etc.

Essas dimensões, tidas como secundárias e desimportantes, ou até como externalidades, quando se considera o

desenvolvimento de TC, devem servir para produzir uma continuidade analítica entre os domínios “social” e “técnico” (vistos como separados pela TC).

São os entrelaçamentos entre esses domínios que permitirão apreender a complexidade e heterogeneidade das experiências reais de desenvolvimento de tecnologias alternativas à TC; e 2) a metodologia deve ser capaz de compreender a intencionalidade política nas escolhas técnicas e, consequentemente, a orientação ideológica explícita, presente no desenvolvimento da TS e no processo de Adequação Sociotécnica que o torna possível.

Esse deslocamento coloca as categorias como “funcionar” ou “eficiência”, não como argumentos explicativos para o desenvolvimento de algum artefato, mas como resultado de um processo que precisa ser explicado, reconhecendo espaços mais ou menos viáveis e oportunos para tanto.

O que se espera é que a metodologia contemple tanto uma perspectiva explicativa e analítica quanto uma normativa e uma estratégica para o desenvolvimento da TS.Os insumos metodológicos apresentados em Dagnino (2014b) e Costa et al(2013), vão no sentido de desdobrar o conceito de TS em suas diversas instâncias, em formas que permitam a análise e produção de TS.

A seguir, apresento os insumos em dois eixos, um analítico/explicativo preocupado em oferecer ferramentas conceituais para o estudo de experiências em tecnologias alternativas à TC, especialmente a TS; e um eixo normativo/estratégico, preocupado em oferecer propostas para o avanço da TS como modelo viável.

Não proponho que os dois eixos devam compreender domínios fundamentalmente distintos; a divisão é apenas oportuna e funciona como instrumento para compreender a relação interativa e iterativa entre a proposta teórica da TS, a heterogeneidade das experiências a ela relacionadas e a possibilidade de seu avanço.1.2.1.O momento normativo/estratégicoComo abordado anteriormente, o objetivo da TS é viabilizar uma base cognitiva para a inclusão social.

Mas não uma inclusão convencional capitalista, derivada da incorporação à economia formal das atividades e pessoas que se situam na economia informal.

Um espaço em que, por oposição àquele em que operam os valores e práticas do capitalismo, as expectativas de acumulação não são satisfatórias para o capital.

A inclusão da proposta da TS é incorporar as atividades e pessoas que se situam na economia informal à Economia Solidária, criando oportunidade de trabalho e renda em uma dinâmica que tem como fundamento a solidariedade social e econômica, a autogestão e a propriedade coletiva dos meios de produção, e a não alienação do produtor direto.



O objetivo da TS é, então, como já afirmado anteriormente, proporcionar a base cognitiva que alavanque os aspectos materiais contidos na proposta da ES.

Heuristicamente falando, uma vez que é impossível separar processos que se dão de modo simultâneo e co-organizados, para que a ES se desenvolva e se consolide como alternativa viável.

Isto é, que seja capaz de absorver ou atrair para si e para a sua dinâmica coletiva e solidária de produção e distribuição de bens e serviços as atividades e as pessoas que hoje se encontram na economia informal.

E, também, as que se situam na economia formal e que terão sua lógica de funcionamento (atividades) e estilo de vida (pessoas) paulatinamente desbancada em função de elementos políticos, sociais, econômicos e ambientais relativamente cada vez mais desfavoráveis.

Paraque tudo isso possa se verificar, a proposta metodológica em Dagnino (2014b) é conceber uma forma de identificar nessas duas economias e, principalmente, no momento atual, na sua interface oportunidades de Adequação Sociotécnica (desenvolvimento de TS) portadoras de futuro ou mais promissoras no que respeita àqueles elementos e de contribuir para o sucesso dessas oportunidades.O reconhecimento de oportunidades de AST implica atentar para dois elementos, o reconhecimento da capacidade cognitiva e produtivade uma dada comunidade e de suas demandas materiais.

As capacidades cognitivas e criativas podem vir de diversas origens e são carregadas de idiossincrasias dos próprios atores que as detêm.

E as demandas materiais são demandas por bens e serviços que a comunidade necessita, mas que não estão disponíveis, seja pela ausência do Estado, ou do mercado, ou pela insatisfação por parte da comunidade, sobre como eles são disponibilizados (DAGNINO, 2014b).

Essas capacidades e demandas são chamadas de “capacidades cooperativas” em Dagnino (2014b: 177).

O conceito deriva de uma adaptação das capacidades competitivas de Porter (1993) para o ambiente da TS e da ES, e abrange 4 atributos:1)Capacidade dos trabalhadores, entendida como habilidades reais e potenciais quepossibilitem a implementação de formas coerentes com os princípios da ES e da TS na comunidade em questão;2) Demanda, entendida como a demanda real e potencial da comunidade em questão, de outras comunidades da economia informal (ou da ES) e do mercado (economia formal) pelos bens e serviços possíveis de serem produzidos -pela comunidade x -3) Relação com outras ES, entendida como a viabilidade de complemento à jusante ou à montante e adensamento de cadeias produtivas com outros empreendimentos solidários;

) Sustentabilidade das ES, entendida como a capacidade das ES existirem ou serem criadas para sobreviver frente à economia formal.

(DAGNINO, 2014b: 178)Os dois primeiros atributos -capacidade dos trabalhadorese demandas da comunidade -são características construídas historicamente pela comunidade, suas atividades produtivas de subsistência, sua geografia etc.

(DAGNINO, 2014b: p176).

As capacidades são as potencialidades, habilidades e saberes, seja de natureza tecnocientífica, “tradicional”, ritualista, ou de uma mistura das mesmas.

São normalmente saberes e práticas envoltas em idiossincrasias, que emergem da história social da comunidade.

Da mesma forma, as demandas da comunidade estão ligadas aos movimentos sociohistóricos que envolvem a comunidade, seja demandas historicamente persistentes, como questões geográficas específicas, como o problema das secas em regiões áridas, até demandas provenientes da incapacidade do Estado em atender suas necessidades básicas, como acesso à moradia, educação, trabalho e renda.

Enquanto esses dois atributos apontam para dentro da comunidade, os outros dois, relativos à capacidade de acoplamento a cadeias solidáriase à sustentabilidade solidária do empreendimento frente àeconomia formal, apontam para fora da comunidade, no sentido de que envolvem a relação com uma dinâmica que extrapola os limites da comunidade.

O atributo (3) fala sobre a potencialidade da atividade para ser acoplada a outras atividades também executadas por Empreendimentos da Economia Solidária (EESs), de forma a adensar uma cadeia produtiva solidária.

Para avaliar esse atributo é importante pensar em formas criativas de acoplar elementos à cadeia, principalmente quando se trata de bens e serviços que não precisam passar pelo mercado.

Muitas vezes as atividades produtivas de uma comunidade podem usar como insumo, produtos de outros EESs, o que pode diminuir o custo de produção e distribuição como um todo, uma vez que os valores que orientam a cadeia são a solidariedade e não a acumulação privadado excedente econômico nela gerado.

O elemento (4), diz respeito à sustentabilidade do EES frente à economia formal.

Muitas atividades que podem ser realizadas por comunidades, utilizando os conhecimentos de que dispõem, podem não ser oportunas, já que elas podem se encontrar numa situação estável e rentável na economia formal; o que colocaria a iniciativa em desvantagem.

Porém, atividades que não são atrativas para a economia formal, por não permitirem a consecução das expectativas de acumulação esperadas ou devido a limites de regulamentação, por exemplo, podem ser assumidas por EESs e servir como elemento de adensamento de cadeias solidárias.



A dificuldade em transformar uma atividade situada mercado formal numa atividade da ES se dá pela própria constituição da cadeia onde ela se encaixa.

Muitas vezes, ao colocar um EES numa cadeia formal, os princípios da ES podem implicar desvantagens competitivas em relação às empresas privadas que atuam na economia formal.

É necessário possuir um aguçado sentido estratégico na escolha de atividades para serem executados por EESs.

É importante saber identificar atividades que possam se aproveitar de meios de produção coletivos ou de cadeias solidárias já existentes.

Elas são candidatas mais eficazes do que atividades isoladas que dependem de cadeias total ou parcialmente inseridas na economia formal ou controladas por empresas.Como observa Dagnino (2014b: 178), essas capacidades e demandas não são estáticas.

Dado que são resultantes da construção sociohistórica da própria comunidade, elas são mutantes.

Ademais, no que se refere às capacidades potencialidades, habilidades, saberes e fazeres que estão presentes na comunidade, há que levar em conta que além de serem de natureza genérica (tecnocientífica ou “tradicional”), elas costumam ser dominadas pelos seus integrantes.

Para serem aproveitadas, elas devem ser identificadas e prospectadas pela observação das ocupações cotidianas de seus membros sua relação com o trabalho, as relações organizacionais e de produção de conhecimento.

Como observado anteriormente, construir uma solução para uma demanda material com autonomia envolve mobilizar essas capacidades agrupando os integrantes das comunidades ao redor de saberes, capacidades, demandas ou interesses.

Assim, é importante a atenção às possibilidades, não apenas individuais de certos membros do grupo e da capacidade coletiva do grupo como um todo, mas também nas possibilidades de relação do grupo com outros coletivos exteriores a ele, de forma que essas relações possam produzir conjuntos de capacidades e demandas necessários para fortalecer a ES e viabilizar o desenvolvimento de TS.

É importante notar que a comunidade também não deve ser encarada como uma categoria dada a priori.

Não é necessário que se trate de uma comunidade notadamente tradicional ou historicamente coesa onde os indivíduos convivem há muito tempo.

Uma das características do desenvolvimento da TS é sua capacidade -e necessidade -de mobilização do entorno de uma demanda/capacidade/solução.

Nessa mobilização, serão formados coletivos que não estariam relacionados caso não houvesse a decisão do desenvolvimento da TS, como mostra por Costa e Dias (2013: 51) ao analisar a experiência da Articulação

Semiárido Brasileiro (ASA) com o Programa 1 Milhão de Cisternas (P1MC) e reproduzir a fala de um dos entrevistados: “não somos construtores de cisternas, mas de relações sociais” (COSTA e DIAS: 51).

O que os autores mostram é que ao iniciar o programa de construção em uma comunidade mobilizaram-se diferentes membros.

Uns acomodavam o construtor das cisternas em suas casas, outros providenciavam a alimentação.

Além do que, muitas vezes, a construção era feita em mutirão.Essa mobilização criou novas dinâmicas na comunidade, produzindo novos papéis e, inclusive, fazendo emergir lideranças políticas no processo de interação entre os membros do grupo ao longo da construção da cisterna.

Como observam os autores, a experiência do P1MC mostra que, frequentemente, os processos de construção de uma tecnologia social são mais importantes do que o produto final pois é no seu transcorrer que a comunidade é mobilizada ou “produzida”, dando origem a novas capacidades e possibilidades de ação.

Como observam os autores: “As almejadas dinâmicas de empoderamento e de inclusão social não são geradas a posterioripelas cisternas; são, sim, resultantes do processo de construção desses artefatos” (COSTA e DIAS,2013: 51).

É frequente que em processos como esse, e o caso da disponibilidade de água é emblemático, emerjam demandas por bens e serviços que estavam latentes ou represadas; e que as atividades para os produzis possam ser realizadas pela própria comunidade.De fato, a comunidade no início do processo de desenvolvimento da TS não é a mesma no seu final e não existe, necessariamente, a precedência temporal ou lógica entre comunidade, demanda e capacidade.

Comunidades podem se formar no entorno de demandas específicas, como a disponibilidade de água, tal como mostrado por vários estudos realizados em diversos países e está aglomeração reconfigura a disponibilidade de capacidades e a própria percepção do grupo sobre a demanda.

A conjunção oportuna entre dois grupos diferentes pode, também, produzir capacidades que permitam identificar demandas que até então não estavam claras para nenhum dos grupos em separado.

Ou mesmo, grupos podem se desagregar ao longo do processo, quando parte do conjunto não concorda com a proposta da TS.Nesse sentido, o esforço de identificar oportunidades de AST (de desenvolvimento de TS) deve sempre levar em contaque os três elementos -comunidade, capacidades e demandas -são móveis e interdependentes.

E que o movimento agregador a ela inerente tende a produzir escalas que não estavam presentes anteriormente.

O movimento de produzir uma

solução sociotécnica para uma demanda é concomitante ao de “produzir” uma comunidade em torno dessa solução.

Trata-se de processos sinérgicos que viabilizam o sucesso de uma iniciativa de AST.

Essa atenção à dimensão da AST, de agregar ou desagregar grupos, é fundamental para garantir que a busca pela aderência sociotécnica da solução à comunidade, ou de coerência entre a TS e a comunidade em transformação, seja alcançada.Em suma, não há que buscar uma relação de causalidade inicial entre a existência de uma comunidade, de capacidades ou de demandas, pois elas são imanentes à mobilização e engajamento de um coletivo ao longo do processo de AST.

Pois, como bem expressa o próprio nome dado ao processo, a adequação é sociotécnica, envolvendo processos de adaptação “sociais” e “técnicas” concomitantes em diversos pontos de um “tecido sem costuras”.Assim como as comunidades são produzidas ao longo de um esforço de mobilização, as oportunidades de AST também demandam a mobilização de uma série de atores para serem viabilizadas.

As oportunidades de AST surgem da identificação das potencialidades de relações sociotécnicas que são possíveis de serem estabelecidas ao redor dos valores da TS e da ES.

É essa gravitação em torno da ES e da TS que possibilita a produção de comunidades ligadas por valores de inclusão, capacidades autônomas e demandas próprias.

Enxergar ou antever essa relação é fundamental para a escolha estratégica das oportunidades e possibilidades de AST.Assim, identificar e produzir oportunidades de AST, implica em reconhecer agenciamentos sociotécnicos que produzam comunidades com capacidades e potencialidades para desenvolver soluções de TS para demandas próprias desses grupos agenciados.

Como observa Dagnino (2014b: 182-3):Em outras palavras, e sendo mais normativo, as atividades AST devem materializar a vocação “costuradora” de combinar o objetivo de solucionar problemas locais sentidos por comunidades excluídas (ou pela coletividade mais ampla, que cabe ao Estado providenciar utilizando seu poder de compra) com as suas próprias habilidades, saberes, idiossincrasias e visões de mundo.

(DAGNINO, 2014b: 182-3)

.2.2.O momento explicativo/analíticoComo observa Dagnino (2014b: 181), a recomendação de como encontrar oportunidades de AST e quais oportunidades escolher, também tem comoproduto um guia para escolha de processos a observar e analisar.

As questões são, de certa forma, análogas à preocupação de reconhecer um conjunto de recomendações para ação concreta dos partidários da TS e da ES.

Neste sentido, as questões base para guiar uma forma de estudar experiências de TS são: Quais experiências escolher? E o que olhar nessas experiências?Sobre quais experiências escolher para se pesquisar, Dagnino (2014b: 176; 2014b: 184) retoma a intencionalidade da proposta da TS e a necessidadede escolhas estratégicas para avançar.

Tendo a consciência de que o projeto da TS é essencialmente contra-hegemônico e explicitamente ideológico, o autor afirma que:[S]ão situações em que é possível materializar a combinação entre as potencialidades de comunidades excluídas e problemas locais, aquelas que devem concentrar nossa atenção.

Isso porque é a análise dessas situações que nos poderá auxiliar a identificar caminhos genéricos de Adequação Sociotécnica passíveis de serem seguidos em atividades de desenvolvimento de TS.

(DAGNINO, 2014b: 176)Essa recomendação evidencia a interseção entre a dimensão normativa e analítica da TS, não porque a metodologia proposta pela TS seja de alguma forma mais enviesada do que outras, incluindo aqui as que originam a TC.

De fato, ao reconhecer o caráter político da tecnociência convencional (capitalista) em suas escolhas e em seu desenvolvimento, torna-se possível conceber -intencionalmente e racionalmente -o desenvolvimento de uma base cognitiva específica que seja aderente a outros valores, que não os capitalistas.

No caso da TS, os valores da ES tomam o lugar das motivações capitalista.

Essa reorientação traz consigo um outro tipo de governança necessária ao processo de desenvolvimento de uma tecnociência (ou, parausar os termos que aqui se estão utilizando tecnologia) alternativa, seja em sua forma incorporada em artefatos ou processos produtivos específicos, seja na sua forma desincorporada, de produção de conhecimento.

Se o objetivo é a inclusão social nos termos aqui colocados e não acumulação de capital, os instrumentos, processos e preocupações têm que ser também, distintos.



Conectar a escolha de “objetos” ou “casos” de pesquisa a uma postura estratégica para viabilizar ações concretas, coloca em questão a diferença objetiva entre “estudar TS” e “produzir TS”, envolve uma aproximação entre as dimensões analíticas e normativas da

metodologia.

Evidenciar o caráter interativo entre as proposições teóricas e as experiências práticas é fundamental para construir a própria base cognitiva que a TS se propõe a refundar.

Os desafios cognitivos não são partes isoladas dos desafios materiais encontrados na implantação da TS no âmbito da ES: eles são constitutivos um do outro.Escolhida a experiência, Dagnino (2014b) propõeque o próprio marco analítico conceitual da TS pode ser utilizado para acessar as diversas dimensões de análise do objeto.

A afirmação é tributária dos conceitos de TS e AST e se baseia na necessidade de perceber os componentes ideológicos que estão obscurecidos ou naturalizadas pela proposta da Tecnologia Convencional ou são por ela renegados.

Assim, o autor propõe que para ler uma experiência com um olhar sociotécnico é preciso desfazer a disjunção entre política e técnica perpetuada pela proposta Tecnologia Convencional e aproximar aspectos tidos como externalidades pelas análises convencionais.

Reconhecer as idiossincrasias dos coletivos de indivíduos, da geografia e da história do local onde a tecnologia foi desenvolvida, é fundamental para compreender o processo mediante o qual uma TS foi construída.

Compreender as dinâmicas de produção de conhecimento e de possibilidades de inclusão social que estão vinculadas a esses mesmos condicionantes exige atenção a um conjunto de aspectos frequentemente negligenciado pelas análises convencionais.Para atender a essa necessidade de estar atento ao entorno sociotécnico onde a TS foi ou está sendo desenvolvida, Dagnino (2014c: 193) propõe nove conjuntosa serem explorados.

São eles:

Quadro 2-Os Conjuntos para Análise de uma TSConjuntoAtividades guiaConjunto Descriçãodescrever a organização no qual um grupo opera, destacando suas atividades produtiva, a propriedade dos meios de produção e o processo de trabalho onde se insere a TS.Conjunto Conhecimentocompreender as dinâmicas de aprendizado que ocorreram no grupo, como foi a participação dos usuários no processo de AST e como foram incorporados os saberes dos diferentes atores envolvidos (membros do grupo, pesquisadores, comunidade local, etc.).Conjunto sustentabilidade Econômicaanalisar o potencial de autonomia do grupo, como ele pode se integrar à outras cadeias da ES e como a iniciativa se desempenha frente à economia formal.Conjunto Sustentabilidade Ambientalavaliar o impacto ambiental da TS, e como o grupo se relaciona à questão ambiental.Conjunto Sustentabilidade Culturalentender como a TS se relaciona com as práticas culturais da comunidade envolvida, se as práticas de autogestão são consonantes ou dissonantes e se elas tendem provocar o empoderamento dos “usuários” da TS.Conjunto Sustentabilidade Políticaverificarse a iniciativa tem potencial de ser fomentada por recursos públicos e se pode conseguir apoio de outros segmentos como comunidade de pesquisa e movimentos sociais.Conjunto Alternativas Tecnológicasassociar a iniciativa às sete modalidades de AST e verificar se existem possibilidades de desenvolvimento de tecnologias alternativas decorrentes do aprendizado gerado pela TS.Conjunto Entorno Sociotécnicoanalisar a compatibilização entre as “vantagens cooperativas” e as demandas materiais da comunidade.Conjunto Dinâmica Sociotécnicaavaliar se o processo de co-construção entre o “social” e o “técnico” que configura a iniciativa, suas disputas e os atores envolvidos, destacando os elementos que explicam o funcionamento ou o não-funcionamento da TS.FONTE: Elaborado a partir de Dagnino (2014c, p193-195)

O Quadro 2constitui um guia para que uma experiência de desenvolvimento de tecnologia alternativa -TS, ou não -seja, analisada com uma lente mais potente, que não se limite à neutralidade e tecnicidade da proposta da tecnologia convencional, e contemple as diferentes esferas nas quais o processo de desenvolvimento tecnológico circula.Em Costa et al(2013: 278) são oferecidos alguns outros insumos metodológicos baseados nos casos ali estudados, que focama relação entre desenvolvimento de TS e Políticas Públicas.

Eles emergem do estudo de cada caso e das pesquisas de campo realizadas.

Embora a preocupação tenha sido voltada a questões relativas ao objetivo da coletânea, o procedimento metodológico empregado foi diretamente influenciado pelas proposições teóricas e conceituais já apresentadas

As contribuições dos autores são consonantes com as proposições apresentadas em Dagnino (2014b; 2014c), que classifica a pesquisa em três momentos: 1) um descritivo, com o objetivo de expor a experiência em questão; 2) um analítico, estabelecendo as relações entre a experiência estudada e o marco teórico da TS; 3) prescritivo, recomendando ações para o desenvolvimento da TS e sua integração à ES.

A preocupação com a agenda interativa entre análise e prescrição remonta novamente à característica fundamental da TS, que é a compreensão do caráter político das escolhas técnicas.1.2.3.Sintetizando as perspectivas metodológicasComo é possível observar, as contribuições apresentadas oferecem insumos metodológicos importantes para o análise e desenvolvimento de TS e descrevem a relação entre os dois momentos que comentei anteriormente, o explicativo e o normativo.

Reagregando a divisão oportunista e grosseira que determinei, o que fica claro entre as diferentes contribuições é que a intencionalidade da proposta da TS produz um efeito, não apenas metodológico no estudo de alternativas tecnológicas, mas também um efeito de redesenho dos limites normativos e analíticos da análise de tecnologias.

Assumir esse redesenho lança luz sobre o constante trabalho que a tecnologia convencional exerce para manter a cisão entre o “estudar tecnologia” e “produzir tecnologia”.

Manter essa falsa divisão, de que só é legítimo uma perspectiva que não se vincule a uma posição normativa só funciona em benefício à tecnologia convencional capitalista, pois como observa Dagnino (2014; 2008), sua posição dominante cria uma cortina de fumaça que apaga as perspectivas ideológicas e normativas de seu desenvolvimento.



A reaproximação dessas esferas ditas incompatíveis pela Tecnologia Convencional, só é possível pelo descortinamento da perspectiva normativa e ideológica contida em seu desenvolvimento, e a posição contra-hegemônica onde a TS se situa é razão e produto dessa compreensão.

Assumir uma posição politicamente engajada na questão do desenvolvimento tecnológico, permite compreender a possibilidade de produção de alternativas, que operem em outras claves de valores, que não a da acumulação e desigualdade da tecnologia convencional (capitalista), e sim de solidariedade e inclusão social.

Em última instância, o que a TS possibilita é que a fronteira entre “estudar TS” e “produzir TS” seja reconfigurada e que umesforço de um lado se materialize no outro.

Tendo consciência das implicações políticas e epistemológicas da proposta teórico metodológica descrita acima, Dagnino (2014b) oferece uma visualização dos passos operacionais para a pesquisa e desenvolvimento de TS(FIGURA 2), destacando o caráter interativo entre o marco analítico e a heterogeneidade das experiências e o caráter iterativo entre os procedimentos metodológicos.



As vantagens cooperativas são as capacidades disponíveis em um grupo, as demandas correspondem ao levantamento das necessidades materiais desse grupo, a compatibilização é o esforço de produzir soluções a essas demandas utilizando as capacidades disponíveis e as situações típicas é como a proposta de solução sobrevive frente as atividades

pertencentes ou não ao mercado formal.

É importante observar que a relação entre os passos é cíclica, o que denota uma constante readequação dos parâmetros a cada nova iteração, reconstituindo as capacidades frentes as demandas, as oportunidades e barreiras em sua implementação.1.3.Agregando as Contribuições: um Quadro de Leitura SociotécnicaA seguir, apresento um quadro-síntese das contribuições conceituais e metodológicas revisadas até aqui.

Denominei-o como um quadro de Leitura Sociotécnica de processos de AST -ou de desenvolvimento de TS.

Pretendo que ele opere como um guia de viagem, oferecendo alguns pontos turísticos que não podem deixar de ser vistos, mas flexível o suficiente para permitir aos aventureiros, se desviarem da rota e escrever nas entrelinhas as suas próprias impressões.

A organização decorre do caráter tridimensional da experiência de AST ou de desenvolvimento de TS, onde a configuração de uma TS é alterada pela configuração da comunidade e a comunidade é alterada pela TS e essa mudança pode ser observada na progressão temporal.

Caso nos fixemos apenas em um momento temporal de uma experiência de TS é provável que se perca o movimento sociotécnico do desenvolvimento de TS.

Ao estender a experiência da TS no tempo é possível observar o processo de co-produção entre a comunidade e a TS, em um movimento de gravitação dupla, onde a cada iteração os dois elementos são reconfigurados, dandoorigem a uma nova comunidade e uma nova TS.

Co-produção, como entendido em Jasanoff (2004: 3), é uma forma de compreender que o conhecimento e sua materialidade são ao mesmo tempo produtos do mundo social e constitutivos desse mundo, pois a sociedade nãofunciona sem conhecimento, assim como o conhecimento não tem como existir sem o suporte social apropriado.

E as formas como conhecemos e representamos o mundo são inseparáveis das formas como escolhemos nele viver.

A co-produção é o idioma proposto pela autora para compreender a implicação mútua entre sociedade e conhecimento.

Ou na presente discussão, entre tecnologia social e comunidade.

Essa compreensão permite acessar o mundo de forma a dar conta de fenômenos complexos, como o desenvolvimento de TS.

Pois, como observa a autora,

[Co-produção] é uma forma de interpretar e dar conta de fenômenos complexos, de forma a evitar as omissões estratégicas da maioria das outras abordagens nas ciências sociais.

(JASANOFF, 2003: 3)5Capturar esse movimento de co-produção, e não uma foto estática de uma configuração organizacional ou uma descrição de um equipamento, expõe o caráter sociotécnico do desenvolvimento de TS e suas possibilidades de empoderamento de grupos excluídos pela consolidação de coletivos engajados.Assim, o objetivo do quadro é possibilitar o entendimento do processo de co-produção sociotécnica da TS e da comunidade e fazer com que as alterações na configuração, tanto da TS quanto da comunidade, se tornem explícitas no decorrer do tempo.

Por fim, ele tem como objetivo abordar, em cada caso particular, a questão da aderência da TS à ES, compreendendo melhor a comunidadeà qual a TS deve ser aderente.



O Quadro4funciona como uma matriz que representa um fenômeno tridimensional com os eixos: temporal (momento), comunidade e TS.

Cada célula representa a interseção entre um momento temporal e a tecnologia ou a comunidade.

Nessa interseção estão dispostos os aspectos que devem ser observados para avaliar o desenvolvimento da TS e a evolução da configuração da comunidade.

A seguir, tomando como referência o eixo temporal, se explica como cada um dos seus quatro momentos (Histórico/estático, Em Construção, Resultado/Implicações, Potencial/Especulativo) se relaciona com os dois outros eixos (comunidade e TS).

Diferentemente do modo afirmativo como essa explicação é apresentada no Quadro, o texto que segue a ela se refere mediante perguntas-guia que podem orientar a observação do pesquisador.1) Momento Histórico/DescritivoO momento histórico/descritivo consiste em um espaço descritivo anterior à preocupação com o desenvolvimento da TS.

É essencialmente um espaço para observação e descrição do entorno sociotécnico, os processos sociohistóricos que incidem sobre a comunidade e dos quais ela faz parte.

É também o momento de descrição organizacional do grupo envolvido, suas atividades produtivas, sua composição, a configuração da propriedade dos meios de produção, os vínculos institucionais e sua história de formação.a) Dimensão ComunidadeComo ocorreu a construção sociohistóricado problema que emoldura o processo de AST? Como é a comunidade em que ele se insere? Qual a percepção do ator que declara o problema? Qual a nossa interpretação dos elementos sociotécnicos do problema e suas perspectivas de equacionamento?Como é o empreendimento ou local onde se desenvolveu a TS: a propriedade de produção, forma de gestão, divisão do excedente econômico, hierarquias e controles sociotécnicos? Como é a história de formação do grupo? Quais são suas atividades produtivas? Quais instituiçõeso empreendimento se relaciona? Do que depende sua sustentabilidade econômica?

b) Dimensão Tecnologia SocialComo era a tecnologia usada para atender a demanda antes do desenvolvimento da TS? Como ela funciona, quais são seus efeitos ambientais e sociais? Como ela foi comprada?Quais outras tecnologias são convencionalmente utilizadas para atender essas demandas da comunidade? Que efeitos elas têm em outros locais?2) Momento Durante/Em construçãoO momento durante/co-produção é o momento da TS em construção, nesse momento as duas perspectivas “tecnologia” e “comunidade” estão em intensa interação e muitas vezes não é possível delimitar onde termina uma e começa outra.

É nesse momento que ocorrem as controvérsias e negociações sobre o formato final da TS e sobre a própria comunidade que se dará em torno dela.a) ComunidadeQue atores estavam presentes em cada momento? Que saberes e práticas foram mobilizados no processo? Que atores internos e externos à comunidade participaram? Como eram as expectativas iniciais sobre o projeto? b) Tecnologia SocialComo foi o processo de desenvolvimento da TS? Que recursos (cognitivos, de poder econômico e político, etc.) foram empregados? Qual foi o papel do usuário final da TS? Quais as dificuldades encontradas duranteo processo? 3) Momento ImplicaçõesEsse momento é dedicado a um balanço dos resultados do desenvolvimento da TS e suas implicações, é essencialmente um espaço mais analítico.

Principalmente qual é a configuração final do artefato, como ele afeta o processo de trabalho do empreendimento e como ele é incorporado na comunidade.

Também quais dinâmicas de inclusão social e empoderamento o processo produziu e quais as implicações na dinâmica da comunidade onde a TS está inserida.

É o momento também de balanço dos processos de aprendizagem, das modalidades de AST mobilizadas e da configuração final da comunidade.



a) ComunidadeQuais os efeitos do desenvolvimento da TS para a organização do trabalho no empreendimento (participação, autogestão, controle, hierarquias)? Houve incorporação de novos conhecimentos (processo de aprendizagem)? Como a TS afeta a configuração da comunidade ao qual ela é destinada? Qual a configuração final da comunidade aderida à TS? Quais as dinâmicas de inclusão social foram geradas (empoderamento, participação, novas oportunidades, conscientização política)? Como o desenvolvimento da TS afeta a sustentabilidade econômica do empreendimento? E da comunidade ao redor?b) Tecnologia SocialComo é a configuração final do artefato desenvolvido? Quais são os saberes necessários para operá-lo? Quais modalidade de AST foram mobilizadas na produção do artefato? Quais novos processos ou produtos a TS permite? Quais são seus impactos ambientais? Qual sua licença de uso e distribuição (proprietária ou livre)? A TS proporcionou um adensamento na cadeia produtiva? Deu origem a uma nova cadeia? Houve mudança na posição dos usuários na cadeia?4) Momento Potencial/EspeculativoEsse momento consiste na perspectiva de reconhecimento das capacidades da TS frente a outras ES e ao mercado formal, assim como a relação do conhecimento produzido pela experiência e sua relação com o marco teórico da TS.

Os assuntos pertinentes são, as potenciais aplicações da TS a outros locais, o potencial de criar vínculosinstitucionais e a capacidade de disputar como sistema sociotécnico dominante.

E no plano teórico, os conflitos e aderências que a experiência estabelece com o marco analítico conceitual da TS e suas possíveis contribuições.a) ComunidadeQual o potencialda comunidade se integrar em cadeias produtivas da ES? Como a TS desempenha frente ao mercado formal? O aumento da escala é um problema? Como a comunidade pode tomar maior proveito da implantação da TS? O desenvolvimento dessa TS pode abrir portas para o desenvolvimento de outras TS? Quais vínculos institucionais ela poderia se beneficiar?

b) Tecnologia SocialQuais são suas possibilidades e condições de reaplicação? Quais as condições da TS disputar com o sistema dominante? Quais são as consonâncias da experiência analisada com o marco teórico da TS? Quais são as discordâncias da experiência frente ao marco teórico, que questões ela coloca? Qual a suficiência da metodológica na observação e análise da experiência?A divisão dos tempos e momentos como descrito acima, acompanhado das perguntas chaves oferece uma forma minimamente sistemática para que as dimensões das experiências de desenvolvimento de alternativas tecnológicas sejam observadas e analisadas de forma mais abrangente.

A divisão entre “tecnologia social” e “comunidade” é oportuna, pois sua recorrente insuficiência explicita as relações entre o domínio do “técnico” e do “social”, que é justamente a construção do funcionamento da TS e sua aderência à comunidade, que em última instância, é o processo que interessa.

Nesse sentido, o objetivo da divisão é ser o tempo todo questionada e desafiada e em sua insuficiência, registrar o movimento de co-produção da TS e da comunidade.1.4.Síntese do CapítuloEste capítulo se inicia com uma retrospectiva das diferentes definições e compreensões do conceito de Tecnologia Social.

O que fica claro é que as diferenças se referem a alguns aspectos pouco negociáveis em termos normativos.

Se, em Dagnino (2014), a TS é compreendida como a possibilidade de uma outra base cognitiva para a sociedade, que traz internalizados, valores diferentes dos valores capitalistas, preza pela inclusão social e pela propriedade coletiva dos meios de produção, a perspectiva da FBB compreende sua função mais como catálogo de soluções para problemas pontuais que, preferencialmente, podem ser reaplicados em diferentes situações.

Ainda tomando como referência essas que poder-se-iam considerar as duas visões extremas sobre o tema, outra diferença fundamental é que para a FBB a TS deve criar condições de trabalho para a comunidade onde ela for aplicada, na ideia de que caso as demandas materiais básicas de uma comunidade forem satisfeitas, seus membros podem conseguir se inserir na economia formal disputando um emprego.

Na compreensão de Dagnino (2014), a inclusão social contida na proposta da TS é “transportar” as atividades da economia informal, e futuramente, da economia formal, para a Economia Solidária, criando

cadeias e formas de vida que não precisem seguir a compulsão de acumulação da economia capitalista e onde o objetivo seja a produção de valores de uso e a seja a satisfação das necessidades humanas.



Posteriormente apresentei alguns insumos metodológicos apresentados em Dagnino (2014b; 2014c) e Costa et al(2013), onde são sugeridos instrumentos para melhorar a capacidade de análise e desenvolvimento de TS.

Da perspectiva apresentada, o fundamental é que o desenvolvimento da TS deve ser compreendido como um processo sociotécnico (AST), que envolve tanto a conformação do artefato em questãoe a própria comunidade que dele participa e que dele se irá diretamente beneficiar mediante seu uso.

Esse processo, de produção da aderência e do funcionamento da TS é o processo fundamental que deve ser compreendido para avançar, tanto com as proposiçõesteóricas, quanto com os requisitos para sua viabilização social e econômica.

Ao final, proponho um quadro de leitura sobre experiências de alternativas tecnológicas (principalmente TS), onde as dimensões tecnologia e comunidade são analisadas ao longo dotempo de desenvolvimento e implantação da TS.

A proposta da divisão em um domínio do “social” e um da “tecnologia”, sabidamente artificial, como comentado, cumpre com o propósito de explicitar, nas dificuldades de classificação de uma dada questão num dosdois domínios, o seu entrelaçamento e o caráter sociotécnico do desenvolvimento de TS.

Em outras palavras, a divisão entre os dois domínios serve justamente para ser desrespeitada e, assim, explicitar o processo de co-produção entre a TS e a comunidade.

Esse quadro de leitura, que, ao mesmo tempo, sintetiza e é resultado do entrelaçamento das contribuições dos autores que resenhei, possui uma característica adicional que merece ser destacada.

Trata-se do fato de ele ter sido produzido em função do esforçoanalítico de descrever e interpretar os resultados da pesquisa de campo que ia sendo realizada, e nesse sentido é essencialmente uma ferramenta heurística.

Esse esforço, como era de se esperar, terminou levando a uma formulação até certo ponto original.

Aqual, dado a incipiência do campo em que se situam essas análises, pode ser útil para analisar experiências similares.O capítulo que segue apresenta os resultados da pesquisa de campo realizada sobre a experiência da Fabriqueta de Software no desenvolvimento e no uso do Sistema de Georreferenciamento e Monitoramento de Nascentes (SGMN) tendo como referência o quadro de leitura acima referido.

Essa opção, em que pese a sua relativa artificialidade

decorrente do mesmo ter sido produzido em paralelo à realização da pesquisa de campo, se deve, justamente, à intenção de mostrar como esse instrumento pode ser usado para analisar experiências similares.

O que, há que ressaltar, é um dos objetivos desta dissertação.





Nesse capítulo apresento a primeira linha do Quadro de Leitura Sociotécnica (QUADRO 4), o momento histórico descritivo.

O objetivo é descrever o entorno sociotécnico anterior ao desenvolvimento da TS, especialmente os processos socio-históricos que compõem a formulação das demandas e capacidades da comunidade, bem como os processos de formação dessa própria comunidade, para que fique claro as contingências e os condicionantes que influenciaram as decisões sociotécnicas no posterior processo desenvolvimento do artefato.

Como observa Dagnino, Brandão e Novaes (2010), compreender a tecnologia de forma processual -e a TScomo resultado do processo de AST-é compreender que existe uma série de processos anteriores e posteriores ao desenvolvimento do artefato em si, que são tão constitutivo do artefato quanto os processos técnicos de sua construção.

Esses processos, que extrapolam a construção técnica do artefato, cumprem o papel de conformar o entorno sociotécnico e são componentes explicativos e analíticos para compreender o porquê de um artefato funcionar ounão de acordo com o esperado.

Em última análise, compreender esses processos é uma forma de tentar conceber ferramentas estratégicas para garantir caminhos mais certeiros de AST (DAGNINO, 2014c: 188).Nesse sentido, como observa Costa e Abreu (2013: 167), o engajamento da comunidade em torno de uma tecnologia social é fundamental para o seu funcionamento.

A forma como a comunidade é mobilizada, as lideranças que se formam e os eventuais conflitos que ocorrem ao longo desse processo são fundamentais para compreender os ajustes necessários a própria solução proposta e são insumos para conceber outras estratégias de engajamento para o avanço da TS e da ES.A seguir,será apresentado a organização que desenvolveu o artefato em questão, como ela opera internamente, seu processo de trabalho e suas práticas cotidianas, com o objetivo de mostrar a multiplicidade de sua atuação, como ela manifesta os valores da economia solidária e suas contradições quando ela negocia seus valores com as necessidades de sobrevivência no mercado.



A História de AraçuaíA história da cidade de Araçuaí já foi contada em diversas ocasiões e em diversas mídias (PAIXÃO, 2004; SANTOS, 2012; ALMEIDA, 2013), mas é importante construir aqui uma narrativa que contribua para localizar o leitor nessa região em que a ONG atua -o médio Vale do Jequitinhonha.O município de Araçuaí está localizado no Nordeste do Estado de Minas Gerais à 678km da capital mineira Belo Horizonte e conta com uma população de cerca de 37 mil habitantes e IDHM 0,663 (IBGE, 2016a).

A cidade se situa na região do Médio Jequitinhonha, bem no centro do Vale do Jequitinhonha, a porção mais seca do Vale, muito ao sul da umidade do Sul da Bahia e muito ao norte do desenvolvimento industrial da região mais próxima à capital Belo Horizonte.

Climaticamente, a cidade é classificada entre o semiárido e o úmido onde a temperatura varia sempre entre 20-40 graus, com dias muito quentes e noites frescas.

Seu potencial pluviométrico varia de 500mm e 1600mm ao longo do ano, porém as chuvas são concentradas no período entre dezembro e março, no restante do ano raramente chove, promovendo um déficit hídrico na região de 600-700mm (REIS e MELLO, 2006).

Os períodos sem chuva que duram em média 6 meses são chamados de estiagem e vez ou outra, esses períodos de estiagem se prolongam uns nos outros chegando a dois ou três anos com chuvas ainda menos frequentes, esses períodos são chamados de secas6.Assim como muitas cidades, a história de Araçuaí está intimamente ligada com a história de seus rios, o caudaloso Rio Araçuaí -afluente do Jequitinhonha -e o instável Ribeirão do Calhau (ou Calhauzinho).

Desde o uso do Rio Araçuaí como rota de comércio entre o litoralda Bahia e o interior de Minas, até a destruição do antigo centro da cidade pelo ribeirão, são as águas -e sua falta -que contam as idas e vindas da história da cidade.A história começa na antiga Aldeia da Barra do Pontal no início do século XIX, atualItira, aldeia localizada à jusante da cidade de Araçuaí, na confluência entre o Rio Araçuaí com o Jequitinhonha.

O Rio Jequitinhonha era a via de comércio que trazia bens de consumo do litoral baiano para o interior de Minas e levava os produtos da regiãode volta para o litoral para serem comercializados (especialmente o algodão).

Com terras férteis, dois grandes rios, temperatura amena e fácil acesso às canoas, a tal aldeia era um lugar promissor para abrigar uma cidade.

Tendo em vista esse potencial, o Padre Carlos Pereira de Moura, fundador da 6Existe uma vasta literatura sobre as secas no semiárido brasileiro, tanto relacionados à pesquisa quanto a literatura.

Para mais informações ver: Cunha (1902), Bartlet (2003), Medeiros (2014).



aldeia, decidiu plantar as bases para a consolidação de uma futura cidade, de acordo com os bons costumes cristãos.

Como medida para garantir esse futuro, proibiu toda e qualquer bebida alcóolica na aldeia e expulsou de lá todas as meretrizes.

Desamparadas, essas mulheres subiram o curso do Araçuaí em busca de abrigo e foram recebidas na Fazenda Boa-Vista da Barra do Calhau(JARDIM, 1998).Em 1817 a proprietária da fazenda, senhora Luciana Teixeira que, com a chegada das mulheres, começou ali a Casa Boa Vista.

De acordo com alguns moradores da cidade e como observado em Almeida (2013), dizem que essa mulher era prostituta na Bahia e teria saído de lá em busca de algo mais rentável, trazendo com ela algumas mulheres para criar um bordel na região próxima ao encontro do Araçuaí com o Jequitinhonha devido ao crescente movimento de canoeiros e mercadores.

Sobre a senhora Luciana Teixeira, existe pouco material confiável da época, mas o relato do naturalista francês Auguste Saint-Hilaire de sua viagem em 1817 (MARTINS, 2008), ajuda a caracterizar essa senhora de valores e visões muito avançadas e progressistas para sua época.Pousei na casa de Boa Vista, talvez a mais agradavelmente situada de todas as que até este momentovira.

É construída sobre o cume de uma colina isolada em baixo da qual deslizam com lentidão as águas límpidas do Araçuaí, rio mais ou menos da largura do Loiret.

[...] Boa Vista era a residência de uma velha mulata chamada Luciana Teixeira.

Tendo sabido que eu viajava com passaporte do governo, essa boa mulher cumulou-me de atenções, e, pondo-se quase de joelhos, quis abraçar-me as coxas, compreende-se bem que recusei semelhante polidez.

(PAIXÃO, 2004: 23-24)Sobre as atividades da casa, o naturalista francês conta que durante o dia as mulheres da Casa da Boa Vista se dedicavam ao bordado e a tecelagem, mas durante a noite a casa se transformava em um local de diversão, atraindo grande quantidade de mercadores e canoeiros.

Rapidamente o lugar começou a atrair os canoeiros que, ao invés de ficarem na Aldeia do Pontal de Padre Carlos, desprovidos de bebidas e bordéis, subiam um pouco mais o curso do rio e aportavam na Fazenda Boa-Vista para serem recebidos por dona Luciana Teixeira(PAIXÃO, 2004).Aqui recorro novamente a história oral, ao perceber a crescente movimentação na fazenda de Luciana Teixeira, loteou o terreno7ao redor do rio Araçuaí e em 1830 foi fundado ali o Arraial do Calhau -calhau é o nome dado às pedras arredondadas e escuras que aparecem em grande quantidade no rio.

O local foi ganhando cada vez mais importância 7Sobre as dinâmicas de transmissão de terras no Jequitinhonha, ver Teixeira (2008).



econômica devido ao grande número de canoeiros que vinham da Bahia para o interior do Vale trazendo toda sorte de mercadorias, e em 1857 foi elevado a distrito e criada a Vila deArassuay.E posteriormente, Cidade de Araçuaí em 1871 (Prefeitura Municipal de Araçuaí, 2016; IBGE, 2016b; REIS e MELLO, 2006; ALMEIDA, 2012).O crescimento econômico da cidade se deu principalmente pela atividade dos canoeiros mercadores que traziam sal e ferramentas do litoral da Bahia e voltavam com algodão e pedras preciosas, como observa Martins (2008), e teve seu auge em 1911 onde a cidade se viu como a capital do Nordeste de Minas, sendo o quinto município em extensão com 23.298 km2, atrás apenas deJanuária, Paracatu, Teófilo Otoni e Montes Claros.

E o quarto em número de comerciantes dos municípios de Minas Gerais, atrás apenas de Ponte Nova (331), Muriaé (302) e Belo Horizonte (289), Araçuaí tinha 261 comerciantes (Prefeitura Municipal de Araçuaí,2016).

Como observa Jardim (2008) em:As canoas eram o único meio de transporte, a não ser o lombo do cavalo.

E Araçuaí era a metrópole para onde convergiam os que queriam fazer negócios.

Era o polo cultural do sertão.

(JARDIM, 1998: 114)O que sobrou deDona Luciana Teixeira na cidade foi ouso de seu nome em uma escola, emum hospital para mulheres eemuma singela rua na periferia, sem calçamento nem saneamento básico, como observa Santos (2012).

A história de dona Luciana Teixeira é muito difundida nacidade e tem profundas implicações para a trajetória política das mulheres na cidade e na região e constitui, em termos, o fundamento para a vinda do CPCD para Araçuaí posteriormente.

Sobre o papel de Luciana Teixeira, Santos (2012) observa:[...]podemos registrar que outras mulheres vieram fazer jus a esta grande causa da Luciana Teixeira, quer dizer, marcar a identidade do município pelo gesto do acolhimento.

A sua postura de acolher as mulheres expulsas da aldeia foi objeto de crítica pelos padrões estabelecidos da sua época, porém, temos que ressaltar que, para os dias atuais, sobretudo, nas políticas públicas, é necessário termos esta sensibilidade por aqueles que se encontram vulneráveis.

Neste sentido, recorrer a Luciana Teixeira, considerada fundadora do município é também tê-la como referência de valores sociais para nossas ações políticas.

(SANTOS, 2012: 16)Apesar de toda a história de acolhimento e desenvolvimento econômico de Araçuaí entre os séculos XIX e XX devido ao comércio e a mineração, principalmente pelo algodão e garimpo de pedras coradas, sua importância diminui drasticamente com o fim da navegação no Jequitinhonha no início do século XX e a diminuição da exploração de pedras no Vale(ALMEIDA, 2013; REIS e MELLO, 2006).

Toda essa reconfiguração coloca esse antigo

centro no esquecimento e seu ciclo é encerrado, também simbolicamente, com a grande enchente de 1971 do ribeirão Calhauzinho que alaga completamente o centro antigo da cidade e transforma o que antes era um importante centro comercial da região em escombros e ruínas que marcam até hoje, com sua presença fantasmagórica, o centro velho da cidade.A falta de infraestrutura e o modelo de desenvolvimento pautado na degradação ambiental(tanto pela mineração quanto pelo agronegócio)contribuírampara o desgaste dos recursos naturais da região, especialmente dos recursos hídricos, para a aumento da desigualdade e para a estagnação econômica, como nos mostra Pereira, Almeida e Leite (2003) e Martins (2008) e Guerrero (2009).

Aqui vale lembrar que o significado de Araçuaí é Rio das Araras Grandes “Ara=ave açu=grande i=rio” (JARDIM, 1998: 105), o que significa que as áreas nas margens dos rios eram muito mais caracterizadas pela Mata Atlântica, com muitas árvores frutíferas capazes de alimentar essa grande população de araras, do que pela caatinga, como observa Martins (2008) por meio dos relatos dos viajantes do século XIX e XX.

Hoje, porém, não existem mais araras na cidade, sendo a única exceção a escultura de concreto suspensa de 2m de altura de uma arara azul na entrada da cidade.Com a mudança da relevânciaeconômicado local, o que era um grande centro comercial tornou-se um local dispersor de mão de obra, devido à faltade oportunidade de trabalho.

Como observa Almeida (2013), o que acaba se consolidando como perspectiva de oportunidade de trabalho é a migração dos homens para o corte de cana nos estados de São Paulo, Rio de Janeiro e Goiás.

E como observa Rocha (2015), os que saíam para o corte passavam longos períodos fora da cidade, e muitos nunca voltaram.

Essa ausência teve impacto profundo na dinâmica familiar local, colocando a mulher no centro da responsabilidade de produção de recursos para a família e deixando as crianças sozinhas em casa, criando uma cidade de mulheres de dupla ou tripla jornada e crianças dispersas pela cidade, aspecto o qual explica o foco em educação infantil do CPCD em sua atuação na cidade.Como ficará mais claro posteriormente, a história do CPCD em Araçuaí está intimamente ligada a essa problemática: o que fazer com essas crianças desamparadas, sem escola e sem perspectiva de vida e trabalho? Para responder como a ONG trabalha essa problemática, apresento brevemente a história da instituição e como ela acabou se instalando em Araçuaí.



.2.O Centro Popular de Cultura e DesenvolvimentoAntes de começar essa breve seção, vale destacar aqui que os dados obtidos para a reconstituição histórica da instituição são provenientes de diversas fontes.

Além de material do material disponívelem Almeida (2013) e Borges etal(2014), foram utilizados materiais fornecidos pela própria ONG, como folders, folhetos, materiais de propaganda, livros, cartilhas e o site oficial, todos referenciados ao longodo texto.

Foram utilizadas também entrevistas realizadascom membros da ONG durante o trabalho decampoe palestras realizadaspelo fundador da ONG em diversas ocasiões, especialmente em Campinas 2015, por ocasião da Semana da Educação, ao qual participei e conversei com Tião Rocha sobre o CPCD.

De forma geral, ahistória da ONG se revela como um discurso institucional bastante sólido, proferido repetidas vezes por diversos membroda ONGdurante minha visita de campo.

Não me cabe atestar a veracidade das motivações para a criação da organização ou a espontaneidade de algumas iniciativas, o que é interessante de ser observado é justamente essa fluência da história na falae nas práticasde cada membro entrevistado, e como ela é fundante na transmissão dos valores institucionais tanto para os novos membros e educadores da ONG quanto para os que querem conhecer o trabalho da organização.2.2.1.A origem do Centro Popular de Cultura e DesenvolvimentoO CPCD é uma ONG sem fins lucrativos com qualificação de OSCIP, que tem como proposta “promover o Desenvolvimento Comunitário Sustentável por meio da educação popular, tendo a cultura local como matéria prima pedagógica e institucional, promovendo o desenvolvimento sustentado, o resgate da autoestima e o incentivo à criatividade dos sujeitos” (CPCD, 2016).

A organização destina suas atividades, preferencialmente, a comunidades e municípios brasileiros com até 50 mil habitantes e atualmente ela atua através de diversos projetos nos estados do Maranhão, Minas Gerais, São Paulo e Rio de Janeiro e um projeto em Iquito (Peru)(CPCD, 2016).O CPCD não surgiuem Araçuaí, foi apenas depois de 10 anos de existência e de trabalhos em outros locais, que a ONG começou suas atividades na cidade.O CPCD foi fundado em Belo Horizonte/MG, mas teve seu início em Curvelo/MG, em 1984 por iniciativa do antropólogo, folclorista e educador Tião Rocha.

De acordo com Rocha (2015), a iniciativa surgiu por um descontentamento sobre sua posição de professor, após 28 anos de carreira

acadêmica.

De acordo com o mesmo “tinha cansado de ser professor, eu queria ser educador, queria aprender” (ROCHA, 2015).

A oposição professor/educador e ensinagem/aprendizagem reaparece diversas vezes na história e nas práticas das atividades que o CPCD realiza, esses dois personagens/conceito/estereótipo do professor e do educador são entendidos pelos membros da ONG de forma bastante homogênea como: 1) o professor: aquele que ensina por meio de uma relação desigual de poder, forçando um processo de absorção de conteúdo; e 2) o educador: aquele que aprende e constrói conhecimento por meio de uma relação dialógica com o outro, construindo conhecimento de forma localizada por meio de uma relação de poder paritária.

A proposta de Tião Rocha e do CPCD, do papel do educador e da educação, se aproxima bastante das concepções freireanas, onde o diálogo é fundamento do educar e a educação um ato político, como observa Almeida (2012) ao fazer uma análise sobre a pedagogia do CPCD em relação à obra de Paulo Freire8.Ao perceber que ele não teria espaço na universidade para se tornar um “educador” como gostaria, Tião Rocha abandona a Universidade Federal de Ouro Preto -UFOP.

Em 1984, Tião é convidado a assumir o Departamento de Educação da Prefeitura de Curvelo (ROCHA, 2003; Borges et al, 2014).

Em Curvelo, ele se depara com um cenário comum nas regiões um pouco mais distantes dos centros urbanos, uma infraestrutura escolar precária.

Em vista da situação, Tião convoca a comunidade por meio de um programa de rádio para tentar resolver a situação.

A questão colocada por ele é fundante no CPCD “é possível fazer educação sem escola? ”,pois o município não dispunha dos recursos para construir mais escolas.Logo após o apelo feito no rádio, Tião Rocha consegue consolidar um grupo de 26 pessoas da cidade, entre pais de alunos e professores, interessadas em construir uma alternativa de educação para as crianças e desse grupo de trabalho são criados os 15 não-objetivos(Quadro 4)que representam o entendimento do grupo sobre tudo que era ruim na escola convencional e que não deveria ser reproduzido nesta nova proposta.8

Os 15 não-objetivoscriados pelo grupo de Curvelo é o que balizaria as ações na cidade e, posteriormente, todas as ações do CPCD.

Eles foram criados em contraposição às práticas da escola convencional e fica bastante claro, a partir deles, que a intenção do grupo é procurar formas alternativas de educação.

A partir dessas perguntas e dos 15 não-objetivoso grupo cria no ano seguinte (1984) sua primeira iniciativa, o projeto “Sementinha” com apoio da Fundação Kelloggs, que atendia crianças de 4 a 6 anos de idade.

O projeto visava o desenvolvimento da identidade e da autoestima das crianças, da consciência corporal, da higiene e da saúde, “fazendo de cada criança, cidadã, de cada comunidade uma escola, de cada casa e rua uma sala de aula e de cada participante na roda um educador” (CPCD, 2002).



A gestão de Tião Rocha no Departamento de Educação durou pouco mais de um ano, porém foi suficiente para consolidar o projeto como referência na cidade.

O projeto Sementinha funcionou em Curvelo de 1984 até o 1994, variando ao longo dos anos na quantidade e na faixa etária das crianças que participavam do programa.

Foi das experimentações desse projeto que grande parte das pedagogias e “tecnologias sociais” do CPCD foram consolidadas.Como o aprendizado no projeto Sementinha, foi criado o projeto Ser-Criança em 1994, que opera de forma semelhante, mas tem como público crianças e jovens de 04-16 anos e como fundamento a “educação pelo brinquedo”.

O sucesso do projeto foi imediato, sendo premiado em 1995 pelo Prêmio Fundação Odebrecht / UNICEF e 1° colocado entre 406 concorrentes no 1° Prêmio Itaú-Unicef na categoria “Educação e Participação”(CPCD, 2016).O período entre 1984 e 1996 foram fundamentais para compor a equipe do CPCD.

Muitas das crianças que participaram do projeto, hoje são funcionários da ONG, tanto como educadores quanto nas seções administrativas.

E foi desse período que foram sistematizadas grande parte das pedagogias e tecnologias que a ONG emprega em diversos dos seus projetos.

Em 1996 foi criado em Curvelo a primeira Fabriqueta da Cooperativa Dedo de Gente, que tinha como objetivo empregar jovens que completavam o ciclo do Ser-Criança.As Fabriquetas são “unidades de produção solidária” que compõem a Cooperativa Dedo de Gente.

Elas funcionam como um espaço de educação profissionalizante e alternativa de trabalho e renda para jovens de 16-21 anos em áreas como: serralheria, carpintaria, fabricação de doces, desenvolvimento de software, produção de audiovisual.

Atualmente a Dedo de Gente atende cerca de cemjovens nos municípios de Curvelo/MG, Raposos/MG e Araçuaí/MG e desde seu início tem uma grande parceria com a Petrobras, que concede bolsas para os jovens no início do treinamento.Da criação do projeto em Curvelo, é importante observar como ocorreu o fluxo das atividades, pois é um processo que se repete na ONG:em primeiro,aassociação da figura de Tião Rocha como membro do poder público, neste caso como chefe do Departamento de Educação da Prefeitura de Curvelo; em segundo, o movimento de tomar um problema da esfera pública, no caso a educação infantil, e oferecer uma solução não pública, por meio de uma ONG; e em terceiro, aproveitar-sede recursos privados, especialmente de recursos de responsabilidade social empresarial, para implementação dessas iniciativas.

Ao final o que se

mostra é uma translação do problema que deveria ser solucionado pela via pública em um problema da iniciativa privada, mesmo que no formato de ONGs.2.2.2.A história do CPCD em AraçuaíO CPCD iniciou suas atividades em Araçuaí em 1998 em uma história que, assim como a origem da própria cidade, também é fruto do protagonismo de uma mulher.

Em 1998 a política local em Araçuaí sofreu uma grande reviravolta: a cidade tivera 16 prefeitos em sua história até aquele momento, todos homens provenientes das famílias tradicionais da região, porém, em 1997, a cidade viu Maria do Carmo Ferreira da Silva (Cacá), mulher negra e graduada na UFOP, não vinculada as famílias tradicionais, ser eleita prefeita de Araçuaí pelo Partido dos Trabalhadores -PT(SANTOS, 2012).

Esse mandato criou o espaço institucional necessário para a implantação do CPCD em Araçuaí.

A história que os membros da ONG contam sobre a vinda do CPCD aAraçuaí funciona como uma anedota sobre os preconceitos e desinformação sobre a região do Valedo Jequitinhonhacomo um todo e ilustra a visão filantropista das políticas de responsabilidade social empresarial, sobre o que o CPCD se diz contra.

Segundo Rocha (2015), em 1998, uma assistente social da Natura assistiu a uma reportagem sobre a miséria no Vale do Jequitinhonha, como ele era seco e desolado, e como sua população era miserável e carente.

Comovida pela situação -resultado de uma sistemática construção do Vale do Jequitinhonha como “vale da miséria” como observa Guerrero (2009) -elapromoveu uma grande doação de cestas básicas pela Natura para uma das comunidades em Araçuaí.

Porém, após uma visita dos agentes da Natura no local, ficou claro que a tal comunidade não precisava de tantas cestas básicas assim e a prefeitura não dispunha de uma infraestrutura logística para a distribuição dessas cestas.

O que foi negociado pela Prefeita com a Natura é que o valor das cestas básicas seria convertido em recurso para o desenvolvimento de um projeto social e educativo na cidade.

A Prefeita Cacá, fez prontamente um convite a Tião Rocha para que desenvolvesse um projeto em Araçuaí, elaera ex-aluna de Tião Rocha quando eleainda era professor na UFOP.O projeto criado em Araçuaí em 1998 foi o projeto Sementinha e teria financiamento da Natura por três anos.

A parceria com a prefeitura levou o projeto para todas as quatro creches urbanas da cidade e em diversas creches da zona rural, de forma que quase a

totalidade das creches do município tinham profissionais da prefeitura cedidos e treinados pelo CPCD para atuar com as metodologias da ONG(BORGES et al, 2014).De acordo com Guerra (2005), no início do projeto em 1998, mais de 200 profissionais da região se inscreveram para participar da iniciativa.

Dos inscritos, 40 foram selecionados e entrevistados por Tião Rocha e vinte escolhidos para participar de uma formação de quatro semanas, que cobriria a metodologia e as tecnologias desenvolvidas pelo CPCD nos últimos 21 anos de existência.

Da formação,restaram doze profissionais que seriam responsáveis pelo projeto, que além de funcionar até hoje na cidade com quase 120 crianças divididas entre manhã e tarde, chegou a ser implementado em 12 municípios nos Estados de MG, BA, SP e em Moçambique(CPCD, 2002).Em 2003 no segundo mandato de Cacá como prefeita da cidade, também pelo PT, Tião Rocha foi convidado aassumir a Secretaria de Educação do Município, seria a segunda vez que o presidente da ONG seria também um funcionário da prefeitura.

Tião aceitou, mas enfatiza em diversas entrevistas que quem assumiu a secretaria foi o CPCD enquanto organização e não ele enquanto indivíduo, pois ele era apenas uma interface entre a ONG e a prefeitura, como ele descreve na entrevista em Guerra (2005), “Isto é algo único, inédito.

Pela primeira vez na história brasileira, uma ONG se tornou Secretária de Educação” (ROCHA, 2005 em Guerra, 2005: 12).

A situação que a ONG encontrou foi preocupante, de acordo com o Sistema Mineiro de Avaliação Pública (SIMAVE) e do Centro de Políticas Públicas e Avaliação da Educação (CAED) 75% dos alunosda 4° série e 96,5% dos alunos da 8° série do Ensino Fundamental das escolas públicas de Araçuaí apresentavam desempenho escolar insuficiente e a maioria se encontrava em estado crítico, isto é, após oito anos de escola, a maioria dos alunos não eram capazes de ler e escrever, e fazer a quatro operações aritméticas básicas sem dificuldade.

Deste cenário surgiu o projeto UTI Educacional, que tinha como propósito “salvar essas crianças da morte cidadã causada pelo analfabetismo precoce” (GUERRA, 2005: 13).Oprojeto da UTI educacional foi executado por meio de uma parceria com a Petrobras Distribuidora e a estratégia foi a formação de agentes comunitários para contribuir com ações educativas em complemento às atividades escolares convencionais.

Ao longo do projeto foram formados mais de 120 agentes comunitários só nas comunidades rurais, onde os índices de alfabetização eram mais baixos.

Ao final do projeto foi criado o banco de livros para a troca de títulos, a biblioteca foi revitalizada, seus horários foramestendidos e

concentrava quase 2000 leitores regulares credenciados.

Sobre esse período da biblioteca, diversos membros da ONG e da Fabriqueta de Softwaredizem que esse foi, para eles, o primeiro momento de contato com livros e com a leitura.

O CPCD ficou um ano e cinco meses na secretaria da Educação de Araçuaí e de acordo com o Relatório Social da Petrobras Distribuidora, com dados apresentados em Guerra (2005), os resultados foram bastante expressivos9.

Apesar dos dados dos resultados serem bastante questionáveis, uma vez que foi a própria ONG que fez a coleta e análise, é interessante observar que a publicização de resultados projetou a ONG de forma considerável, facilitando as futuras parcerias e estabelecendo um longo vínculo com a Petrobras.Novamente sobre a atuação do CPCD na Secretaria de Educação, Tião Rocha afirma:[O CPCD assumiu a secretaria de Educação] sem ônus algum para os cofres municipais.

Ao assumir essa função, o CPCD colocou à disposição da cidade sua equipe e sua infraestrutura.

Durante os 17 meses em que eu fui .org e .gov não usei uma única vez o carro ou o telefone da secretaria ou sequer uma folha de papel.

Tudo o que precisamos foi garantido pelo CPCD.

Em outras palavras, demos lucro para a administração municipal.

(ROCHA, 2005 em GUERRA, 2005: 17).

Depois do final do segundo mandato de Cacá em 2004, os outros prefeitos não mantiveram o apoio às iniciativas doCPCD, o que deixa claro a relação conflituosa da administração da Cacáe da ONG para com a classe política da cidade.

Essa relação conflituosa que se estabeleceu entre o CPCD e a prefeitura de Araçuaí se reflete até hoje nas poucas parcerias existentes e nas falas dos membros da ONG que, quando indagadossobre o assunto, repetem que a ONG aprendeu a ser independente da prefeitura, como fica claro na fala do Coordenador da Fabriqueta de Software: [A]prendemos que não precisamos da prefeitura para quase nada, aprendemos a ser independentes, é claro que com a ajuda deles váriascoisas iam ser mais fáceis, mas a gente não pode ficar dependendo.

Aprendemos que se a gente tiver vontade a gente vai e faz.

(Entrevistacom M.,coordenador da Fabriqueta de Software, 2016).

Aqui, novamente a forma de operação do CPCD reaparece,a centralidade da figura de Tião Rocha,iniciando suas atividades por meio de uma forte ligação com a prefeitura municipal e aos poucos substituindo essa ligação pelo vínculo com a ONG conforme o 9Sobre o nível de alfabetização, da 4° série que apresentava 25% dos alunos no nível suficiente, 19% insuficiente e 56% crítico, se tornou 41% suficiente, 45% insuficiente e apenas 14% crítico.

Na 8° série, os 3,3% suficientes, 41% insuficientes e 55,7% críticos, saltaram para 64% suficiente, 26% insuficiente e 10% crítico.

Fonte: Guerra (2005)

financiamento público para o desenvolvimento das atividades vai sendo substituídas por recursos da iniciativa privada.

Apesar do descontentamento da organização com a política local, existe um esforço da ONG em inserir um de seus membros que foi criança (que fez parte de todo o ciclo de formação dentro da ONG desde o ser-criança até o trabalho nas fabriquetas) na prefeitura com algum cargo na secretaria de educação, para tentar voltar a articular as demandas da ONG e da cidade.Em 2005 O CPCD criou o projeto Araçuaí Sustentável: Arassussa, em conjunto com 13 organizações do segundo e terceiro setor articulados por meio da Fundação Avina.

O projeto tinha como objetivo integrar as diversas ações promovidas pela ONG na cidade em uma plataforma única com o objetivo de promover a “mudança social na cidade, atuando por quatro frentes: o empoderamento comunitário, o compromisso ambiental, a satisfação econômica e os valores éticos, humanos e culturais” (CPCD, 2006; CPCD, 2016).

O projeto funciona como um “guarda-chuva” para os projetos Ser-Criança, Cooperativa Dedo de Gente e o Sítio Maravilha, integrando-os e facilitando a circulação de recursos.

Inicialmente a instituição parceira foi a Petrobras Distribuidora em 2005, mas hoje a maior parceria é pelo Programa Petrobras Socioambiental e pela Fundação Itaú Social.



Como é possível observar na Quadro 5, a história da ONG deixa claro algumas estratégias e características que são fundamentais para compreender os mecanismos de funcionamento da organização.

A participação da ONG no poder público de forma direta, tanto em Curvelo quanto em Araçuaí mostra a fragilidade da relação da organização com as prefeituras dos municípios onde atua, uma vez que a parceria só existe enquanto os interesses da ONG são representados diretamente na prefeitura, por meio da figura de Tião Rocha.

A participação popular na elaboração dos projetos é outro aspecto que se apresenta em apenas alguns momentos, como na criação do primeiro projeto.

A estratégia de inserir a comunidade em projetos já desenhados de acordo com as linhas de financiamento e oportunidades de parcerias, como o Arassussa e a UTI Educacional, parece mais recorrente do que a criação de projetos em conjunto com a comunidade.

Outro fator sempre presente na ONG é a intensa relação com parceiros privados, situação comum das ONGs de forma geral, especialmente a relaçãoduradoura com a Petrobras, Fundação Avina e a Natura, que viabilizam os projetos sociais que a ONG

desenvolve.

Sobre essa dependência de financiamento, o principal objetivo da ONG para o ano de 2016 e 2017 é conseguir a sustentabilidade financeira da Cooperativa Dedo de Gente, que hoje tem cerca de 40% de seus gastos pagos por meio de venda dos produtos e 60% pagas por meio de parcerias, especialmente as bolsas para os ingressantes das Fabriquetas.A ONG sobrevive principalmente por meio de recursos de editais e parcerias com empresas privadas.

Nesse sentido,a capacidade do CPCD de angariar recursos para suas atividades e projetos é diretamente proporcional a sua capacidade de produzir relatório e projetos condizentes com as exigências de cada edital ou parceria.

Essa percepção é largamente difundida no CPCD, e eladedica grande parte dos seus esforços em produzir formas de trabalho que sejam passíveis de serem atestadas e transformadas em relatórios de prestação de contas.

Como ficará claro mais adiante, esse aspecto do CPCD, de transformar tudo que é feito em relatórios é uma capacidade largamente difundida entre os membros da ONG, desde os principiantes atéos educadores mais antigos.

Juntamente com essa habilidade, os membros também são treinados e incentivados a produzirem projetos para editais de financiamento, apesar da capacidade de produzir projetos esteja muito mais concentrada, quali e quantitativamente, na sede administrativa do CPCD em Belo Horizonte.2.3.Os Projetos em AraçuaíOs projetos que operamhoje em Araçuaí são diversos e estão todos ligados a plataforma Arassussa.

A seguir, listo cada um deles, aponto uma breve descrição e seus atuais patrocinadores.●O projeto Ser-CriançaO Ser-Criança foi criado em 1998 e hoje atende crianças de 4 a 16 anosno contraturno escolar com ações educativas pautadas na educação pelo brinquedo e no desenvolvimento da autonomia, abordando temas que integram tanto os conteúdos do currículo formal quanto o desenvolvimento de valores humanos e respeito à natureza(CPCD, 2002; CPCD, 2016).

Atualmente o projeto atende cerca de 120 crianças distribuídas nos períodos da manhã e da tarde, o projeto conta com nove funcionários diretos do CPCD, sete educadora e duas cozinheiras.

O projeto conta com as parcerias da FundaçãoItaú Social e da Petrobras por meio do Programa Petrobras Socioambiental.



●As FabriquetasSão unidades de produção solidária e centros de produção de tecnologias populares que visam o fortalecimento da renda familiar(CPCD, 2016).

São espaços de educaçãoprofissionalizante para jovens de 16 a 21 anos e começaram a ser criadas em 1996 como forma de continuar a formação das crianças que terminavam o ciclo do Ser-Criança, criando oportunidade de formação profissional e alternativa de trabalho e renda para osjovens da região.

As Fabriquetas operam em Curvelo/MG, Raposos/MG e Araçuaí/MG e hoje são divididas em três categorias, as Fabriquetas de Artesanato, a Fabriqueta de Software e as Fabriquetas de Cultura.●Fabriquetas de ArtesanatoAs Fabriquetas de Artesanato foram as primeiras a serem criadas e desenvolvem as atividades de: 1) Serralheria, com a produção de peças em aço e sucatas; 2) Marcenaria, com a produção de móveis rústicos; 3) Doces e geleias, utilizando insumos regionais; 4) Cartonagem, responsável pela produção das embalagens usadas nas lojas e 5) Tinta de terra, com a produção de cartões e tintas feitas com técnicas e materiais tradicionais da região(CPCD, 2016).●Fabriqueta de SoftwareA Fabriqueta de Software atende as demandas de sistemas de informação, sites e materiais gráficos do CPCD e de clientes da região.

Hoje, os principais projetos do grupo são: a adaptação dos jogos educativos utilizados no projeto “Ser Criança” para aplicativos em smartphonese tabletsem parceria com a COPPE/UFRJ.

O maior cliente da Fabriqueta de Software continua sendo o próprio CPCD, que contrata o grupo para a produção de materiais e sistemas para grande parte dos projetos que desenvolve.

●Fabriquetas de CulturaDesta categoria fazem parte duas Fabriquetas: 1) A Fabriqueta Cinema Meninos de Araçuaí, criada em 2007, é um grupo para a produção de material audiovisual que produz, principalmente, material sobre as histórias e temas da região do Vale do Jequitinhonha e presta serviço para empresas locais.

O grupo possui uma sala de cinema de 150 lugares completamente equipada, resultado de um “orçamento participativo” realizado com jovens da cidade para criação de um ponto de cultura.

A obra do cinema foi executada por meio de uma parceria com a Petrobras e com o MINC, pormeio do Programa Pontos de Cultura(GUERRA, 2005; CPCD, 2016).

) A Fabriqueta de Turismo é um projeto criado no final de

e ainda está em fase de testes, mas é basicamente uma forma de capitalizar as diversas visitas que a ONG recebe.

Ela foi criada devido a crescente procura de pessoas em conhecer as experiências da ONG.●A cooperativa Dedo de GenteA cooperativa Dedo de Gente é a estrutura jurídica independente do CPCD que aglomera todas as fabriquetas e serve de plataforma para unificar as vendas, aprodução e a distribuição de recursos.

Os membros da cooperativa são divididos entre bolsistas e cooperados, os bolsistas são normalmente membros novos no projeto, que não dominam as habilidades necessárias para execução das atividades de forma completa, são os membros em estágio de treinamento.

Essa categoria tem uma carga horária de 4h de atividades diárias no contraturno escolar e sua remuneração é uma bolsa fixa mensal.

O objetivo do membro bolsista é aprender as habilidades necessárias para desenvolver as atividades e compreender a dinâmica da fabriqueta.

O membro cooperado tem um regime de dedicação de 8h diárias, é aquele membro que já domina as habilidades técnicas necessárias para desenvolver as atividades cotidianas de forma mais autônoma e sua retirada é vinculada ao cumprimento de uma meta de produção definida pelo planejamento coletivo da fabriqueta.Atualmente a Cooperativa concentra 84 pessoas, entre bolsistas e cooperados e em Araçuaí ela é formada por 42 jovens.

A Dedo de Gente ainda dispõe de duas lojas sedes, uma em Curvelo/MG e uma em Araçuaí/MG, onde expõe e vende os artigos produzidos pelas fabriquetas.

A Dedo de Gente é parte do projeto Arassussa e tem como principais parceiros a AngloGold Ashanti, a Petrobras por meio do Programa Petrobras Socioambiental, a Prefeitura Municipal de Curvelo, o Governo Estadual de Minas Gerais e o Governo Federal.●O Sítio MaravilhaO sítio teve início em 2005 por meio do projeto Arassussa e funciona como Centro de Referência em Permacultura10do Vale do Jequitinhonha.

É tido como um espaço experimental em permacultura, onde são desenvolvidas tecnologias de baixo custo e testadas técnicas e procedimentos para o manejo sustentável do solo.

No sítio são realizadas oficinas de permacultura e agroecologia com agricultores familiares da região, são produzidas mudas para reflorestamento e a produção de alimentos supre as necessidades do projeto Ser-Criança 10“A permacultura é definida em Mollison(1991) como“uma filosofia de trabalhar com, e não contra a natureza; de observação prolongada e pensativa em vez de trabalho prolongado e impensado, de olhar para plantas e animais em todas suas funções, ao invés de tratar qualquer área como um sistema produtivo único” Para mais informações, ver: Millison e Holmgren (1983).



e a Ação Social da paróquia Santo Antônio de Araçuaí (CPCD, 2013; CPCD, 2016).

O CPCD tem cinco funcionários que trabalham diretamente sítio, cuidando da produção de alimentos e da produção de mudas.

O sítio conta com parcerias com o Instituto Federal do Norte de Minas Gerais (IFNMG), com a Escola Familiar Agroecológica (EFA) para a produção de tecnologias populares sustentáveis e conta com a parceria da Petrobras por meio do Programa Petrobras Socioambiental, como parte do projeto Arassussa.

De forma geral, os projetos em Araçuaí estão distribuídos de acordo com a FIGURA 1, mostrando que grande parte dos recursos que movimentam a ONG e seus projetos são mobilizados por meio do projeto Arassussa.

E o apoio do Governo Federal e do Governo Estadual vai no sentido da classificação da ONG como OSCIP, facilitando a arrecadação de recursos, e da captação de recursos por meio de projetos como o Fundo Estadual de Cultura.



O que fica claro sobre a estrutura apresentada na FIGURA 2é a utilização do projeto Arassussa como guarda-chuva para as diversas iniciativas da ONG, e expõe a fragilidade da composição do orçamento da organização, já que grandeparte dos recursos são captados por meio de um único projeto.

Outra dinâmica interessante é como as iniciativas vão surgindo de acordo com possibilidades e demandas dos próprios projetos, como a Fabriqueta de Softwareque surgiu para atender demandas de sistemas de informação do CPCD ou a Fabriqueta de Turismo que foi criada como forma de aproveitar a projeção que a organização ganhou nacionalmente e diversificar os produtos e serviços oferecidos pela Cooperativa Dedo de Gente.2.4.As Tecnologias e Pedagogias do CPCDAo longo de sua trajetória o CPCD desenvolveu um conjunto de pedagogias, tecnologias, práticas e relatórios que estão presentes em diversos de seus projetos e seu uso constitui a base comum que define a linguagem e as formas de trabalho dos diversos projetos da organização.

Grande parte dessas tecnologias, especialmente os relatórios, foram criados de forma a facilitar as diversas prestações de contas que a ONG precisa entregar aseus parceiros.

De forma geral essas tecnologias são resultado da sistematização de experiências das décadas de atividades da ONG e já foram testadas tanto dentro dos projetos do CPCD quanto em outras instituições, como escolas públicas e particulares da região, e diversas dessas tecnologias são “tecnologias sociais” certificadas pela Fundação Banco do Brasil.Aqui, vale ressaltar o entendimento do CPCD sobre tecnologia social.

O entendimento da ONG vai muito mais no sentido proposto pela FBB (2015), de um artefato ou processo reprodutível de baixo custo, do que da compreensão de uma base cognitiva e material que descreve relações sociais outras,que não capitalistas(DAGNINO, 2014).

Assim, as pedagogias são:●Pedagogia da RodaA pedagogia da roda é o principal instrumento/tecnologia que a ONG dispõe e todos os projetos fazem uso dela de forma sistemática e quase diariamente.

A roda tem como objetivo colocar todos os participantes em posição de igualdade, valorizando os saberes de cada um e abrindo espaço para o diálogo.

Ela é sempre a primeira atividade do dia em todos os projetos, é nela que é feito o planejamento diário ou semanal, onde são resolvidos os conflitos, realizadas as avaliações, discutidos problemas e onde se constrói as soluções.

A

roda é um espaço horizontal onde todos são educadores, como observa Almeida (2012).

A pedagogia da roda é aplicada em todos os projetos do CPCD e é uma tecnologia social certificada pela Fundação Banco do Brasil em 2005 e finalista do Prêmio Fundação Banco do Brasil de Tecnologias Sociais, também em 2005(FBB, 2005; CPCD, 2016).●A Pedagogia do BrinquedoA pedagogia do Brinquedo consiste no reconhecimento das possibilidades educativas do brincar e na construção e adaptação de brincadeiras e jogos de modo a abordar temas e conteúdo que precisam ser estudados(ALMEIDA, 2012).

Por meio dessa pedagogia, foram desenvolvidos mais de dois mil jogos educativos que abordam diversos temas do currículo formal de educação, como aritmética, matemática, história, geografia, etc.

Os jogos estão em constante adaptação e reprojetamento e são construídos com materiais de baixo custo ou de reciclagem.

Como resultado material dessa prática, foi criado o Bornal de Jogos, um conjunto de 150 jogos construídos em conjunto com professores da rede municipal de Curvelo e aplicado em diversas escolas públicas e privadas em Curvelo, Araçuaí e São Paulo.

O Bornal de jogos é uma tecnologia social certificada pela Fundação Banco do Brasil de Tecnologia Social em 2001(CPCD, 2016).●A Pedagogia do SabãoA pedagogia do sabão está relacionada com a criação de autonomia sobre o que é consumido.

Parte do princípio de que é possível inverter a relação consumidor-produtor, basta compreender como as coisas são feitas, é como um Do-it-Yourself(Faça Você Mesmo).

Apesar da pedagogia ter surgido pela ideia de produzir o próprio sabão que a ONG utilizava, e que hoje são produzidos e comercializados mais de 15 tipos de sabão, ela se ela é a base para cognitiva para muitos dos projetos da ONG, como a produção de softwares e de material audiovisual(CPCD, 2016; Rocha, 2007).Além das pedagogias que estão presentes de forma constante, mas muitas vezes de forma não-material, não produzindo documentos sistematizados das experiências, o CPCD lança mão de um vasto conjunto de ferramentas de planejamento, monitoramento e avaliação.

Essas ferramentas produzem documentos e relatórios que são usados na prestação de contas de diversas parcerias e editais dos quais eles participam.

Essas ferramentas são chamadas pelo grupo de “tecnologias sociais” e são elas:

●Plano de Trabalho e Avaliação -PTAO PTA é basicamente um sistema de tradução de objetivos “específicos-conceituais” em objetos “operacionais e concretos” (Anexo A).

Funciona como um planejamento de médio-longo prazo e normalmente é realizado anual ou semestral.

Neste plano, são definidas as etapas do projeto, as atividades para cada etapa e os indicadores que serão usados ao longo do processo para acessar seu andamento.

O PTA funciona como alternativa ao Projeto Político Pedagógico -PPP utilizado em diversas outras instituições, como observa uma das educadoras entrevistadas.

O PTA é uma tecnologia social certificada pela Fundação Banco do Brasil de Tecnologia Social, em 2005(CPCD, 2016).●Indicadores de Qualidade de Projeto -IQPO IQP é um conjunto de indicadores(Quadro 6)para aferir o grau de qualidade dos projetos sociais do CPCD, é um instrumento de análise quali-quantitativo que pretende traduzir dados qualitativos em representações quantitativas exigidas pelos parceiros institucionais nas prestações de contas.

Os dados são colhidos pelos educadores ou coordenadores de cada projetode diversas formas como perguntas diretas aos membros do projeto ou por observação do comportamento de cada um em alguma atividade.

O IQP é formado por um conjunto de 12 (doze) microindicadores:







Ano passado [2015] estávamos com muitos projetos e muitos membros no grupo, não tínhamos mais tempo para nada, não fazíamos mais roda, não dava tempo de conversar, o cronograma estava muito apertado.

Decidimos que não iríamos continuar assim, então diminuímos os projetos e paramos de aumento o grupo, porque com o grupo grande e muitas atividades, fica difícil de manter o nosso jeito de fazer as coisas.

(Entrevista com M., coordenador da Fabriqueta de Software, 2016)Apesar da FS se preocupar em realizar as atividades de forma participativa, ela continua utilizando tecnologias e metodologias de desenvolvimento de softwareconvencionais.

Usando de softwaresproprietários,como Word, Excel, e-mailsdo Googlee plataformas de e-commercecomo Magento.

Mesmo com esse uso, a FS tem a preocupação de desenvolver software livres ou open sources-com licenças livres ou mais permissivas -, onde o código fonte possa ser usado e estudado por outras pessoas.A FS cumpre um papel duplo: ao mesmo tempo é uma unidade produtiva e educacional.

Ao mesmo tempo, atende demandas locais e regionais por sistemas de software e utiliza dessas demandas para promover habilidades profissionais para os jovens da região e alternativa de trabalho e renda.

O objetivo final da FS não é o lucro, eobservá-la dessa forma só a coloca em desvantagem em relação a qualquer outra organização minimamente semelhante.

Analisá-la em termos de “produtividade” e “eficiência” ou em relação a qualidade de seus produtos frente ao mercado formal é enganoso.

Porém, se mudarmos a perspectiva e observá-la em seus objetivos próprios, que é gerar alternativa de trabalho e renda (inclusão social), a eficácia de suas ações é muito mais claraEssa translação da análise descreve justamente a necessidade de buscar compreender o processo que constitui os parâmetros para definir se a iniciativa “funciona” ou não.

Se para uma empresa capitalista o parâmetro é o lucro, para os EESs,esses parâmetros são também produzidos de forma participativa.

Para a FS, o objetivo é produzir alternativa de trabalho e renda e formação técnica para os membros, e esse objetivo é cumprido.

É claro que é possível discutir se existem formas melhores, se os recursos são suficientes, o que poderia ser alterado,etc.

A questão é que essa decisão pode ser feita pelos próprios membros da FS diferente de uma empresa convencional.As próprias contradições presentes na FS são também referentes a sua atuação múltipla, onde ela navega, ora no mercado formal, ora na educação e ora nas organizações não governamentais.

Essas contradições em suas atividades, são também adequações que o próprio grupo encontrou para manter suas atividades, garantindo alguns valores não

negociáveis para eles, como a roda e o engajamento social,com as condições coercitivas de sobrevivência no mercado formal.2.6.A Questão da Água em AraçuaíDa criação da Secretaria Nacional de Combate à Seca no século XVII até o princípio de convivência com o semiárido propagado pela ASA, a preocupação com a água nosemiárido brasileiro é quase que uma constante na história do país (MEDEIROS, 2014).

E no Vale do Jequitinhonha, com sua precipitação anual menor que 1000 mm, déficit hídrico de 600-700 mm e solo pouco fértil, a preocupação com a água também não é diferente(OLIVEIRA, DUARTE e MENEGASSE, 2002).No médio Vale do Jequitinhonha, onde o Rio Jequitinhonha recebe o Rio Araçuaí (seu principal afluente) as chuvas se concentram entre novembro e março onde chove grande parte do esperado para o ano, os outros meses, raramente se vê chuva (OLIVEIRA, DUARTE eMENEGASSE, 2002).

Neste trimestre de chuva, diversas estratégias são operadas para garantir que a precipitação seja suficiente para todo o resto do ano.

A principal tecnologia para tentar manter a disponibilidade de água nesses períodos de baixa precipitação são as cisternas, especialmenteas construídas pelo Programa Um Milhão de Cisternas (P1MC) (DIAS, 2013a; BRANDÃO e DIAS, 2013b).

Tanto a cisterna de telhado ou de enxurrada, funcionam da mesma forma, onde a área do telhado ou um terraço cimentado redireciona o fluxo de água para um reservatório.

O objetivo dessa água é tanto consumo humano quanto uso na agricultura.

Nos rios não perenes da região também existem pequenas represas que tentam estender a vida desses riachos, prendendo a água na época de chuva e liberando aos poucos nas épocas secas.

Associado a essas tecnologias também estão presente outras oriundas da própria paisagem e da configuração geomorfológica da região, como as lagoas que concentram água parada das chuvas, as chapadas que funcionamcomoreservatórios naturais e as grotasúmidas,marcadas pelas enxurradas.Essa associação: da disponibilidade de água em curtos espaços de tempo, em quantidades muito variadas ao longo do ano e a incerteza da qualidade da água; é o que configura a “questão da água”.

Não é que simplesmente não existe água disponível,mas simque existe também,uma incerteza tanto relacionada à quantidade disponível quanto relacionada à qualidade.

A questão da água não é apenas a ausência dela, mas também a problemática da decisão entre a qual atividade cada água pertence e a comum -e infeliz -

transformação de uma água em outra, onde as vezes é preciso tomar a água da enxurrada como água para consumo ou a água para consumo como água para agricultura.

Independente da direção da transformação “água grande” para “água fina” (RIBEIRO e GALIZONE, 2003) ou vice-versa, essa problemática é constitutiva da região e se reflete nas mais diversas práticas de seu povo.No município de Araçuaí, a mata atlântica (vegetação original) foi substituída pela savana e junto com ela, a água foi substituída pela “questão da água”.

A degradação ambiental é marcante no Médio Vale e especialmente em Araçuaí.

Essa degradação tem início no começo do século XVIII com o descobrimento de ouro no vale e daabundância depedras preciosas.

Passando pela invasão de terras camponesas por falsos fazendeiros na década de 60eseguida pela invasão dos eucaliptos na década de 1970 impulsionada por programas Federais de reflorestamento, mas que tinham como objetivo insumos para empresas de papel e celulose, e mais próximo, na década de 1990, o gado e as extensas plantações de capim colonião (GUERRERO, 2009).

Essa “modernização do vale” (GUERRERO, 2009: 86) deixou cicatrizes profundas na região, ambientais e sociais, na grande degradação do solo e da água e na desarticulação dos arranjos tradicionais entre pequenos produtores e fazendeiros (GUERRERO, 2009: 85).

Vale destacar que não houve apenas uma substituição de atividades produtivas exploratórias, mas sim que hoje, todas essas atividades compartilham a mesma paisagem e intensificam cada vez mais a degradação da região, convivem hoje o garimpo de pedras preciosas, a mineração industrial, os pequenos produtores de café explorados pelos grandes fazendeiros, as enormes fazendas de gados e as monoculturasde eucalipto a perder de vista(PINHO-TAVARES et al, 2013)O município de Araçuaí utiliza principalmente as águas da Bacia do Araçuaí, tanto na agricultura quanto para captação e essas águas são provenientes principalmente da Chapada do Lagoão, uma chapada à leste do município e berço d’água do município.

A Chapada do Lagoão é uma Unidade de Conservação de Uso Sustentável localizada a 30 km da cidade de Araçuaí, sob domínio do clima semiárido.

Tem altitude média de 850me possui 24.180 hectares, o que compreende 10,78% da área total do município de Araçuaí.

De acordo com dados da Emater (2003) em Caires e Sousa (2011), residem diretamente na chapada, acima da cota de 500m de altitude, cerca de 400 famílias.

As famílias que residem na chapada são divididas em pequenas comunidades e suas principais atividades são a agropecuária e o

extrativismo, especialmente do pequi, para extração do óleo, e das palmeiras para confecção de vassouras(CAIRES e SOUSA, 2011; APA Chapada do Lagoão, 2016).A chapada é um platô que se ergue no limite leste do município.

Ela é chamada de Chapada do Lagoão por possuir oito lagos não perenes, que se enchem nos períodos das chuvas, entre outubro e março, e secam lentamente ao longo do resto do ano.

Esses lagos são fundamentais para a dinâmica socioambiental da chapada, pois concentram água para os períodos secos e servem de reservatório para a fauna e a flora local.

No período de chuvas essas áreas alagam e sua água é usada tanto para consumo humano como para agropecuária.

É importante lembrar que as lagoas são grandes volumes de água parada, que empoçam em alguns locais da chapada devido a composição geomorfológicas específica da chapada e que a qualidade da água degrada rapidamente(CAIRES e SOUSA, 2011).A chapada é fundamental para a segurança hídrica do município.

Como me foi explicado, de maneira bastante didática, por C., engenheiro agrônomo, professor do Instituto Federal do Norte de Minas Gerais (IFNMG) de Araçuaí e educador do CPCD, em entrevista, “a chapada funciona como uma grande esponja”.

O que ele quis dizer é que durante os períodos das chuvas ela acumula a água em suas lagoas e reservatórios subterrâneos e libera aos poucos, alimentando as 139 nascentes da chapada e suas encostas.

Essaságuas que nascem na chapada, descem a encosta e formam os rios que compõem a bacia do Araçuaí, em especial o Calhauzinho.

Sem essa capacidade de “esponja” da chapada -de guardar água e liberar lentamente -as águas desceriam muito rapidamente para os rios da planície, alagariam a cidade de Araçuaí e não garantiriam um fluxo de água mínimo para a perenidade de nenhum deles.

Neste sentido, a Chapada do Lagoão é o berço das águas de Araçuaí, fundamental para a manutenção da bacia hidrográfica do município e sua preservação é estratégica para garantir a segurança hídrica da região como um todo e garantir condições de trabalho para a agricultura local(CAIRES e SOUSA, 2011).As principais tecnologias empregadas na chapada para aumentar a disponibilidade de águanos períodos mais secossão as cisternas e as minibarragens, além das próprias técnicas de manejo da permacultura difundidas pelo CPCD aos agricultores da chapada.

As cisternas construídas nas comunidades da Chapada do Lagoão são provenientes principalmente do Programa 1 Milhão de Cisternas -P1MC, porém algumas foram construídas com recurso do projeto Caminho das Águas pelo CPCD.

Na chapada ainda foram construídas duas pequenas barragens que acumulam água no período de chuva para garantir a perenidades dos cursos

d’água da APA e aumentar a disponibilidade de água para as famílias nos períodos de seca.

Apesar de que o relatório da CPI das Barragens afirmar que uma delasnão opera corretamente,de acordo com a CPI da ALMG (2000)2.7.O Caminho das ÁguasO CPCD atua na Chapada do Lagoão de forma indireta desde o início das atividades da ONG na cidade, pois algumas das escolas rurais atendidas pelo CPCDno projeto UTI educacionaleram da chapada,por issoessas comunidades já conheciam algumas das atividades da ONG.Porém, foi a partir de 2007 com o projeto Caminho das Águas que o CPCD começou a atuar mais sistematicamente nas comunidades da chapada.O projeto Caminho das Águas teve início em 2007 e foi finalizado em 2014, contou com a parceria da Petrobras, e tinha como objetivo a conservação e recuperação dos recursos hídricos da região, como mapear as nascentes, disseminar a cultura da conservação de mananciais para as comunidades rurais, construir, pequenas barragens e açudes.

Com o objetivo de criar condições de permanência para a população local, garantindo a segurança hídrica da região e, por conseguinte, criando oportunidade de trabalho e renda(BORGES et al, 2014; CPCD, 2014).O projeto também estava vinculado ao Projeto Arassussa e revela a proximidade entre a ONG e alguns de seus parceiros, especialmente com a Petrobras.

Como a estrutura jurídica do CPCD não contemplava a possibilidade de receber recursos para desenvolver projetos ambientais, por conta da descrição de suas atividades fins, foi pensado, junto aos técnicos da Petrobras, uma solução jurídica que viabilizasse o recurso para o projeto.

A solução encontrada foi criar uma nova organização, o Bando de Êxitos, que seria gerido também pelos membros do CPCD e abriria uma porta para a instituição para receber recursos para atividades ambientais(BORGES et al, 2014).

Na prática não existe uma divisão entre o CPCD e o Banco de Êxitos, a principal função da segunda instituição é participar de parcerias de cunho ambiental e repassar para o CPCD as atividades aserem desenvolvidas.De 2007 até 2014 a principal atividade do projeto foi formar agentes comunitários de proteção ambiental nas comunidades.

Essa formação foi feita por meio de oficinas sobre conscientização do uso da água, oficinas sobre técnicas de manejo sustentável do solo, principalmente técnicas associadas à permacultura e a agroecologia e a disseminação de tecnologias desenvolvidas no Sítio Maravilha, como o banheiro seco, que substitui a água por

serragem e transforma o resíduo em adubo, a horta mandala elevada, que otimiza o uso da água nas hortas e a captação de água da chuva.

Nesse período, o foco das atividades foram as crianças e mulheres das comunidades, pois de forma geral, eram elas que tinham maior relação com os recursose espaçosda casa, pois os maridos e os filhos mais velhos passam o dia fora de casa, trabalhando na própria plantação ou em alguma outra propriedade.

As atividades domésticas e o cuidado com a horta da casa eram quase que sempre executadas pela mulher da casa e pelos filhos mais novos.Esse trabalho de sete anos com as mulheres e crianças das comunidades deu origem às “mães-cuidadoras”, mulheres que conhecem as tecnologias de permacultura e realizam oficinas sobre manejo de solo e de água em outras comunidades, e os “guardiões da água”, que são os agentes comunitários mirins, que se preocupavam em garantir ações de conservação ambiental.

Essas duas categorias não têm atividades sistemáticas ou formalizadas, são na verdade uma forma de garantir um nível mais constante de mobilização das comunidades onde o CPCD atuava com o Caminho das Águas e assentar as ideias de conservação ambiental da chapada e das nascentes.2.8.Síntese do CapítuloOs valores e práticas do CPCD são fundamentais na conformação das características da FS, tanto de seus processos de funcionamento quanto da formação pessoal deseus membros.

As ações prévias do CPCD na cidade contribuempara estabelecer uma linguagem comum entreos membros da FS e a sistematização dos processos do CPCDajudam a definir as estruturas de funcionamento da fabriqueta.

A expressão máxima dessa influência dos valores do CPCD na formação pessoal dos membros da FS é o fato de que muitos dos membros “foram crianças”, ou seja, foram integrantes dos projetos de educação infantil, o Ser Criança.

A estrutura e as práticas da FS também carregamdiversas das características do CPCD descritas anteriormente.

A ideai de construir as próprias soluções com os materiais disponíveis é proveniente da “Pedagogia do Sabão” e o ambiente democrático e inclinado ao diálogo, é provenienteda “Pedagogia da Roda”, que mesmo quando não está e uso –no seu sentido topológico, de estarem todos sentados em roda –mantém seus valores presentesnos mais diversos momentos do dia.



Essa relação,entre a formação prévia dos membros da FS nos outros projetos do CPCDe a aplicação dos aprendizados do CPCD na estruturação do funcionamento da FS, é quedescreve a forma organizacional da fabriqueta.

E é essa consonância, entre as formas de fazer e pensar dos membros com as formas de fazer e operar os processos de trabalho na fabriqueta, que garante a satisfação dos membros em participarem do projeto.

Os membros que não se alinham, ou que não se acostumam com essas formas de relações, acabam por não permanecer muito tempo no projeto, em contraponto, os membros que se alinham, tem uma estadia bastante prolongada, normalmente cumprindo o tempo máximo de permanência.Aqui volto a ideia do movimento de consolidação da comunidade e como ela é constituída concomitantemente com a conformação da demanda material e simbólica e das capacidades cognitivas do grupo em questão e da importância do entorno sociotécnico (COSTA e ABREU, 2013; DAGNINO, 2010).

Antes da interação com o CPCD, as comunidades da chapada já apresentavam uma demanda por água, pois a demanda pela água é também uma demanda histórica, como apresentei anteriormente.

Porém, não existia uma mobilização organizada das comunidades para reclamar por esse direito, pois essas comunidades foram marginalizadas pelo processo de desenvolvimento do município.

Em outras palavras, não existia a possibilidade de enunciação do problema por essas comunidades.A interação entre as comunidades e o CPCD, por meio do projeto Caminho das águas, ajudou a conformar essa demanda em um formato enunciável.

O que houve foi um movimento duplo de apropriação: nos sete anos de atividade na chapada, as comunidades foram absorvendo práticas, técnicas e discursos trazidos pelo CPCD em suas oficinas e treinamentos, mudando a percepção da comunidade sobre o próprioproblema da água.

Se antes a questão da água na chapada era encarada por meio de obras, como minibarragens e poços artesianos, que eram realizadas com pouco cuidado e agravaram o cenário de degradação na chapada, como aponta o Relatório da ALMG (2000) e Oliveira, Menegesse e Duarte (2000).

Depois do longo período de atividades formativas das comunidades com o CPCD a demanda por água adquiriuma outra configuração, que exprime a necessidade de conservação da chapada como condição para a segurança hídrica tanto das comunidades que nela residem, quanto de toda a bacia do Araçuaí.

Ao mesmo tempo, a chapada se apropriou da estrutura jurídica e administrativa do CPCD, utilizando da extensa capacidade de mobilizar recursos e desenvolver atividadesque a ONG possui, para executar um programa que tem como objetivo garantir a disponibilidade de água para as comunidades.



Esse novo conjugado entre famílias da chapada e CPCD é uma nova comunidade, híbrida de capacidades e demandas, que consegue produzir e enunciar uma demanda concreta e objetiva que já tem em si uma solução associada, referente à capacidade criada pela configuração dessa nova comunidade.

O Caminho das Águas, com suas oficinas de formação em agroecologia, educação ambiental, hortas mandalas e banheiros secos, não está apenas produzindo novas capacidades com as famílias que residem na chapada, associando as técnicas trazidas pelo CPCD com as práticas já tradicionais dessas famílias, está ao mesmo tempo produzindo uma comunidade ao redor de uma demanda.

Essa nova comunidade reconfigura a demanda produzindo novas expressões para a mesma: a demanda por água se transforma em demanda por água por meio da conservação da chapada e suas nascentes, e a forma dessa conservação deve seguir uma forma com que o CPCD garanta sua capacidade de conseguir recursos.

Ocorre uma transição de aparatos símbolos da solução, de cisternas e barragens para nascentes e mudas.



Nesse sentido é que as tecnologias levadas pelo CPCD para as famílias da chapada têm uma capacidade de também produzir comunidades, pois associadas com as oficinas formativas produzem capacidades e alteram o contexto sociotécnico no qual foram inseridas, mobilizando grupos antes desmobilizados e possibilitando dinâmicas locais de inovação, como observa Thomas e Fressoli (2010).



### 3.CAPÍTULO3 -Desenvolvendo Software,Produzindo Sistemas
Neste capítulo, apresento os momentos: Em Construção e Implicações, respectivamente, a segunda e terceira linhas do Quadro 4.

O objetivo deste capítulo é traçar uma narrativa que descreva como as demandas produzidas pelos processos descritos anteriormente -a relação entre o CPCD e as comunidades da chapada -foram materializadas em problemas concretos com soluções associadas e quais implicações a produção desse artefato-soluçãotraz.Ao longo do capítulo, apresento o processo de construção do artefato SGMN, seus componentes e as dinâmicas sociotécnicas que ele mobiliza para o seu funcionamento.

Em seguida, utilizo da abordagem de sistemas tecnológicos de Hughes (1983; 2013) para mostrar como as associações que o artefato estabelece podem ser compreendidas para além de suas relações imediatas e quais consequências analíticas isso acarreta.

Ao final, relaciono as implicações do desenvolvimento do artefato com as modalidades de AST (Dagnino, Brandão e Novaes, 2010) e como essa relação se dá no contexto produtivo específico da FS.3.1.Desenvolvendo o Sistema de Georreferenciamento e Monitoramento de Nascentes: O momento Em ConstruçãoNessa seção apresento a segunda linha do Quadro 4, o momento Em Construção.

Esse é o momento onde está sendo consolidado o formato final da tecnologia social por meio das relações entre os diferentes grupos de interesse, ou “grupos sociais relevantes” (BIJKER,1997: 32; PINCH e BIJKER, 2013: 28), que negociam a forma de funcionamento do artefato, seus componentes e as habilidades necessárias para operá-lo.

Ao longo deste processo, de transformação da demanda,também é conformadaacomunidade em torno da tecnologia social.Como observa Latour (2000: 31), são nestes momentos, dos fatos e artefatos em construção, que os processos de alinhamento de interesses estão ocorrendo mais intensamente, transitando entre os domínios do social, técnico, econômico e político e refazendo esseslimites.

São esses processos que vão estabelecer posteriormente as respostas institucionais sobre as decisões tomadas sobre o artefato ou arranjo.

E como observa Latour (2000: 31) é essencial conseguir separar as duas explicações sobre o porquê das decisões tomadas, uma que provêm do artefato pronto e outra dele em construção.

De forma que a configuração final

de um artefato ou arranjo não seja elemento autoexplicativo de seu processo de desenvolvimento (LATOUR, 2000: 31; PINCH e BIJKER, 2013: 16)Assim, o interesse desta seção é compreender as decisões e estratégias tomadas sobre o formato do SGMN-o processo de construção do funcionamento (THOMAS, 2010) -os atores mobilizados e as contingências que agregaram cada um.Nessesentido a seção anterior (2.7) que apresenta o projeto Caminho das Águas como um momento de negociação e redefinição da demanda e das capacidades desse novo conjunto de associações (CPCD + famílias da chapada), torna-seuma seção de transição.

Onde se passa de um momento de descrição da organização para o momento de construção dos termos que serão constitutivos do artefato, e bem poderia ser alocado neste segundo momento.

A seção sobre o Caminho da Água contém também os elementos explicativos para as decisões sobre a formação da comunidade, que são as famílias e comunidades da chapada que adotaram as práticas de permacultura, agroecologia e conservação promovidos pelo programa ao longo dos 7 anos e parte do CPCD.

É esse grupo que será objetivo do SGMN e sua ação, e é esse grupo que o CPCD tem interesse em manter próximo, uma vezjá existe um tempo investido em sua formação.A seguir apresento a história do desenvolvimento do SGMNas decisões tomadas sobre sua configuração, como cada ator influencia no formato final do mesmo e como essas decisões também fazem parte da conformação dos grupos que formarão oseuentorno.

Mostro também seuscomponentestécnicose como foi garantido a continuidade do engajamento das comunidades da chapada com o CPCD por meio da inserção dos mesmo nas rotinas de operação do SGMN.

Toda essa narrativa, tem como objetivo tentar responder à pergunta:como uma demanda por água se torna um software?3.1.1.O artefato e sua históriaO Sistema de Georreferenciamento e Monitoramento de Nascentes (SGMN) é um sistema de software desenvolvido pela FS para mapear e coletar informações sobre as nascentes que compõem a bacia do rio Araçuaí -especialmente as que estão na Chapada do Lagoão -e acompanhar e registrar as atividades promovidas pelo CPCD para sua recuperação.

O sistema é composto por um softwarede georreferenciamento, onde é possível atribuir

coordenadas geográficas (latitude, longitude e altitude) a locais específicos de um mapa, um conjunto de aparelhos GPSs portáteis, para obter as coordenadas geográficas das nascentes no processo de mapeamento e um Droneequipado com uma máquina fotográfica para tirar fotos aéreas da nascente e de seu entorno.O produto final é um websiteinterativo com o mapa do Google Mapscentralizado na região do município de Araçuaí com 139 marcações no território, onde cada marcação representa uma nascente mapeada, como na FIGURA 3.

Ao clicar em uma marcação aparece o registro de todas as atividades de recuperação realizadas na nascente, como um diário, com o dia da realização da atividade, uma breve descrição e dados como a temperaturado local e a umidade relativa do ar.

É possível também acessar uma série histórica das fotos aéreas da nascente, onde se pode visualizar a evolução e o crescimento das mudas de reflorestamento e a expansão da vegetação.








O processode coleta de informações de algumas nascentesnormalmente dura o diatodo.

O deslocamento na chapada é difícil, o terreno é acidentado, as estradas são de terra com poucamanutenção e as trilhas são basicamente trilhadas pelo gado, por isso nem todas as nascentes são visitadas.

As que são visitadas são as que combinam um acesso mais fácil e são mais relevantes para a composição das águas da chapada.

As visitas são feitas até que comece a escurecer.Terminando a coleta, é feito o caminho de volta à sede da FS em Araçuaí e as informações são descarregadas no computador, principalmente as fotos.

No software, são inseridos os dados coletados na visita, com os horários referentes às atividades, uma breve descrição do que foi visto na visita, algumas fotos e as fotos aéreas, todas elas datadas.

Essa nova entrada de dados no sistema é georreferenciada no sentido de que tem sua localização atrelada a uma localização específica do mapa, de acordo com os dados geográficos obtidos pelo GPS na visita.As visitas poderiam ser feitas de forma mais simples para coletar informações mais rapidamente sobre as nascentes, mas a dedicação em sempre visitar alguns moradores das propriedadespróximas às nascentes, os cafés e as conversas, que diminuem a eficiência na coleta de dados, contribuem para a continuação da relação entre o CPCD e as famílias da chapada.

Também funcionam para verificar se os moradores estão aplicando as práticas de manejo debaixo impacto ambiental, se não estão usando agrotóxicos nem praticando a queima e derrubada -prática comum na região para limpar o solo antes de começar a plantar.Como observamPinch e Bijker (2013), diferentes grupos sociais definemsignificados diferentes para os mesmos artefatos e “significados diferentes podem constituir diferentes linhas de desenvolvimento” (PINCH e BIJKER, 2013: 40).

Os grupos relevantes no desenvolvimento do SGMN -e da sua forma de coleta de dados -não o compreendem apenas como uma tecnologia para coletar dados ambientais, principalmente depois de todo o processo de alinhamento de interesses desenvolvido ao longo dos sete anos do Caminho das Águas.

Caso fosse essa a compreensão, de apenas obter dados hidrológicos ou geográficosda região das nascentes, bastaria o CPCD fazer uma parceria com INPE para obtenção de imagens já prontas, ou até mesmo uma parceria com o Instituto Federal da cidade para conseguir essas imagens aéreas das nascentes.



A compreensão da ONG sobre seus projetos é referente a sua própria atuação como ONG e em termos, aliado também com os valores da ES, que é criar possibilidades de inclusão social.

Para as famílias da chapada, a coleta de dados das nascentes também serve a outros propósitos para além da própria coleta, que é a continuidade das ações de conservação na região.

A compreensão sobre o SGMN não é de que ele é apenas uma ferramenta de coleta de dados, como talvez seria em uma empresa capitalista convencional, mas sim uma forma de transformar a ação de coletar dados em ferramentas de inclusão social.3.1.3.As demandas e capacidades mobilizadas pelo SGMNCom a descrição do desenvolvimento do SGMN,fica mais claro qual o papel que ele cumpre nesse aglomerado de associações, quais demandas ele tenta resolver e quais capacidades ele mobiliza.

Nesse sentido, o SGMN tenta se aproximar tanto das demandas das famílias da chapada quando do CPCD, mantendo alinhado os interesses desses dois grupos, e transitando entre os domínios econômico, ambiental, social, organizacionaletc.O SGMN trata a demanda do CPCD, de aprimorar as capacidades da organização de captar recursos, criando uma nova forma (inovadora) de apresentar o trabalho da ONG para parceiros em potencial.

O mapa da chapada, com os marcadores, o histórico de atividades e fotos é um atestado da capacidade do CPCD em executar as atividades que elemesmo propõe.

Ao mostrar a evolução da vegetação em torno da nascente, a recuperação dos cursos d’água, o CPCD atesta sua capacidade técnica e organizacional, o que serve de propagando aos possíveis parceiros.O SGMN trata a demanda por água das famílias da chapada, aumentando a capacidade de captação recursos da ONG, o que garante: a capacidade do Sítio Maravilha de produzir mudas da vegetação local para plantar nas áreas de reflorestamento próximos às nascentes; a continuidade das atividades dos funcionários do CPCD na chapada, aprofundando as oficinas e os cuidados com a recuperação das nascentes; e garante a continuidade da mobilização dos moradores da chapada, que veem no CPCD,um instrumento para dar voz às suas demandas, não apenas por água, mas por todo tipo de infraestrutura ausente no local.

Pois, com o CPCD, as famílias da chapada têm uma inserção muito maior na vida política da região.Na FS, o SGMN trata a demanda do grupo por projetos, fazendo com que ela ocupe o tempo dos integrantes no desenvolvimento do softwarepara o georreferenciamento,

desenvolvendo as habilidades de seus integrantes, cumprindo seu papel de formação profissional e garantindo a continuidades das atividades da FS.O SGMN é oportuno pois ele mobiliza as capacidades já existentes que foram mapeadas para a nova comunidade.

Na FS ele mobiliza a capacidade do grupo em desenvolver softwares, no caso a capacidade do grupo de trabalhar com conhecimento de desenvolvimento de plataformasweb, coisa que eles já têm prática, pois são essas tecnologias utilizadas para desenvolver os portais para tanto para o CPCD quanto para outros clientes.

Desenvolver um software webpara o georreferenciamento e não escolher utilizar um softwarede processamento de dados geográficos, como o ArcGIS, é uma escolha que utiliza as capacidades já existentes do grupo e aproveita para aprofundá-las.O SGMN aproveita também o conhecimento e aprática já comum do CPCD e de suas organizações próximas, em produzir relatórios.

Transformando o sistema de mapear coordenadas e fotos em um diário fotográfico das nascentes, com fotos datadas (algo fundamental para os relatórios), relatos dos moradores da chapada e planilhas de visitas.

Todo esse material ajuda a compor a sistematização das atividades do CPCD que é fundamental para buscar novos parceiros.E por último, o SGMN aproveita a capacidade dos moradores da chapada em executar as atividades de conservação das nascentes, pois estão confiados a eles as atividades efetivas de conservação, que é o uso consciente da água, o descarte correto de resíduo, o manejo sustentável do solo, o cuidado com as mudas, a manutenção das proteções da nascente, o desvio dos animais próximo etc.Capacidades essas,desenvolvidas ao longo dos 7 anos do Caminho das Águas.Assim, ele -o SGMN-transita entre essas diversas esferas, econômica, social, ambiental e política, e funciona como um elemento para manter estável o alinhamento de interesses entre os diversos atores que utilizam desse sistema.Nesse sentido, o sistema não se define apenas como uma solução ao problema, mas também como uma “solução invertida”, como será visto em seguida.

Pois o caminho de desenvolvimento de TS, como já observado anteriormente, não segue uma lógica “linear natural”, onde o artefato desenvolvido é a solução natural ao problema levantado, pois ela reconhece a política e os processos sociais das decisões técnicas.

O SGMN é o resultado de uma trajetória dupla, onde o problema e a solução se co-produzem e se co-definem, e é na intersecção dessas duas trajetórias, do

problema em busca de uma solução e da solução em busca de um problema, que as características do SGMN resultado.3.2.Georreferenciando em Diversas Escalas: O Momento ImplicaçõesComo apresentado anteriormente, o SGMN é um artefato que atua em uma multiplicidade de domínios e em seu desenvolvimento,transforma questões técnicas (software webcontra aplicação ArcGIS) em questões econômicas (relatório pronto ou material para relatório); questões econômicas (coleta de dados rápidas e indiretas contra coleta de dados que mobilizam funcionários e recursos) em questões sociais e ambientais (coletar dados sem se relacionar com os moradores, contra usar a coleta de dados para aprofundar as relações) e questões técnicas (usar imagens de satélite do INPE prontas, contra produzir as próprias imagens) em questões políticas (ser conivente com uma lógica centralizada e inacessível de produção de conhecimento ou produzir sua própria lógica com os instrumentos que estão disponíveis).

O SGMN transforma essas categorias, pois elenão respeita suas fronteiras e navega entre os diferentes domínios, reconfigurando seus limites e bordas, de forma que não é mais possível separar as imbricações entre o que é técnico, o que é econômico e o que é social.Énesse movimentoque ele compõe o“tecido sem costuras” (Hughes, 1986) que descreve a relação tecnologia e sociedade.

Porém, essa característica não é exclusiva do SGMN.

A construção artefatos técnicos, como observa Hughes (1986),Pinch e Bijker (2013), é justamente a conformação dessa teia, que reconfigura os limites e naturaliza o artefato, escondendo seus processos de constituição e as relações que o mantém estável.

Para tratar da complexidade do“tecido-sem-costuras”, Hughes (1983; 1986; 1987), propõe o conceito de “sistema tecnológico”.

Que é uma forma de colocar para dentro da unidade de análise a heterogeneidades e interconectividade dos elementos que compõem as relações sociotécnicas que descrevem e extrapolam oartefato, ou seja, redesenhaos limites entre o que é contexto e conteúdo na conformação de artefatos técnicos(HUGHES, 1986).



.2.1.A abordagem de sistemas tecnológicosComo observa Hughes (1983: 5), a definição de “sistema” é abrangente e flexível12, mas de forma geral fala sobre composições de elementos de tipos heterogêneos quese relacionam, e ao afetarem uns aos outros afetam a configuração geral dessa composição.

Como observa o autor “um sistema é constituído de componentes que se relacionam” (HUGHES, 1983: 5, tradução própria)13.

Esses componentes se conectam uns aos outros,e dessas conexões, conformam topologias, redes ou estruturas que definem sua configuração geral.

Como os componentes se relacionam por meio dessas redes de interconexões, a atividades -ou inatividade -de um componente influencia o estado de outros componentes no sistema e ao final dessa cadeia, afeta o sistema como um todo.

Os componentes de um sistema podem ser técnicos ou não técnicos, e o uso do termo “sistema” normalmente denota a relação entre componentes de categorias diferentes.

E nesse sentido, o autor observa:‘Sistema’ significa então: componentes interativos de diferentes tipos, tal como técnicos e institucional, e de diferentes valores; tal sistema não tem um controle centralizado e nem é direcionado a um objetivo claramente definido.

(HUGHES, 1983: 6, tradução própria)14Um “sistema tecnológico” está dentro da perspectiva de sistema apresentado acima e herda dela suas características.

Um sistema tecnológico é um conjunto que associa conhecimentos científicos, com artefatos técnicos, dispositivos jurídicos, políticos, econômicos, ambientais, organizacionais etc., de forma a atingir uma finalidade comum objetivada pelo sistema (ou pelos integrantes do sistema).

Um artefato -seja ele físico ou não -funcionando como um componente em um sistema, interage com outros artefatos, que contribuem direta, ou indiretamente (através de outros componentes), com essa finalidade comum do sistema(HUGHES, 1983).12Assim como em Hughes(1983) não cabe aqui fazer uma recordação da literatura sobre sistemas, ou teoria sistêmica, visto a enorme quantidade de material diverso produzido.

O uso do sistema tecnológico de Hughes vai muito mais no sentido de aproveitar as reflexões propostas pelo autor para tratar questão dentro do STS, para uma discussão sobre sistemas ver: 13“A system is constituted of related components”(Hughes, 1983: 5)14“System” then means: interacting components of different kinds, such as the technical and the institutional, as well as different values; sucha system is neither centrally controlled nor directed toward a clearly defined goal.

(HUGHES, 1983: 6)

O sistema tecnológico também herda a interconectividade entre os componentes.

Caso um componentedo sistemaseja removido, ou tenha suas característicasalteradas, os outros componentes do sistema vão responder de acordo.

Ou como observa o autor”sistemas tecnológicos contém componentes confusos, complexos e que resolvem problemas.

São, ao mesmo tempo, socialmente construídos e moldam a sociedade” (HUGHES, 2013: 45, tradução própria)15.

É importante observar, como nos lembra o autor,queinventores, cientistas, engenheiros e trabalhadores são componentes de um sistema, mas não são artefatos.

Eles não são criados pelos construtores de sistemas, indivíduos e grupos em um sistema tem graus de liberdade que os artefatos não possuem(HUGHES, 2013: 48).Sistemas tecnológicos não se constituem do nada, eles são inventados e desenvolvidos por pessoas e grupos, por construtores de sistemas (“system builders”) (HUGHES, 2013: 46), que criam componente por componente, e por isso, os componentes de umsistema tecnológico também são artefatos socialmente construídos.

Como observa o autor, a característica principal dessesconstrutores de sistemas é a habilidade de criar unidade a partir dadiversidadee o sucesso em construir sistemas coesos está diretamente relacionado com a capacidade desses construtores de lidar com a heterogeneidade de questões que aparecem ao longo doprocesso.

E como mostra Hughes (2013) e Mackenzie (2013), os construtores de sistemas que obtém sucessos são aqueles que conseguiram lidar, simultaneamente, com questões técnicas, econômicas e políticas.

São os que conseguem desempenhar um papel de “engenheiros da heterogeneidade” (heterogeneous engineers) (HUGHES, 2013), desrespeitando fronteiras disciplinares e transitando entre diferentes domínios.Porém, como observa Mackenzie (2013: 191), sistemas não devem ser compreendidos como estruturas dadas, e nem devem ser compreendidas como sinônimo de estabilidade ou ausência de conflitos.

Sistemas são constructos que só se mantêm firmes enquanto as condições corretas prevalecem.

E sempre existe a possibilidade de um sistema se dissociar em seus componentes-parte, dissolvendo sua estrutura.

Para manter um sistema tecnológico funcionando e seus componentes conectados corretamente, de modo que seu funcionamento esteja de acordo com o objetivo comum do conjunto, é preciso o trabalho constante dos diversos atores em negociar e manter as relações entre os componentes que estruturam esse sistema.Tanto em termos técnicos, de manter uma máquina ou processo 15“technological systems contains messy, complex, problem-solving components.

They are both socially constructed and society shaping”(HUGHES, 2013: 45)”

produtivo operando corretamente, quanto em termos políticos, mantendo relações institucionais importantespara o funcionamento do sistema.

Como observa Mackenzie (2013):Atores criam e mantém sistemas, e se eles falham nisso, o sistema em questão deixa de existir.

A estabilidade de um sistema é uma conquista frequentemente precária face às forças potencialmente hostis, tanto sociais quanto naturais.

(HUGHES, 2013: 191, tradução própria)16Uma preocupação central para Hughes ao desenvolver sua teoria sobre sistemas tecnológicos é sobre como ocorre seu movimento de crescimento.

De acordo com Hughes (2013), os grandes sistemas tecnológicos tendem a crescer avançando sobre os elementos que ele não tem controle, na tentativa de diminuir as fontes de incerteza que podem afetar a estabilidade do sistema.

Hughes (2013) chama de ambiente tudo que está fora do controle do sistema, todas as forças, naturais ou sociais, organizacionais, ou econômicas que afetam a estabilidade do sistema e que ele não tem poder sobre.

Assim, o movimento ideal do sistema é avançar sobre esses elementos e incorporá-los em seus sistemas, diminuindo as fontes de incerteza que o cercam e garantindo uma maior estabilidade em seu funcionamento.Devido a própria complexidade de um sistema tecnológico e suas múltiplas partes, seu crescimento dificilmente é linear, ou homogêneo, pois suas diversas partes crescem em velocidades diferentes.

Conforme o sistemaavançasobre o ambiente, novos tipos de problema aparecem.

Alguns desses problemas são chamados por Hughes de “reverse salient”(HUGHES, 1983: 14), ou saliente reverso-um reverso que se torna saliente.Osaliente reversoé algo que atrapalha o crescimento de um sistema.

É um termo que traduz a desarmonia em associações complexas, onde as partes do sistema expandem em ritmos diferentes, com algumas avançando mais rapidamente e outras mais devagar.

Esses elementos que atrasam, que estão em descompasso com o ritmo de expansão do sistema, são os elementos chamados pelo autorde “saliente reverso”.Uma saliência é uma protrusão em uma figura geométrica, uma linha de batalha, ou uma frente fria em expansão […].

Reversos salientes são componentes no sistema que ficaram para trás ou que estão em desacordo com os outros.

Por sugerir mudanças desiguais e complexas, essa metáfora é 16[A]ctors create and maintain systems, and if they fail to do so, the system in question cease to exist.

The stability of the system is a frequently precarious achievement in the face of potentially hostile forces, both social and natural.(MACKENZIE, 2013: 191)

mais apropriada ao se tratar de sistemas do que o conceito visualmente rígido de gargalo.

” (HUGHES, 2013: 66-67, tradução própria)17Os reversos salientes são elementos que impedem o crescimento do sistema e devem ser resolvidos para garantir a continuidade do avanço do sistema sobre o ambiente, porém, as vezes um saliente reversopode colocar em risco todo o funcionamento do sistema.

Quando isso ocorre, ele se torna um “problema crítico” (HUGHES, 2013: 69).

Esse problema crítico é quem vai receber o esforço criativo dos atores do sistema com o objetivo de resolvê-lo, e é nesse momento, como observa Hughes (1983), que agem as forças criativas:






Essa percepção da não participação é fruto de uma compreensão simplista da TS e de seu processo de desenvolvimento.

É uma visãoremanescente da concepção da FBB (2015), que entendeaTS como um objeto ou processo imediato, sem se preocupar muito com as relações sociotécnicas que esses objetos ou processos estabeleceram ou estabelecem para além de suas característicastécnicas.

Aqui o que proponho é que, assim como os processos de conformação de um artefato, a participação não é uma categoria óbvia ou imediata a um objeto tecnológico específico.

Retorno para a visão de compreender a dimensão processual da TS, vindo do conceito de Adequação Sociotécnica (AST) em Dagnino, Brandão e Novaes (2010).

Onde o que é destacado,é que a conformaçãotécnica de um artefato é apenas uma das diversas dimensões -que não são facilmente separadas -que precisam de trabalho para desconstruir uma tecnologia convencional capitalista e contaminá-la com valores diferentes.

A etapa de consolidação da demanda também faz parte da conformação técnica de um artefato.A participação dos moradores da chapada fica mais clara se pensarmos o SGMN como componente de um sistema sociotécnico (aqui me aproprio sintaticamente do conceito de Hughes, mas mantenho sua semântica)muito anterior a ele, o próprio CPCD.

Se pensarmos no CPCD como um sistema tecnológico, com seus diversos componentes, o SGMN, o Sítio Maravilha, as pedagogias, as tecnologias de relatórios, e a própria chapada e seus moradores, a participação deles na definição do SGMN se torna muito mais relevante.

Logo de início, são eles que colocam a demanda de conservação da chapada em questão, por meio do processo descrito no Capítulo 2, e são eles que colocam, posteriormente, a própria necessidade de se pensar uma continuidade de atividades na chapada, que vai resultar no SGMN.Depois de quase um ano de uso do SGMN, coletando dados e fotografias da chapada e suas nascentes, o sistema foi apropriado pelo próprio CPCD, que começou a georreferenciar não apenas as nascentes acompanhadas nas atividades de conservação na chapada, mas todas as atividades que o CPCD realiza no Brasil.

O softwarefoi adaptado pela FS mais uma vez, uma adaptação simples desta vez.

Agora, ao invés de sempre aparecer um indicador azul para cada entrada de dados, o usuárioque está inserindo os dados no sistema pode escolher outros tipos de ícones, onde cada um representa um tipo de atividade diferente.

O ícone azul continua, e representa nascentes ou cursos d’água, o vermelho para marcar sedes doCPCD, Dedo de Gente e as Fabriquetas, o ícone verde para marcar ações de caráter ambiental, o

amarelo para atividades de educação e ícone roxo para marcar atividades que não se encaixam nas categorias anteriores.Esse novo sistema está sendo difundido por todo o CPCD, em todas as cidades que ele atua, e a ideia é que toda e qualquer atividade executada pelo CPCD seja marcada nesse mapa.

Até o momento (2017) o sistema é apenas de uso interno do CPCD, mas a proposta é que ele se torne público e possa ser acessado pelo site da ONG.

Esse novo sistema foi chamado de “Big Mapa” e de 2015 até o mês de abril de 2016, já conta com centenas de marcações nas diversas cidades onde o CPCD atua.As mudanças no código fonte do software foram poucas, mas alteram profundamente algumas funcionalidades.

Com essa nova mudança, não é mais obrigatório inserir as coordenadas geográficas do local onde foi executado a atividade, é possível definir o local simplesmente clicando em uma localização do mapa, pois como muitas das atividades são urbanas, em praças ou casas, as localizações são facilmente.

O drone, que antes operavaapenas na chapada eemAraçuaí, agora é usado para fotografar as ações mais importantes do CPCDem diversas cidades.

Como a ONG possui apenas um drone, ele fica viajando pelo país entre os estados do Maranhão, São Paulo e Minas Gerais, passando pelas cidades onde o CPCD desenvolve projetos e capturando fotos aéreas dos locais onde são executadas atividades.

Normalmente são fotos de tipo “antes e depois”, com o objetivo de mostrar a progressão e efetividades das ações do CPCD.O Big Mapacondensa, agrega e justapõe toda as atividades do CPCD em uma visualização única que atesta suas capacidades e a efetividade de suas ações.

Com o Big Mapa, o CPCD consegue transportar a realidade que ele produz para qualquer lugar, especialmente para escritórios onde o CPCD apresenta seus projetos em busca de apoio.

Funciona como uma visualização geral da história da atuação da ONG, com as centenas de pontos no mapa do Brasil, eao mesmo tempo denotaum futuro possível, caso o CPCD tivesse mais capacidade de atuação.

Como observa M., coordenador da FS:Quando Tião [coordenador geral da ONG] mostrou isso[O Big Mapa]na Petrobras [principal parceira da ONG], eles ficaram impressionados.

T.

[membro da FS que cuida das artes gráficas] fez uma animação que quando Tião clicava em um ponto, passava as fotos mostrando a progressão do lugar.

E quando eles perguntaram quem tinha feito o sistema, Tião respondeu ‘Uns seis meninos lá de Araçuaí, que estão no colegial ainda’.Eles ficaram muito impressionados.

(M., coordenador da Fabriqueta de SoftwareemEntrevista, 2016)

Esse novo protocolo de registro de atividades, que ainda não teve a adoção completa em todas as unidades do CPCD, tem grandes implicações a nível da organização, mas apresentam poucas implicações no sentido mais operacional.

Isso,pois os funcionários e membros do CPCD (os educadores) já têm a prática de produzir relatórios muito difundida e esse novo formato de registro apresenta poucas dificuldades de confecção, exigindo apenas um conhecimento básico nouso de computadores, algo que a maioria dos educadores possuem.3.2.4.Navegando as escalas, do saliente reversoao problema críticoAqui, a 2) contribuição da abordagem de Hughes, sobre uma não distinção absoluta entre o micro e o macro, se torna útil para compreender o processo que ocorre na transformação do SGMN no Big Mapa.

Como observa Mackenzie (2013: 56), o saliente reversoe o problema crítico são os elementos que conformam a ponte entre as escalas, entremicro e o macro.

E sua identificação e solução é justamente um exercício de transformação de escala.

Como observa Hughes (1983: 15), a solução de um problema crítico normalmente leva ao crescimento do sistema.Ao pensar o CPCD como um sistema tecnológico -ou sistema sociotécnico -o texto anterior descreve parte do seu crescimento ao longo dos seus 34 anos de idade, crescimento, aqui entendido como o movimento e as ações necessárias para o aumento de estabilidade do sistema, não necessariamente da expansão do espaço de ação ou da área de atuação da ONG.

Dentro dessa trajetória, os 7 anos do Caminho das Águas foram anos de crescimento estável, onde o CPCD tinha apoio e suas atividades funcionavamcomo esperado.

Com o término do programa em 2014, o CPCD arrisca a perder um componente importante de seu trabalho, a chapada e as comunidade que residem nela, principalmente depois do projeto paraogeorreferenciamento das nascentes enviado a um edital doFundo Nacional sobre Mudanças Climáticas em 201320,não ter sido contemplado com recursos.

A remoção da chapada, como componente do CPCD, teria um impacto muito grande na organização das suas atividades, pois muitos dos projetos estavam ligados a ela de alguma forma, seja os de educação infantil ou das tecnologias de permacultura do Sítio Maravilha.

Abandonar uma área depois de 7 anos de trabalho não era uma opção muito viável.20Sobre o edital, ver: Brasil (2013).



A chapada se torna um problema em uma escala macro, pois compromete toda a funcionalidade do sistema e afetaprocessos em todas as escalas.

Ao afetar a estabilidadedo sistema, a chapada se torna um saliente reverso.O próximo movimento, é quandoTiãoRocha(o coordenador geral do CPCD), instrui M.

(o coordenador da FS) adesenvolver um sistema onde seja possível comparar fotos de tempos diferentes para acessar o desenvolvimento das atividades de conservação na chapada.

Como observa Mackenzie (1983: 14), o movimento de identificar um saliente reversocomo problema crítico é transformar um problema abstrato em um problema concreto, que seja passível de ser resolvido.

E é isso que Tião faz ao encaminhar o problema de construir um sistema para comparar fotos para M.Ao identificar o saliente reversocomo problema crítico, TiãoRocha transforma um problema genérico “oque fazer com a chapada? ”, em um problema objetivo e concreto “construir um softwarepara acompanhar a recuperação das nascentes da chapada”.

O movimento que TiãoRochafaz é transformar a escala do problema do macro para o micro, transformando um problema abstrato pouco acessível em um problema que pode ser atacado “no laboratório”, no caso, no interior da FS(MACKENZIE, 2013).Com o SGMN pronto, a rotina de coleta de dados garante uma atividade periódica na chapada e, apesar de ser uma grande diminuição na intensidade das ações, mantém um mínimo de proximidade entre o CPCD e a chapada, para que o trabalho de 7 anos não seja perdido.

O segundo movimento que Tião Rocha realiza é transformar a solução micro, o SGMN, em um componente que tenta compensar o crescimento que a chapada inviabilizou.

A transformação do SGMN em Big Mapaé mais uma transformação de escala, dessa vez, no movimento contrário, do micro (nível FS e chapada) para o macro (nível CPCD inteiro).

Essa mudança garante que o esforço realizado pela FS em desenvolver o SGMN seja multiplicado em toda a estrutura organizacional da ONG, criando um novo caminho para a expansão do sistema, na tentativa de compensar a diminuição da atuação na chapada.Aqui é importante observar que a direção da causalidade não é simplesmente do saliente reversopara o problemacrítico.

Pois como observa MacKenzie(2013: 192), a identificação de um saliente reversocomo problema crítico levanta a questão sobre o que é possívelde ser resolvido.

O exercício de identificar um saliente reversocomo problema crítico é o exercício criativo de trazer uma dimensão concreta a um problema abstrato, e reconhecer problemas insolucionáveis não traz vantagens para a estabilidade do sistema.

Quando a chapada se torna um saliente reversopara a expansão do CPCD, Tião -em seu

papel de engenheiro de heterogeneidade -traduz o problema em um problema de desenvolvimento de software, pois a capacidade em desenvolver aquele sistema já existia na FS.

O ideal seria aprofundar as atividades de conservação na chapada, com mais oficinas e ações mais diretas, mas não seria possível aprofundar as atividades sem um parceiro que forneça recursos financeiros para o CPCD.

Nesse sentido, Tião aproveita ao máximo a capacidade já existente dentro do CPCD, na FS e na cultura de produzir relatórios, criando uma ferramenta que aumenta a capacidade do CPCD em buscar parceiros.

Como observa Mackenzie (2013):Existe uma tendência natural em identificar como críticos, aqueles problemas que são (ou serão) possíveis de resolver, em ver o saliente reversocomo um obstáculo particular ao progresso que é possível de ser removido.

Falar em “soluções em busca de problemas” é cliché, mas captura de forma precisa um importante aspecto das mudanças tecnológicas (MACKENZIE, 2013: 191-192, tradução própria)21.É nesse sentido que não existe uma ordem obrigatória a priorientre a identificação de um problema crítico e uma solução para ele, assim como não existe uma ordem obrigatória a prioripara a definição de uma demanda e o reconhecimento das capacidades em uma comunidade.

Pois diferentes atores percebem problemas diferentes com base nas capacidades de mobilização do sistema que eles têm disponível.

Como aponta Mackenzie (2013: 190) e Hughes (1983; 2013: 46), as propostas que têm sucesso, tantona definição de um problema quanto na definição de uma solução, dependem da capacidade desse ator de ultrapassar as barreiras disciplinares e escalares, e compor esse tecido sem costuras, mobilizando as mais diferentes dimensões.

E essa é a dimensão mais importante que a abordagem de sistemas tecnológicos de Hughes propicia, e que está em sintonia com a propostada TS e da AST.

A abordagem nos lembra que questões tecnológicas são ao mesmo tempo, questões organizacionais, econômicas, sociais epolíticas.21Thus there is a natural tendency to identify as critical those problems that you are (or will) be able to solve, to see the reverse salient as that particular obstacle to progress that you can remove.

To talk of “ solutions in search of problems ” is a cliché , but it is one that captures accurately an important aspect of technological change.(MACKENZIE, 2013: 191-192)

Adequação sociotécnica e o problema da propriedade dos meios de produção da Fabriqueta de SoftwareEm termos de AST, as categorias mobilizadas são diversas, especialmente se compreendermos o processo expandido do desenvolvimento do artefato, considerando a mudança de escala que a abordagem de sistemas tecnológicos permite.

Assim, o processo de desenvolvimento não acaba com a conformação do SGMN, mas se estende até o Big Mapa.Como abordado anteriormente, a AST introduz a TS como um processo de construção social ao desdobrar o marco teórico em uma dimensão processual.

O objetivo da AST é produzir TS aproveitando da tecnologia convencional já existente, por meio da adoção de critérios suplementares aos técnico-econômicos, visando otimizar as implicações sociais, econômicas e ambientais da tecnologia.

Ou seja, a AST é o caminho para introdução de valores da ES na tecnologia convencional, e ao mesmo tempo, é o caminho para adequar seu funcionamento para receber esses valores.Considerando as implicações do processo de conformação do SGMN, e também do Big Mapa, as modalidades de AST mobilizadas foram principalmente: a de alternativa tecnológica, que é a busca e seleção de alternativas tecnológicas já existentes para atender as demandas do empreendimento; e o ajuste no processo de trabalho, que trata do questionamento da divisão técnica do trabalho propiciado por um ambiente de trabalho democrático e participativo.

Sobre a modalidade de alternativa tecnológica, a FS precisava de imagens aéreas e uma forma de as georreferenciar.

Depois de não obter sucesso nas fontes convencionais, INPE e sistemas já prontos como o Google Maps, se viu obrigada a compor um sistema partindo de partes já existentes.

A FS associou um softwarelivre de georreferenciamento, um aparelho de GPS e um drone, adaptando suas funcionalidades para conformar esse sistema que atenderia a sua demanda específica e objetiva de produzir imagens aéreas periódicas e compará-las.

Nessa modalidade, destaca-se a percepção do grupo sobre a inexistência de tecnologias convencionais prontas para serem empregadas.

Normalmente, essa falta se dá justamente pela posição marginal dos EESse das demandas que os afligem, como recuperação e conservação ambiental e inclusão social, como é o caso do CPCD e da FS.Sobre o ajuste no processo de trabalho, o sucesso no desenvolvimento do SGMN e do Big Mapareflete a eficácia do modelo de trabalho dos membros da FS.

As relações entre

os membros da FS, que já contam com discussões democráticas sobre carga de trabalho, escolha de projetos, escolha de área e do próprio modelo de funcionamento do grupo, são aprofundadas e o grupo fica mais certo sobre a forma como está sendo gerido o empreendimento.

Apesar da autogestão não ser o modelo de gestão exato da FS, o modelo é bastante democrático e participativo, tanto em relação a própria FS quando aDedo de Gente.Deforma geral, a reflexão sobre as modalidades de AST (Dagnino, Brandão e Novaes, 2010: 99) tem como centralidade a transição da propriedade dos meios de produção, sendo que o aprofundamento nas modalidades de AST é decorrente do aprofundamento na coletivização dos meios de produção.

Essa transição coloca, repetidamente, problemas para a organização, que precisa desenvolver novas soluções para dar continuidade ao seu processo produtivo.

Novas soluções, pois o conhecimento e os artefatos disponíveis não têm capacidade de solucionar os problemas os quais oempreendimento vai passar, pois as tecnologias convencionais capitalistas disponíveis, muitas vezes, nem compreendem o problema do empreendimento como problema.

Por essa falta de disponibilidade, resta que o empreendimento se associe com os mais diversos atores, sejam instituições públicas de pesquisa, universidades, outros EESs, em busca da criação dessas soluções.O caso da FS é problemático, pois a questão da propriedade dos meios de produção é incerta e flutuante, e seu objetivo não é a produção de bens e serviços, mas a produção de alternativa de trabalho e renda para seus membros.

Os meios de produção, compreendidos na escala da organização, como máquinas, equipamentos e recursos, têm a propriedade distribuída: os conhecimentos necessários para o desenvolvimento do software estão disponíveis na Internet, normalmente sob licenças permissivas, open sourceou livre.

As máquinas, entendidas como a infraestrutura material que os permite trabalhar, como os computadores, o espaço e a conexão de internet são todas propriedades do CPCD, que é, também, a organização que dispõe dos recursos necessários para a continuidade do funcionamento da FS.

Porém, o desenvolvimento de software, seja do SGMN, ou de qualquer site contratado por um cliente, não tem como objetivo produzir lucro, mas sim recursos financeiros que garantam a reprodução das atividades do próprio grupo, o que é aderente à proposta da ES.

Esse objetivo é tanto o que torna possível a estrutura da FS, quanto o que limita sua possibilidade de crescimento, sendo sempre economicamente dependente do CPCD, que tem como fonte, recursos vindos de editais e parcerias de responsabilidade social empresarial.



Em uma visão mais macro, a experiência da FS continua situada em um modo de produção específico, o capitalista.

Como lembra Fuchs e Sandoval (2015) “um modo de produção é uma unidade entre forças produtivas e relações de produção” (Marx e Engels, 1845/46, p.

 apudFUCHS e SANDOVAL, 2015: 39).

Sendo as relações de produção organizadas pelas relações de classes, que determinamquem detêm a propriedade dos meios de produção (classe proprietária dominante) e quem não detêm (classe não-proprietária subalterna), epela organização das forças produtivasas forças produtivas.Assim, as “forças produtivas informacionais” desempenhando seu “trabalho digital” -compreendido como “todas as atividades que criam valor-de-uso que são objetificadas em tecnologias digitais, conteúdos e produtos gerados pela aplicação de mídias digitais” (Fuchs, 2014a, 352) ” -não estão livres da organização que as relações de classe implicam, mas sim estão imersas.

Pois as forças produtivas informacionais não estão no mesmo plano do meio de produção, como observa Fuchs e Sandoval (2015): Enquanto o capitalismo é um modo de produção, os termos sociedade agrícola, sociedade industrial e sociedade da informação caracterizam formas específicas de organização das forças produtivas” (FUCHS e SANDOVAL, 2015: 40)Contudo, é essa imersão que possibilita a relação da FS e seus valores, com a ESe seus valores.

São atividades da margem que tem como preocupação, não a reprodução do capital -pois ele não os pertence -, mas sim a reprodução do trabalho, da condição de sobrevivência de seus membros e de outras possibilidades de vida, ou seja, a inclusão social.

É nesse sentido que a expectativa da AST da coletivização da propriedade dos meios de produção parece entrar em conflito com a experiência da FS, mas é também por essa composição da relação entre a FS e as relações de classe, que essa não correspondência não se torna uma contradição na proposta teórica e política da AST edaTS.

Apresentando-se como mais uma das múltiplas expressões da ESno Brasil.



Neste capítulo, apresentei os momentos: Em Construção e Implicações.

De forma geral, o objetivo do capítulo foi mostrar como a demanda por água na chapada se tornou um software de georreferenciamento de imagens e que implicações isso tem para osatores envolvidos.

Para tal, apresento o processo de concepção do SGMN, seus componentes, os

motivos das decisões técnicas e o movimento de transição na constituição da comunidade ao longo do processo de desenvolvimento.Na primeira seção, apresento como as demandas tomam formas distintas em cada momento do processo e que a cada nova reformulação elas vão ganhando.

No caso do SGMN o que se percebe é a transformação da demanda por água, das comunidades da chapada, por demandas mais próximas ao funcionamentodo CPCD.

Porém, essa percepção, de que existe uma não participação da comunidade na conformação do sistema é proveniente da compreensão da TS como apenas um artefato, o que é uma compreensão residual da FBB.

Ao olharmos para a TS em sua dimensão processual, como propõe Dagnino (2014) é possível perceber que o SGMN mobiliza e alinha uma série de interesses, e que mesmo as comunidades da chapada não tendo um papel ativo na conformação dos detalhes técnicos do artefato, influenciam nas associações sociotécnicas que o artefato estabelece.Na segunda seção, mostro como a abordagem de sistemas tecnológicos de Hughes (1983; 2013) pode contribuir para compreender a relação entre os diferentes atores e o artefato e do artefato com seus próprios componentes.

Nessa abordagem, o contexto é integrado na unidade de análise -o sistema -e outros tipos de relações aparecem nas diferentes escalas que se tornam visíveis.

Especialmente, a abordagem mostra como o artefato SGMN é relevante na estabilização econômica e organizacional do CPCD como um todo, e como a apropriação do SGMN pelo CPCD garante a continuidade das atividades de conservação na chapada, que influenciam diretamente em sua demanda por água.A abordagem de sistemas tecnológicos reforça a noção domarco teórico da TS, de que uma questão tecnológica é ao mesmo tempo social, econômico e político, e que a própria divisão entre essas dimensões é confusa no desenrolar da conformação do artefato.

A abordagem também oferece uma forma mais sistemática de navegar nas diferentes escalas onde o artefato atua, transitando entre seus componentes e nas relaçõesque eles estabelecem.

Essa mobilidade de escalas mostra como uma tecnologia socialtem diferentes significados para os diferentes atores que se relacionam com ela.

Como para o CPCD é um elemento para garantira entrada derecursos, como para a FS é a oportunidade de colocar em prática as capacidades técnicas já desenvolvidas e como para as comunidades da chapada é uma chance de manter a associação deles com o CPCD, que é ofio condutor de suas demandas materiais e políticaspara com a prefeitura.Essas diferentes compreensões, mostrama importância de

abordar o problema da TS de diferentes perspectivas e como cada uma pode revelar um caminho de AST diferente.Ao final, relaciono as atividades da FS e do CPCD no desenvolvimento do artefato com as modalidades de AST descritas no Capítulo I.

Mostro que a configuração da organização e a natureza do resultado de seu trabalho, coloca a questão sobre como deve ser compreendido a propriedade dos meios de produção em uma organização que, a princípio, parece não ter a produção de bens e serviços como objetivo principal.

Relaciono que essa característica se encaixa na multiplicidade de expressões da ES, que por operarem na margem docapitalismo, exercitam uma série de categorias contraditórias para produzir o que efetivamente lhes importa, que é a inclusão social de seus membros.






Nesse sentido, a experiência da FS e do CPCD parecem ser premonitórias no sentido de que apontam para um caminho tenebroso o qual os partidários da proposta da TS edaES talvez tenham que caminhar, que é a incorporação cada vez maior das iniciativas da ES pelo discurso e pelas práticas da iniciativa privada.

Porém, assim como sempre foi feito pela ES enquanto movimento, é imprescindível construir estratégias de subversão e introdução dos interesses de inclusão social nos espaços de poder, seja conseguindo criar uma secretaria nacional, como foi feito anteriormente, seja subvertendo os recursos disponibilizados por meio dos programas de responsabilidade social empresarial, como talvez seja cada vez mais necessário fazer.Tendo esse cenário em mente, e a questão central da pesquisa, sobre a forma que podemos associar inclusão social e software, tento compreender como a FS cria essa associação, nabusca de insumos para pensar as possibilidades dessa associação.

No primeiro capítulo, faço uma recuperação das diferentes compreensões do conceito de TSe como cada perspectiva aborda a problemática da inclusão social.

Especialmente, abordo a perspectiva da FBB (2015) e a perspectiva em Dagnino (2014), mostrando que suas diferenças são pouco negociáveis, pois advém de projetos normativos diferentes e pouco conciliáveis.

Enquanto a FBB compreende TS como um objeto ou artefato localizado que “resolvem problemas sociais” pontuais, Dagnino (2014) foca na questão da propriedade dos meios de produção e compreende a TS como uma base cognitiva alternativa à tecnociência convencionalcapitalista, que dispõe dos meios de produção deforma coletiva e que tem como objetivo não a reprodução do capital, mas a produção de inclusão social.

Inclusão social também é compreendida de forma diferente nessas duas perspectivas.

Enquanto a FBB compreende em termos mais convencionais, de criar condições para que um sujeito possa ser inserido no mercado de trabalho formal, disponha de salário e participe da lógica de consumo comum.

Ainclusão proposta pela perspectiva daTS em Dagnino (2014) é a da ES, é criar possibilidade de vida fora do circuito convencional capitalista, uma possibilidade de vida que não dependa do consumo e da exploração, mas sim da reprodução do trabalho e da solidariedade.

Em termos gerais, a compreensão em FBB (2015) e Dagnino (2014) apresentam projetos políticos muito diferentes.Tendo em vista que meu objeto de pesquisa transita parcialmente entre as duas visões, tem como objetivo a produção de inclusão social e nãoareprodução do capital, dispõe de um ambiente de trabalho participativo e não coercitivo, mas mantém a propriedade privada

dos meios de produção.

Utilizo as diferentes contribuições para compor um quadro que auxilie a análise da experiência da FS (Quadro 4).

O quadro foi desenvolvido na interação entre as concepções sobre TS e a experiência de campo, é sobretudo uma ferramenta heurística, criada para auxiliar o estudo do caso da FS para compreender a constante interação entre um artefato e a comunidade que o utiliza.

Com o Quadro pronto, utilizo das categorias para expor as múltiplas interações entre os diferentes grupos que participam da confecção do artefato e os diferentes significados que eles atribuem ao processo o qual participam.

No Capítulo 2, descrevo a organização CPCD e sua estrutura e como seus diferentes projetos se relacionam através das práticas difundidas pela organização, focando em como eles compõem uma certa cadeia, que tenta alinhar a capacidade de um projeto com a demanda de outro.

Nesse capítulo descrevo o processo de conformação da demanda.

E o que fica claro é que a constituição de uma comunidade que tem interesse em uma TS também é um longo processo de negociação, que tenta equacionar os interesses dos diferentes atores envolvidos, e não apenas uma condição histórica estática.

Na experiência do CPCD com as famílias da chapada, o que concluo éque, apesar das relações serem assimétricas nessa conformação da comunidade -das suas demandas e capacidades -, é na relação entre os atores que as diferentes perspectivas sobre a demanda convergem para uma formulação comum, e é nesse movimento, que as demandas abstratas vão se transformando e ganhando materialidade.Partindo do processo de definição da demanda expressa no Capítulo 2, utilizo o Capítulo 3 para descrever o processo de desenvolvimento do SGMN e suas implicações para os atores envolvidos, que são momentos respectivos ao momento “Em Construção”e o “Implicações”, a segunda e terceira linha do Quadro 4.O objetivo do Capítulo 3 é tentar responder como a demanda original, por água, se reconfigurou em uma demanda por um software de georreferenciamento.

O que fica claro no capítulo é que para tentar responder essa questão é preciso compreender o SGMN para além das suas funcionalidades e relações imediatas com a demanda original, é preciso compreender como ele habita em diferentes escalas e diferentes domínios.

Para isso, utilizo da abordagem de sistemas tecnológicos de Hughes (1983;2013), que me permite olhar a TS como um artefato que ao mesmo tempo, é formado por diversos componentes interrelacionados, e também é componente de outros arranjos.

Essa compreensão, permite estender as implicações do desenvolvimento do artefato para além da chapada e da FS, chegando a toda estrutura do CPCD, e nesse movimento, mostrar como o

processo de construção da tecnologia socialdepende e transforma uma série de relações que não são imediatas de seu objetivo e nem de seu propósito técnico, mas que são fundamentais para o correto funcionamento do artefato.Esse movimento de escala,permitido pela identificação do saliente reverso, que leva um problema do micro ao macro e vice-versa, recoloca a questão posta em Dagnino, Brandão e Novaes (2010) de compreender a TS em sua dimensão processual, e não como simples objeto resultado de um processo técnico.

Para compreender o fenômeno da TS, em sua multiplicidade e complexidade, é fundamental ser possível navegar nessas diferentes escalas e dimensões e compreender que uma questão tecnológica, é também uma questão econômica, social e política; que é o fundamento da proposta conceitual e política da TS.Essa percepção coloca um problema para a questão da reaplicabilidade de uma TS.

De forma alguma quero dizer que um artefato desenvolvido em um lugar não possa ser usado em outro, ou que a TS não possui umamaterialidade.

O que proponho,é que ofuncionamento de uma TS não está ligado apenas à aderência dela a sua comunidade alvo, não depende apenas da apropriação da comunidade alvo de uma tecnologia ou processo.

Isso pois, a ‘comunidade alvo’ se estende para os dois lados, tanto dos que desenvolveram a TS quanto dos que usam a TS.

Assim, aumentar a aderência da TS na sua comunidade alvo é tanto um processo de alinhamento das demandas materiais entre os dois atores quanto do alinhamento de suaspercepções políticas.

Nesse sentido, a construção de uma TS é a construção de uma extensa rede de relações que incorpora artefatos técnicos, conhecimentos tradicionais e científicos, expectativas econômicas, sociais e políticas, mas que tem como foco a inclusão social, e nessa complexidade, como conclui Jesus (2010), “nem transferência e nem reaplicação são termos adequados para designar uma experiência de TS” (JESUS, 2010: 105).Sobre a utilização do Quadrode Leitura Sociotécnica (Quadro4), ele contribui no sentido que estabelece uma ordem temporal para a compreensão das diferentes interações que ocorrem ao longo do desenvolvimento de uma “tecnologia social”.

A divisão temporal, entre os diversos momentos, é útil pois abre espaço para incorporar na narrativa a confusão lógica que os processos de co-produçãoapresentam, confundindo causa e consequência na conformação do “tecido sem costuras”.

O quadro, como já foi explicitado anteriormente, é uma ferramenta heurística, construída a partir na relação entre a experiência de campo com a FS e as contribuições da TS, e corresponde a uma ferramenta para compreender este caso em específico.

Contudo, a flexibilidade interpretativa que ele oferece, dando liberdade sobre as

escolhas analíticas e políticas, faz com que ele possa ser utilizado para o estudo de outras experiências de desenvolvimento de TS, onde a preocupação é compreender mais de perto a construção mútua do artefato e da comunidade.O quadro ainda apresenta diversas insuficiências, como a dificuldade de transição entre um momento e outro, como no caso onde a história da constituição das demandas e capacidades da comunidade se mistura com opróprio processo de desenvolvimento do artefato, e a concentração de um momento analítico no momento três.

Apesar dessas inconsistências, a própria dificuldade de classificação explicita a característica fundamental da construção sociotécnica, que é o não respeito aos limites disciplinares e a não existência de uma ordem lógica a priorientre o que é causa e o que é consequência.4.2.Uma Proposta de AproximaçãoNessa seção reservo um espaço para falar sobre algumas propostas mais normativas e especulativas sobre como pensar o softwareem termos da TS e para a expansão da ES.

E, seguindo a linha 4 do Quadro 4, apresento a questão da integração da experiência do SGMN na cadeia solidária as oportunidades de desenvolvimento que essa TS abre e os vínculos institucionais de produção de conhecimento que ela pode integrar.Como coloca Dagnino (2014), a perspectiva da TStem sua orientação política explícita, pois compreende a dimensão política da tecnociência.

E justamente por compreender essa dimensão, que é naturalizada e escondida na tecnologia convencional capitalista, a TS permite almejar uma configuração de mundo específica.

Essa proposta política insere um princípio de economicidade sobre a abordagem da TS, como observa o autor:Retomo, por isso, o dito inicialmente a respeito do princípio de economicidade que deve orientar o trabalho de pesquisa, lembrando que sãosituações em que é possível materializar a combinação entre as potencialidades de comunidades excluídas e problemas locais, aquelas que devem concentrar nossa atenção.

Isso porque é a análise dessas situações que nos poderá auxiliar a identificar caminhosgenéricos de Adequação Sociotécnica passíveis de serem seguidos em atividades de desenvolvimento de TS.

(DAGNINO, 2014: 175)Nesse sentido, o estudo da experiência da FS com o desenvolvimento de software se insere justamente na tentativa de identificar possibilidades de avanço no desenvolvimento da

TS, traçando caminhos mais genéricos de AST para que o desenvolvimento de softwareseja componente para a inclusão social.Primeiramente, é importante observar de forma clara como o CPCD associa softwarecom inclusão social.

Partindo do texto já desenvolvido nos capítulos anteriores, posso dizer que ela divide essa relação em duas formas: 1) uma perspectiva de ensino técnico, que utiliza o desenvolvimento de softwarecomo uma atividade de formação que produza oportunidades de aprendizagem, ignorando a finalidade do software, o foco é a inclusão dos próprios membros da FS; 2) uma perspectiva de aplicação, que se preocupa em desenvolver softwaresque atendam demandas de projetos que têm como finalidade a inclusão social, como por exemplo a recuperação da chapada, ou as atividades de educação infantil.

No caso da FS, são basicamente os projetos do CPCD.A primeira perspectiva, de ensino técnico, se deve a uma característica particular do desenvolvimento de softwaree da distribuição de seu conhecimento.

Diferentemente de um empreendimento mais convencional, como a Fabriqueta de Marcenaria ou Cartonagem por exemplo, que precisa de máquinas específicas para produzir as peças, que ocupam muito espaço físico edemandam insumos materiais que precisam ser comprados e armazenados.

AFSprecisa apenas de computadores e conexão com a internet para operar, uma infraestrutura física muito mais acessível.

Isso, devido ao fato de que grande parte dos conhecimentos e tecnologias necessários para desenvolver software, estão disponíveis na internet com licenças permissivas, principalmente open source, como observa os próprios membros da FS.

Essa combinação, de uma baixa necessidade de infraestrutura física e a disponibilidade de conhecimento online, coloca a FS como uma iniciativa privilegiada e de pouco dispêndio de recursos por parte do CPCD, o que facilita sua implantação.A perspectiva interessante que a FS coloca é que ela consegue alinhar essas duas formas de relacionar desenvolversoftware com inclusão social.

Criando um espaço de aprendizagem técnica onde os produtos desenvolvidos atendem demandas que visam a inclusão social, que são principalmente os projetos do CPCD.

O SGMN é um artefato desenvolvido localmente e que atende a uma demanda local extremamente específica e, sobretudo, exercita um conjunto de relações que diz respeito a história do CPCD e das comunidades da Chapada do Lagoão.

Por conta disso, imaginar algo como uma capacidade de transferência tecnológica ou que ele pode disputar um statusde sistema dominante frente a uma “concorrência” de outros serviços de georreferenciamento

não é o foco da discussão.

Pois a própria lógica do desenvolvimento da TS e da ES não é a produção de objetos que normatizem as relações sociais onde são implantados, mas sim que a participação social na construção de um artefato-soluções tenha poder para definir o quão disposta a comunidade está em ter sua própria configuração afetada por essa implantação.

Isso não quer dizer que as “tecnologias sociais” não possam resolver problemas genéricos, mas sim que existe uma liberdade democrática na definição do próprio mundo material onde essas comunidades querem viver, algo que não está presente na tecnociência convencional capitalista.Nesse sentido,é mais relevante abordar a questão sobre a possibilidade de integração do desenvolvimento de softwarecom a ESpor meio da TS, do que especular sobre usos alternativos dos componentes do SGMN.O mais importante sobre a experiência da FS é, como observa Dagnino (2014), reconhecer caminhos mais genéricos e certeiros de AST.Sobre a atuação da ES, Dagnino(2014: 171) observa que os espaços os quais a ES consegue disputar e ocupar atualmente são setores onde a perspectiva de remuneração do capital é abaixo da expectativa do mercado, seja por determinantes políticos, tecnológicos ou culturais.

Nesse sentido, os setores clássicos onde a ES costuma ser mais representativa são nos catadores de material reciclado, na agricultura familiar e nas fábricas recuperadas.

Como observa o autor:No meio urbano, é só nas fábricas recuperadas, ou nas cooperativas de catadores de materiais recicláveis que adicionam o valor de sua força de trabalho a um capital constante com um valor praticamente nulo, como é o caso do lixo, ondeformas de produzir alternativas são possíveis.

(DAGNINO, 2014: 175)No caso do desenvolvimento de softwarea forma como o setor é organizado talvez ofereça oportunidades para que a ES consiga se apropriar de algumas de suas partes e utilizá-lo para continuar a avançar, adensando sua cadeia com um setor que hoje é central na atividade econômica global.

Assim como foi colocado pela experiência da FS, grande parte dos conhecimentos necessários para desenvolver softwarese encontram disponíveis na internet gratuitamente e com licenças de uso permissivas.

E a infraestrutura necessária é muito pequena se comparada ainfraestruturas necessárias para implantação de fábricas recuperadas, tornando-semuito menos proibitiva para os EESs, que tem, historicamente, grande dificuldade em acessar

recursos financeiros para implantação, seja pela falta de capital dos sócios ou pela falta de linhas de crédito específicas(IPEA, 2015).Essa distribuição específica dos meios de produção quando se fala de software, das ferramentas físicas e cognitivas necessárias para manter o processo produtivo, coloca uma situação análoga à questãodas latinhas dos catadores.

Se no caso dos catadores, a viabilidade econômica se dá pela propriedade coletiva dos meios de produção -o lixo não tem um proprietário específico -e pelo o quase nulo valor da mão de obra dos catadores, que são absolutamentemarginalizados (DAGNINO, 2014), o caso do desenvolvimento de softwareapresenta algumas idiossincrasias próximas.

Os artefatos fundamentais para se desenvolver um softwareestão em grande parte disponíveis na internet de forma gratuita, as bibliotecas, oscódigos-fonte, apostilas, comunidades de ajudaetc, compartilham de uma cultura de acesso livre, e não é incomum que membros do setor sejam, nesse sentido, autodidatas, ou não tenham passado por uma formação convencional.

O material básico para o desenvolvimento de softwareestá sempre online, de forma análoga à latinha para os catadores, qualquer um pode pegar e usar, seja por meio de licenças permissivas ou por pirataria.Porém, diferentemente do caso dos catadores, que têm na sua ausência de “empregabilidade” a qualificação para preencher o espaço de força de trabalho na atividade de catar latinha, o profissional do softwaretem o reconhecimento do mercado formal na sua capacidade técnica.

O que coloca a questão fundamental para a ES e para a TS, que é aformação política dos “profissionais exatos”, e como os engajar na ES.

Nesse sentido, a experiência do CPCD é bastante representativa, pois a constituição da FS é, sobretudo, de jovem que compartilham os valores de inclusão social propagados pelo CPCD.Diferente do caso dos catadores, não existe uma limitação de acesso do capital ao setor do desenvolvimento de software, muito pelo contrário, existe um grande interesse das empresas convencionais no setor.

Porém, apenas demandas específicas e de grande escala atendem as taxas de remuneração do capital necessárias para serem viáveis para as empresas convencionais capitalistas, e as demandas da ES e dos EESs não estão nesse conjunto de demandas.

E essa seletividade é devida, em parte, por essa característica coletiva das ferramentas necessárias para se desenvolver um software.Assim, a possibilidade de incremento da cadeia solidária pela apropriação do desenvolvimento de softwarepela ES está justamente na característica coletiva das ferramentas e conhecimentos necessários para oseudesenvolvimento e na exclusividade das

demandas da ES.

Configurando dentro das situações típicas da transição entre economia informal e ES em Dagnino (2014), onde a possibilidade de remuneração do capital é abaixo da expectativa do mercado, e as capacidades para atender as demandas da ES estão disponíveisde forma livre.Essas demandas exclusivas da ES, quando se trata de software, traz consigo a necessidade da definição de uma agenda de pesquisa tecnocientífica que contemple sua especificidade.

Modelos como a FS, que beiram a prática autodidata, são interessantes para experiências pontuais, mas ao tratar da ES enquanto um setor, seria o mesmo que estabelecer uma nova instituição de pesquisa.Nesse sentido, o esforço de trazer o desenvolvimento de softwarepara dentro da cadeia solidária, traz a possibilidade e necessidade de estabelecer uma relação mais próxima com as agências tecnocientíficas, o que volta naturalmente, a questão anterior da formação política dos “profissionais exatos”.Com todas essas dificuldades na expansão da TS, e como partidário da mesma, me permito o movimento normativo de conceber o desenvolvimento de softwarecomo um saliente reversoe o identifico como um problema crítico, que se não for tratado, coloca em risco o desenvolvimento futuro da TS e da ES, especialmente considerando o momento político atual, tanto nacional como internacional, de desmantelamento das estruturas de seguridade social.

E se a proposta da TS é de se configurar como uma base cognitiva de lançamento da ES (DAGNINO, 2014), se torna ainda mais urgente -em um mundo cada vez mais circunscrito pelas tecnologias digitais -direcionar os esforços analíticos e estratégicos em aprofundar a compreensão do lugar e das possibilidades das TICs na construção de outros mundos possíveis, onde a inclusão e não a exploração seja a norma, como é a proposta da Economia Solidária.



